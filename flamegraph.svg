<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="2500" height="1462" onload="init(evt)" viewBox="0 0 2500 1462" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1462" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1445.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="2490" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="2490" y="1445.00"> </text><svg id="frames" x="10" width="2480" total_samples="12430"><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (432 samples, 3.48%)</title><rect x="4.0949%" y="757" width="3.4755%" height="15" fill="rgb(227,0,7)" fg:x="509" fg:w="432"/><text x="4.2149%" y="767.50">&lt;core::res..</text></g><g><title>miniz_oxide::MZFlush::new (44 samples, 0.35%)</title><rect x="17.4175%" y="741" width="0.3540%" height="15" fill="rgb(217,0,24)" fg:x="2165" fg:w="44"/><text x="17.5375%" y="751.50"></text></g><g><title>miniz_oxide::inflate::core::apply_match (14 samples, 0.11%)</title><rect x="24.0225%" y="677" width="0.1126%" height="15" fill="rgb(221,193,54)" fg:x="2986" fg:w="14"/><text x="24.1425%" y="687.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (14 samples, 0.11%)</title><rect x="24.0225%" y="661" width="0.1126%" height="15" fill="rgb(248,212,6)" fg:x="2986" fg:w="14"/><text x="24.1425%" y="671.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (14 samples, 0.11%)</title><rect x="24.0225%" y="645" width="0.1126%" height="15" fill="rgb(208,68,35)" fg:x="2986" fg:w="14"/><text x="24.1425%" y="655.50"></text></g><g><title>miniz_oxide::inflate::core::decompress_fast (204 samples, 1.64%)</title><rect x="22.5020%" y="693" width="1.6412%" height="15" fill="rgb(232,128,0)" fg:x="2797" fg:w="204"/><text x="22.6220%" y="703.50">min..</text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (2,069 samples, 16.65%)</title><rect x="7.5704%" y="757" width="16.6452%" height="15" fill="rgb(207,160,47)" fg:x="941" fg:w="2069"/><text x="7.6904%" y="767.50">&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBacke..</text></g><g><title>miniz_oxide::inflate::stream::inflate (801 samples, 6.44%)</title><rect x="17.7715%" y="741" width="6.4441%" height="15" fill="rgb(228,23,34)" fg:x="2209" fg:w="801"/><text x="17.8915%" y="751.50">miniz_oxide::inflate..</text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (213 samples, 1.71%)</title><rect x="22.5020%" y="725" width="1.7136%" height="15" fill="rgb(218,30,26)" fg:x="2797" fg:w="213"/><text x="22.6220%" y="735.50">mini..</text></g><g><title>miniz_oxide::inflate::core::decompress (213 samples, 1.71%)</title><rect x="22.5020%" y="709" width="1.7136%" height="15" fill="rgb(220,122,19)" fg:x="2797" fg:w="213"/><text x="22.6220%" y="719.50">mini..</text></g><g><title>miniz_oxide::inflate::core::init_tree (9 samples, 0.07%)</title><rect x="24.1432%" y="693" width="0.0724%" height="15" fill="rgb(250,228,42)" fg:x="3001" fg:w="9"/><text x="24.2632%" y="703.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::total_in (64 samples, 0.51%)</title><rect x="24.2156%" y="757" width="0.5149%" height="15" fill="rgb(240,193,28)" fg:x="3010" fg:w="64"/><text x="24.3356%" y="767.50"></text></g><g><title>flate2::mem::Compress::total_in (64 samples, 0.51%)</title><rect x="24.2156%" y="741" width="0.5149%" height="15" fill="rgb(216,20,37)" fg:x="3010" fg:w="64"/><text x="24.3356%" y="751.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::Backend&gt;::total_in (64 samples, 0.51%)</title><rect x="24.2156%" y="725" width="0.5149%" height="15" fill="rgb(206,188,39)" fg:x="3010" fg:w="64"/><text x="24.3356%" y="735.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::total_out (46 samples, 0.37%)</title><rect x="24.7305%" y="757" width="0.3701%" height="15" fill="rgb(217,207,13)" fg:x="3074" fg:w="46"/><text x="24.8505%" y="767.50"></text></g><g><title>flate2::mem::Compress::total_out (46 samples, 0.37%)</title><rect x="24.7305%" y="741" width="0.3701%" height="15" fill="rgb(231,73,38)" fg:x="3074" fg:w="46"/><text x="24.8505%" y="751.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::Backend&gt;::total_out (46 samples, 0.37%)</title><rect x="24.7305%" y="725" width="0.3701%" height="15" fill="rgb(225,20,46)" fg:x="3074" fg:w="46"/><text x="24.8505%" y="735.50"></text></g><g><title>&lt;async_compression::codec::gzip::decoder::GzipDecoder as async_compression::codec::Decode&gt;::decode::{{closure}} (2,773 samples, 22.31%)</title><rect x="3.2422%" y="805" width="22.3089%" height="15" fill="rgb(210,31,41)" fg:x="403" fg:w="2773"/><text x="3.3622%" y="815.50">&lt;async_compression::codec::gzip::decoder::GzipDecoder as async_compression::..</text></g><g><title>&lt;async_compression::codec::flate::decoder::FlateDecoder as async_compression::codec::Decode&gt;::decode (2,773 samples, 22.31%)</title><rect x="3.2422%" y="789" width="22.3089%" height="15" fill="rgb(221,200,47)" fg:x="403" fg:w="2773"/><text x="3.3622%" y="799.50">&lt;async_compression::codec::flate::decoder::FlateDecoder as async_compression..</text></g><g><title>async_compression::codec::flate::decoder::FlateDecoder::decode (2,773 samples, 22.31%)</title><rect x="3.2422%" y="773" width="22.3089%" height="15" fill="rgb(226,26,5)" fg:x="403" fg:w="2773"/><text x="3.3622%" y="783.50">async_compression::codec::flate::decoder::FlateDecoder::decode</text></g><g><title>&lt;flate2::mem::DecompressError as core::fmt::Display&gt;::fmt (56 samples, 0.45%)</title><rect x="25.1006%" y="757" width="0.4505%" height="15" fill="rgb(249,33,26)" fg:x="3120" fg:w="56"/><text x="25.2206%" y="767.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (209 samples, 1.68%)</title><rect x="26.5809%" y="757" width="1.6814%" height="15" fill="rgb(235,183,28)" fg:x="3304" fg:w="209"/><text x="26.7009%" y="767.50">crc..</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (360 samples, 2.90%)</title><rect x="25.5511%" y="805" width="2.8962%" height="15" fill="rgb(221,5,38)" fg:x="3176" fg:w="360"/><text x="25.6711%" y="815.50">&lt;crc32fa..</text></g><g><title>crc32fast::Hasher::update (360 samples, 2.90%)</title><rect x="25.5511%" y="789" width="2.8962%" height="15" fill="rgb(247,18,42)" fg:x="3176" fg:w="360"/><text x="25.6711%" y="799.50">crc32fas..</text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (263 samples, 2.12%)</title><rect x="26.3315%" y="773" width="2.1158%" height="15" fill="rgb(241,131,45)" fg:x="3273" fg:w="263"/><text x="26.4515%" y="783.50">crc32..</text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (23 samples, 0.19%)</title><rect x="28.2623%" y="757" width="0.1850%" height="15" fill="rgb(249,31,29)" fg:x="3513" fg:w="23"/><text x="28.3823%" y="767.50"></text></g><g><title>&lt;async_compression::codec::gzip::decoder::GzipDecoder as async_compression::codec::Decode&gt;::decode (3,357 samples, 27.01%)</title><rect x="1.7136%" y="837" width="27.0072%" height="15" fill="rgb(225,111,53)" fg:x="213" fg:w="3357"/><text x="1.8336%" y="847.50">&lt;async_compression::codec::gzip::decoder::GzipDecoder as async_compression::codec::Decode&gt;::d..</text></g><g><title>async_compression::codec::gzip::decoder::GzipDecoder::process (3,357 samples, 27.01%)</title><rect x="1.7136%" y="821" width="27.0072%" height="15" fill="rgb(238,160,17)" fg:x="213" fg:w="3357"/><text x="1.8336%" y="831.50">async_compression::codec::gzip::decoder::GzipDecoder::process</text></g><g><title>flate2::crc::Crc::update (34 samples, 0.27%)</title><rect x="28.4473%" y="805" width="0.2735%" height="15" fill="rgb(214,148,48)" fg:x="3536" fg:w="34"/><text x="28.5673%" y="815.50"></text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::consume (1,174 samples, 9.44%)</title><rect x="28.7208%" y="837" width="9.4449%" height="15" fill="rgb(232,36,49)" fg:x="3570" fg:w="1174"/><text x="28.8408%" y="847.50">&lt;tokio::io::util::buf_reader::B..</text></g><g><title>async_compression::tokio::bufread::generic::decoder::Decoder&lt;R,D&gt;::do_poll_read (4,697 samples, 37.79%)</title><rect x="1.7136%" y="853" width="37.7876%" height="15" fill="rgb(209,103,24)" fg:x="213" fg:w="4697"/><text x="1.8336%" y="863.50">async_compression::tokio::bufread::generic::decoder::Decoder&lt;R,D&gt;::do_poll_read</text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (166 samples, 1.34%)</title><rect x="38.1657%" y="837" width="1.3355%" height="15" fill="rgb(229,88,8)" fg:x="4744" fg:w="166"/><text x="38.2857%" y="847.50">&lt;t..</text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (4,893 samples, 39.36%)</title><rect x="0.3701%" y="917" width="39.3644%" height="15" fill="rgb(213,181,19)" fg:x="46" fg:w="4893"/><text x="0.4901%" y="927.50">&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read</text></g><g><title>&lt;dads_gzip_thing::dec::GzDecoderAsync as tokio::io::async_read::AsyncRead&gt;::poll_read (4,893 samples, 39.36%)</title><rect x="0.3701%" y="901" width="39.3644%" height="15" fill="rgb(254,191,54)" fg:x="46" fg:w="4893"/><text x="0.4901%" y="911.50">&lt;dads_gzip_thing::dec::GzDecoderAsync as tokio::io::async_read::AsyncRead&gt;::poll_read</text></g><g><title>&lt;async_compression::tokio::bufread::GzipDecoder&lt;R&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (4,893 samples, 39.36%)</title><rect x="0.3701%" y="885" width="39.3644%" height="15" fill="rgb(241,83,37)" fg:x="46" fg:w="4893"/><text x="0.4901%" y="895.50">&lt;async_compression::tokio::bufread::GzipDecoder&lt;R&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read</text></g><g><title>&lt;async_compression::tokio::bufread::generic::decoder::Decoder&lt;R,D&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (4,726 samples, 38.02%)</title><rect x="1.7136%" y="869" width="38.0209%" height="15" fill="rgb(233,36,39)" fg:x="213" fg:w="4726"/><text x="1.8336%" y="879.50">&lt;async_compression::tokio::bufread::generic::decoder::Decoder&lt;R,D&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read</text></g><g><title>tokio::io::read_buf::ReadBuf::initialize_unfilled (29 samples, 0.23%)</title><rect x="39.5012%" y="853" width="0.2333%" height="15" fill="rgb(226,3,54)" fg:x="4910" fg:w="29"/><text x="39.6212%" y="863.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::initialize_unfilled_to (29 samples, 0.23%)</title><rect x="39.5012%" y="837" width="0.2333%" height="15" fill="rgb(245,192,40)" fg:x="4910" fg:w="29"/><text x="39.6212%" y="847.50"></text></g><g><title>tokio::io::read_buf::slice_to_uninit_mut (29 samples, 0.23%)</title><rect x="39.5012%" y="821" width="0.2333%" height="15" fill="rgb(238,167,29)" fg:x="4910" fg:w="29"/><text x="39.6212%" y="831.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::filled (600 samples, 4.83%)</title><rect x="39.7345%" y="917" width="4.8270%" height="15" fill="rgb(232,182,51)" fg:x="4939" fg:w="600"/><text x="39.8545%" y="927.50">tokio::io::read..</text></g><g><title>tokio::io::read_buf::slice_assume_init (36 samples, 0.29%)</title><rect x="44.2719%" y="901" width="0.2896%" height="15" fill="rgb(231,60,39)" fg:x="5503" fg:w="36"/><text x="44.3919%" y="911.50"></text></g><g><title>&lt;tokio::io::util::read_int::ReadU8&lt;R&gt; as core::future::future::Future&gt;::poll (5,505 samples, 44.29%)</title><rect x="0.3701%" y="933" width="44.2880%" height="15" fill="rgb(208,69,12)" fg:x="46" fg:w="5505"/><text x="0.4901%" y="943.50">&lt;tokio::io::util::read_int::ReadU8&lt;R&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::io::read_buf::ReadBuf::new (12 samples, 0.10%)</title><rect x="44.5615%" y="917" width="0.0965%" height="15" fill="rgb(235,93,37)" fg:x="5539" fg:w="12"/><text x="44.6815%" y="927.50"></text></g><g><title>tokio::io::read_buf::slice_to_uninit_mut (12 samples, 0.10%)</title><rect x="44.5615%" y="901" width="0.0965%" height="15" fill="rgb(213,116,39)" fg:x="5539" fg:w="12"/><text x="44.6815%" y="911.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.03%)</title><rect x="47.8198%" y="869" width="0.0322%" height="15" fill="rgb(222,207,29)" fg:x="5944" fg:w="4"/><text x="47.9398%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.02%)</title><rect x="47.8278%" y="853" width="0.0241%" height="15" fill="rgb(206,96,30)" fg:x="5945" fg:w="3"/><text x="47.9478%" y="863.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.02%)</title><rect x="47.8278%" y="837" width="0.0241%" height="15" fill="rgb(218,138,4)" fg:x="5945" fg:w="3"/><text x="47.9478%" y="847.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.02%)</title><rect x="47.8278%" y="821" width="0.0241%" height="15" fill="rgb(250,191,14)" fg:x="5945" fg:w="3"/><text x="47.9478%" y="831.50"></text></g><g><title>__rdl_realloc (2 samples, 0.02%)</title><rect x="47.8359%" y="805" width="0.0161%" height="15" fill="rgb(239,60,40)" fg:x="5946" fg:w="2"/><text x="47.9559%" y="815.50"></text></g><g><title>dads_gzip_thing::gzip::JsonLinesReadStream::next_line::{{closure}} (5,946 samples, 47.84%)</title><rect x="0.0483%" y="949" width="47.8359%" height="15" fill="rgb(206,27,48)" fg:x="6" fg:w="5946"/><text x="0.1683%" y="959.50">dads_gzip_thing::gzip::JsonLinesReadStream::next_line::{{closure}}</text></g><g><title>alloc::string::String::push (401 samples, 3.23%)</title><rect x="44.6581%" y="933" width="3.2261%" height="15" fill="rgb(225,35,8)" fg:x="5551" fg:w="401"/><text x="44.7781%" y="943.50">alloc::st..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (401 samples, 3.23%)</title><rect x="44.6581%" y="917" width="3.2261%" height="15" fill="rgb(250,213,24)" fg:x="5551" fg:w="401"/><text x="44.7781%" y="927.50">alloc::ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.06%)</title><rect x="47.8198%" y="901" width="0.0644%" height="15" fill="rgb(247,123,22)" fg:x="5944" fg:w="8"/><text x="47.9398%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (8 samples, 0.06%)</title><rect x="47.8198%" y="885" width="0.0644%" height="15" fill="rgb(231,138,38)" fg:x="5944" fg:w="8"/><text x="47.9398%" y="895.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (4 samples, 0.03%)</title><rect x="47.8520%" y="869" width="0.0322%" height="15" fill="rgb(231,145,46)" fg:x="5948" fg:w="4"/><text x="47.9720%" y="879.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (4 samples, 0.03%)</title><rect x="47.8520%" y="853" width="0.0322%" height="15" fill="rgb(251,118,11)" fg:x="5948" fg:w="4"/><text x="47.9720%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt; (7 samples, 0.06%)</title><rect x="47.8922%" y="869" width="0.0563%" height="15" fill="rgb(217,147,25)" fg:x="5953" fg:w="7"/><text x="48.0122%" y="879.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.06%)</title><rect x="47.8922%" y="853" width="0.0563%" height="15" fill="rgb(247,81,37)" fg:x="5953" fg:w="7"/><text x="48.0122%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (7 samples, 0.06%)</title><rect x="47.8922%" y="837" width="0.0563%" height="15" fill="rgb(209,12,38)" fg:x="5953" fg:w="7"/><text x="48.0122%" y="847.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (7 samples, 0.06%)</title><rect x="47.8922%" y="821" width="0.0563%" height="15" fill="rgb(227,1,9)" fg:x="5953" fg:w="7"/><text x="48.0122%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (7 samples, 0.06%)</title><rect x="47.8922%" y="805" width="0.0563%" height="15" fill="rgb(248,47,43)" fg:x="5953" fg:w="7"/><text x="48.0122%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_swap (7 samples, 0.06%)</title><rect x="47.8922%" y="789" width="0.0563%" height="15" fill="rgb(221,10,30)" fg:x="5953" fg:w="7"/><text x="48.0122%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,957 samples, 47.92%)</title><rect x="0.0322%" y="965" width="47.9244%" height="15" fill="rgb(210,229,1)" fg:x="4" fg:w="5957"/><text x="0.1522%" y="975.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::lock::{{closure}} (9 samples, 0.07%)</title><rect x="47.8842%" y="949" width="0.0724%" height="15" fill="rgb(222,148,37)" fg:x="5952" fg:w="9"/><text x="48.0042%" y="959.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.07%)</title><rect x="47.8842%" y="933" width="0.0724%" height="15" fill="rgb(234,67,33)" fg:x="5952" fg:w="9"/><text x="48.0042%" y="943.50"></text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::acquire::{{closure}} (9 samples, 0.07%)</title><rect x="47.8842%" y="917" width="0.0724%" height="15" fill="rgb(247,98,35)" fg:x="5952" fg:w="9"/><text x="48.0042%" y="927.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (8 samples, 0.06%)</title><rect x="47.8922%" y="901" width="0.0644%" height="15" fill="rgb(247,138,52)" fg:x="5953" fg:w="8"/><text x="48.0122%" y="911.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire (8 samples, 0.06%)</title><rect x="47.8922%" y="885" width="0.0644%" height="15" fill="rgb(213,79,30)" fg:x="5953" fg:w="8"/><text x="48.0122%" y="895.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked (4 samples, 0.03%)</title><rect x="47.9646%" y="773" width="0.0322%" height="15" fill="rgb(246,177,23)" fg:x="5962" fg:w="4"/><text x="48.0846%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (4 samples, 0.03%)</title><rect x="47.9646%" y="757" width="0.0322%" height="15" fill="rgb(230,62,27)" fg:x="5962" fg:w="4"/><text x="48.0846%" y="767.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (4 samples, 0.03%)</title><rect x="47.9646%" y="741" width="0.0322%" height="15" fill="rgb(216,154,8)" fg:x="5962" fg:w="4"/><text x="48.0846%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (4 samples, 0.03%)</title><rect x="47.9646%" y="725" width="0.0322%" height="15" fill="rgb(244,35,45)" fg:x="5962" fg:w="4"/><text x="48.0846%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_add (4 samples, 0.03%)</title><rect x="47.9646%" y="709" width="0.0322%" height="15" fill="rgb(251,115,12)" fg:x="5962" fg:w="4"/><text x="48.0846%" y="719.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (7 samples, 0.06%)</title><rect x="47.9646%" y="805" width="0.0563%" height="15" fill="rgb(240,54,50)" fg:x="5962" fg:w="7"/><text x="48.0846%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::{{closure}} (7 samples, 0.06%)</title><rect x="47.9646%" y="789" width="0.0563%" height="15" fill="rgb(233,84,52)" fg:x="5962" fg:w="7"/><text x="48.0846%" y="799.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::push (3 samples, 0.02%)</title><rect x="47.9968%" y="773" width="0.0241%" height="15" fill="rgb(207,117,47)" fg:x="5966" fg:w="3"/><text x="48.1168%" y="783.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (3 samples, 0.02%)</title><rect x="47.9968%" y="757" width="0.0241%" height="15" fill="rgb(249,43,39)" fg:x="5966" fg:w="3"/><text x="48.1168%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (3 samples, 0.02%)</title><rect x="47.9968%" y="741" width="0.0241%" height="15" fill="rgb(209,38,44)" fg:x="5966" fg:w="3"/><text x="48.1168%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (3 samples, 0.02%)</title><rect x="47.9968%" y="725" width="0.0241%" height="15" fill="rgb(236,212,23)" fg:x="5966" fg:w="3"/><text x="48.1168%" y="735.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (3 samples, 0.02%)</title><rect x="47.9968%" y="709" width="0.0241%" height="15" fill="rgb(242,79,21)" fg:x="5966" fg:w="3"/><text x="48.1168%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (3 samples, 0.02%)</title><rect x="47.9968%" y="693" width="0.0241%" height="15" fill="rgb(211,96,35)" fg:x="5966" fg:w="3"/><text x="48.1168%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.02%)</title><rect x="47.9968%" y="677" width="0.0241%" height="15" fill="rgb(253,215,40)" fg:x="5966" fg:w="3"/><text x="48.1168%" y="687.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (10 samples, 0.08%)</title><rect x="47.9566%" y="853" width="0.0805%" height="15" fill="rgb(211,81,21)" fg:x="5961" fg:w="10"/><text x="48.0766%" y="863.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (10 samples, 0.08%)</title><rect x="47.9566%" y="837" width="0.0805%" height="15" fill="rgb(208,190,38)" fg:x="5961" fg:w="10"/><text x="48.0766%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (9 samples, 0.07%)</title><rect x="47.9646%" y="821" width="0.0724%" height="15" fill="rgb(235,213,38)" fg:x="5962" fg:w="9"/><text x="48.0846%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (2 samples, 0.02%)</title><rect x="48.0209%" y="805" width="0.0161%" height="15" fill="rgb(237,122,38)" fg:x="5969" fg:w="2"/><text x="48.1409%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (2 samples, 0.02%)</title><rect x="48.0209%" y="789" width="0.0161%" height="15" fill="rgb(244,218,35)" fg:x="5969" fg:w="2"/><text x="48.1409%" y="799.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (11 samples, 0.09%)</title><rect x="47.9566%" y="933" width="0.0885%" height="15" fill="rgb(240,68,47)" fg:x="5961" fg:w="11"/><text x="48.0766%" y="943.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (11 samples, 0.09%)</title><rect x="47.9566%" y="917" width="0.0885%" height="15" fill="rgb(210,16,53)" fg:x="5961" fg:w="11"/><text x="48.0766%" y="927.50"></text></g><g><title>core::task::wake::Waker::wake (11 samples, 0.09%)</title><rect x="47.9566%" y="901" width="0.0885%" height="15" fill="rgb(235,124,12)" fg:x="5961" fg:w="11"/><text x="48.0766%" y="911.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (11 samples, 0.09%)</title><rect x="47.9566%" y="885" width="0.0885%" height="15" fill="rgb(224,169,11)" fg:x="5961" fg:w="11"/><text x="48.0766%" y="895.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (11 samples, 0.09%)</title><rect x="47.9566%" y="869" width="0.0885%" height="15" fill="rgb(250,166,2)" fg:x="5961" fg:w="11"/><text x="48.0766%" y="879.50"></text></g><g><title>tokio::runtime::coop::budget (5,974 samples, 48.06%)</title><rect x="0.0000%" y="1045" width="48.0611%" height="15" fill="rgb(242,216,29)" fg:x="0" fg:w="5974"/><text x="0.1200%" y="1055.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (5,973 samples, 48.05%)</title><rect x="0.0080%" y="1029" width="48.0531%" height="15" fill="rgb(230,116,27)" fg:x="1" fg:w="5973"/><text x="0.1280%" y="1039.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (5,970 samples, 48.03%)</title><rect x="0.0322%" y="1013" width="48.0290%" height="15" fill="rgb(228,99,48)" fg:x="4" fg:w="5970"/><text x="0.1522%" y="1023.50">tokio::runtime::park::CachedParkThread::block_on::{{closure}}</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,970 samples, 48.03%)</title><rect x="0.0322%" y="997" width="48.0290%" height="15" fill="rgb(253,11,6)" fg:x="4" fg:w="5970"/><text x="0.1522%" y="1007.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>dads_gzip_thing::main::{{closure}} (5,970 samples, 48.03%)</title><rect x="0.0322%" y="981" width="48.0290%" height="15" fill="rgb(247,143,39)" fg:x="4" fg:w="5970"/><text x="0.1522%" y="991.50">dads_gzip_thing::main::{{closure}}</text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mutex::MutexGuard&lt;alloc::collections::vec_deque::VecDeque&lt;alloc::string::String&gt;&gt;&gt; (13 samples, 0.10%)</title><rect x="47.9566%" y="965" width="0.1046%" height="15" fill="rgb(236,97,10)" fg:x="5961" fg:w="13"/><text x="48.0766%" y="975.50"></text></g><g><title>&lt;tokio::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.10%)</title><rect x="47.9566%" y="949" width="0.1046%" height="15" fill="rgb(233,208,19)" fg:x="5961" fg:w="13"/><text x="48.0766%" y="959.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (2 samples, 0.02%)</title><rect x="48.0451%" y="933" width="0.0161%" height="15" fill="rgb(216,164,2)" fg:x="5972" fg:w="2"/><text x="48.1651%" y="943.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (2 samples, 0.02%)</title><rect x="48.0451%" y="917" width="0.0161%" height="15" fill="rgb(220,129,5)" fg:x="5972" fg:w="2"/><text x="48.1651%" y="927.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (2 samples, 0.02%)</title><rect x="48.0451%" y="901" width="0.0161%" height="15" fill="rgb(242,17,10)" fg:x="5972" fg:w="2"/><text x="48.1651%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (2 samples, 0.02%)</title><rect x="48.0451%" y="885" width="0.0161%" height="15" fill="rgb(242,107,0)" fg:x="5972" fg:w="2"/><text x="48.1651%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (2 samples, 0.02%)</title><rect x="48.0451%" y="869" width="0.0161%" height="15" fill="rgb(251,28,31)" fg:x="5972" fg:w="2"/><text x="48.1651%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (2 samples, 0.02%)</title><rect x="48.0451%" y="853" width="0.0161%" height="15" fill="rgb(233,223,10)" fg:x="5972" fg:w="2"/><text x="48.1651%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.02%)</title><rect x="48.0451%" y="837" width="0.0161%" height="15" fill="rgb(215,21,27)" fg:x="5972" fg:w="2"/><text x="48.1651%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (2 samples, 0.02%)</title><rect x="48.0611%" y="1029" width="0.0161%" height="15" fill="rgb(232,23,21)" fg:x="5974" fg:w="2"/><text x="48.1811%" y="1039.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.02%)</title><rect x="48.0611%" y="1013" width="0.0161%" height="15" fill="rgb(244,5,23)" fg:x="5974" fg:w="2"/><text x="48.1811%" y="1023.50"></text></g><g><title>dads_gzip_thing (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1397" width="48.0933%" height="15" fill="rgb(226,81,46)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1407.50">dads_gzip_thing</text></g><g><title>_start (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1381" width="48.0933%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1391.50">_start</text></g><g><title>__libc_start_main_impl (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1365" width="48.0933%" height="15" fill="rgb(212,68,19)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1375.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1349" width="48.0933%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1359.50">__libc_start_call_main</text></g><g><title>main (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1333" width="48.0933%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1343.50">main</text></g><g><title>std::rt::lang_start_internal (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1317" width="48.0933%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1327.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1301" width="48.0933%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1311.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1285" width="48.0933%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1295.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1269" width="48.0933%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1279.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1253" width="48.0933%" height="15" fill="rgb(245,159,27)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1263.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1237" width="48.0933%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1247.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1221" width="48.0933%" height="15" fill="rgb(236,23,11)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1231.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1205" width="48.0933%" height="15" fill="rgb(205,117,38)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1215.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1189" width="48.0933%" height="15" fill="rgb(237,72,25)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1199.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1173" width="48.0933%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1183.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1157" width="48.0933%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1167.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1141" width="48.0933%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1151.50">core::ops::function::FnOnce::call_once</text></g><g><title>dads_gzip_thing::main (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1125" width="48.0933%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1135.50">dads_gzip_thing::main</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1109" width="48.0933%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1119.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1093" width="48.0933%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1103.50">tokio::runtime::scheduler::multi_thread::MultiThread::block_on</text></g><g><title>tokio::runtime::context::BlockingRegionGuard::block_on (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1077" width="48.0933%" height="15" fill="rgb(211,50,8)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1087.50">tokio::runtime::context::BlockingRegionGuard::block_on</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (5,978 samples, 48.09%)</title><rect x="0.0000%" y="1061" width="48.0933%" height="15" fill="rgb(245,182,24)" fg:x="0" fg:w="5978"/><text x="0.1200%" y="1071.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (4 samples, 0.03%)</title><rect x="48.0611%" y="1045" width="0.0322%" height="15" fill="rgb(242,14,37)" fg:x="5974" fg:w="4"/><text x="48.1811%" y="1055.50"></text></g><g><title>std::sync::condvar::Condvar::wait (2 samples, 0.02%)</title><rect x="48.0772%" y="1029" width="0.0161%" height="15" fill="rgb(246,228,12)" fg:x="5976" fg:w="2"/><text x="48.1972%" y="1039.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (2 samples, 0.02%)</title><rect x="48.0772%" y="1013" width="0.0161%" height="15" fill="rgb(213,55,15)" fg:x="5976" fg:w="2"/><text x="48.1972%" y="1023.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (2 samples, 0.02%)</title><rect x="48.0772%" y="997" width="0.0161%" height="15" fill="rgb(209,9,3)" fg:x="5976" fg:w="2"/><text x="48.1972%" y="1007.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (2 samples, 0.02%)</title><rect x="48.0772%" y="981" width="0.0161%" height="15" fill="rgb(230,59,30)" fg:x="5976" fg:w="2"/><text x="48.1972%" y="991.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (2 samples, 0.02%)</title><rect x="48.0772%" y="965" width="0.0161%" height="15" fill="rgb(209,121,21)" fg:x="5976" fg:w="2"/><text x="48.1972%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (2 samples, 0.02%)</title><rect x="48.0772%" y="949" width="0.0161%" height="15" fill="rgb(220,109,13)" fg:x="5976" fg:w="2"/><text x="48.1972%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.02%)</title><rect x="48.0772%" y="933" width="0.0161%" height="15" fill="rgb(232,18,1)" fg:x="5976" fg:w="2"/><text x="48.1972%" y="943.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::new (3 samples, 0.02%)</title><rect x="48.1657%" y="1125" width="0.0241%" height="15" fill="rgb(215,41,42)" fg:x="5987" fg:w="3"/><text x="48.2857%" y="1135.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::create (3 samples, 0.02%)</title><rect x="48.1657%" y="1109" width="0.0241%" height="15" fill="rgb(224,123,36)" fg:x="5987" fg:w="3"/><text x="48.2857%" y="1119.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::local (3 samples, 0.02%)</title><rect x="48.1657%" y="1093" width="0.0241%" height="15" fill="rgb(240,125,3)" fg:x="5987" fg:w="3"/><text x="48.2857%" y="1103.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.02%)</title><rect x="48.1738%" y="1077" width="0.0161%" height="15" fill="rgb(205,98,50)" fg:x="5988" fg:w="2"/><text x="48.2938%" y="1087.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.02%)</title><rect x="48.1738%" y="1061" width="0.0161%" height="15" fill="rgb(205,185,37)" fg:x="5988" fg:w="2"/><text x="48.2938%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::runtime::blocking::pool::Shared&gt;&gt; (4 samples, 0.03%)</title><rect x="48.1979%" y="1029" width="0.0322%" height="15" fill="rgb(238,207,15)" fg:x="5991" fg:w="4"/><text x="48.3179%" y="1039.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="48.1979%" y="1013" width="0.0322%" height="15" fill="rgb(213,199,42)" fg:x="5991" fg:w="4"/><text x="48.3179%" y="1023.50"></text></g><g><title>std::sync::poison::Flag::done (4 samples, 0.03%)</title><rect x="48.1979%" y="997" width="0.0322%" height="15" fill="rgb(235,201,11)" fg:x="5991" fg:w="4"/><text x="48.3179%" y="1007.50"></text></g><g><title>std::thread::panicking (4 samples, 0.03%)</title><rect x="48.1979%" y="981" width="0.0322%" height="15" fill="rgb(207,46,11)" fg:x="5991" fg:w="4"/><text x="48.3179%" y="991.50"></text></g><g><title>std::panicking::panicking (4 samples, 0.03%)</title><rect x="48.1979%" y="965" width="0.0322%" height="15" fill="rgb(241,35,35)" fg:x="5991" fg:w="4"/><text x="48.3179%" y="975.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (4 samples, 0.03%)</title><rect x="48.1979%" y="949" width="0.0322%" height="15" fill="rgb(243,32,47)" fg:x="5991" fg:w="4"/><text x="48.3179%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (4 samples, 0.03%)</title><rect x="48.1979%" y="933" width="0.0322%" height="15" fill="rgb(247,202,23)" fg:x="5991" fg:w="4"/><text x="48.3179%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.03%)</title><rect x="48.1979%" y="917" width="0.0322%" height="15" fill="rgb(219,102,11)" fg:x="5991" fg:w="4"/><text x="48.3179%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (2 samples, 0.02%)</title><rect x="48.2301%" y="1029" width="0.0161%" height="15" fill="rgb(243,110,44)" fg:x="5995" fg:w="2"/><text x="48.3501%" y="1039.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.02%)</title><rect x="48.2301%" y="1013" width="0.0161%" height="15" fill="rgb(222,74,54)" fg:x="5995" fg:w="2"/><text x="48.3501%" y="1023.50"></text></g><g><title>tokio::runtime::builder::Builder::build (11 samples, 0.09%)</title><rect x="48.1657%" y="1157" width="0.0885%" height="15" fill="rgb(216,99,12)" fg:x="5987" fg:w="11"/><text x="48.2857%" y="1167.50"></text></g><g><title>tokio::runtime::builder::Builder::build_threaded_runtime (11 samples, 0.09%)</title><rect x="48.1657%" y="1141" width="0.0885%" height="15" fill="rgb(226,22,26)" fg:x="5987" fg:w="11"/><text x="48.2857%" y="1151.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (8 samples, 0.06%)</title><rect x="48.1899%" y="1125" width="0.0644%" height="15" fill="rgb(217,163,10)" fg:x="5990" fg:w="8"/><text x="48.3099%" y="1135.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (8 samples, 0.06%)</title><rect x="48.1899%" y="1109" width="0.0644%" height="15" fill="rgb(213,25,53)" fg:x="5990" fg:w="8"/><text x="48.3099%" y="1119.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn_blocking (8 samples, 0.06%)</title><rect x="48.1899%" y="1093" width="0.0644%" height="15" fill="rgb(252,105,26)" fg:x="5990" fg:w="8"/><text x="48.3099%" y="1103.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (8 samples, 0.06%)</title><rect x="48.1899%" y="1077" width="0.0644%" height="15" fill="rgb(220,39,43)" fg:x="5990" fg:w="8"/><text x="48.3099%" y="1087.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (8 samples, 0.06%)</title><rect x="48.1899%" y="1061" width="0.0644%" height="15" fill="rgb(229,68,48)" fg:x="5990" fg:w="8"/><text x="48.3099%" y="1071.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (8 samples, 0.06%)</title><rect x="48.1899%" y="1045" width="0.0644%" height="15" fill="rgb(252,8,32)" fg:x="5990" fg:w="8"/><text x="48.3099%" y="1055.50"></text></g><g><title>flate2::gz::read::GzEncoder&lt;R&gt;::new (3 samples, 0.02%)</title><rect x="48.2542%" y="1013" width="0.0241%" height="15" fill="rgb(223,20,43)" fg:x="5998" fg:w="3"/><text x="48.3742%" y="1023.50"></text></g><g><title>flate2::gz::GzBuilder::read (3 samples, 0.02%)</title><rect x="48.2542%" y="997" width="0.0241%" height="15" fill="rgb(229,81,49)" fg:x="5998" fg:w="3"/><text x="48.3742%" y="1007.50"></text></g><g><title>flate2::gz::GzBuilder::buf_read (3 samples, 0.02%)</title><rect x="48.2542%" y="981" width="0.0241%" height="15" fill="rgb(236,28,36)" fg:x="5998" fg:w="3"/><text x="48.3742%" y="991.50"></text></g><g><title>flate2::gz::bufread::gz_encoder (3 samples, 0.02%)</title><rect x="48.2542%" y="965" width="0.0241%" height="15" fill="rgb(249,185,26)" fg:x="5998" fg:w="3"/><text x="48.3742%" y="975.50"></text></g><g><title>flate2::deflate::bufread::DeflateEncoder&lt;R&gt;::new (3 samples, 0.02%)</title><rect x="48.2542%" y="949" width="0.0241%" height="15" fill="rgb(249,174,33)" fg:x="5998" fg:w="3"/><text x="48.3742%" y="959.50"></text></g><g><title>flate2::mem::Compress::new (3 samples, 0.02%)</title><rect x="48.2542%" y="933" width="0.0241%" height="15" fill="rgb(233,201,37)" fg:x="5998" fg:w="3"/><text x="48.3742%" y="943.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::make (3 samples, 0.02%)</title><rect x="48.2542%" y="917" width="0.0241%" height="15" fill="rgb(221,78,26)" fg:x="5998" fg:w="3"/><text x="48.3742%" y="927.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (3 samples, 0.02%)</title><rect x="48.2542%" y="901" width="0.0241%" height="15" fill="rgb(250,127,30)" fg:x="5998" fg:w="3"/><text x="48.3742%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.02%)</title><rect x="48.2542%" y="885" width="0.0241%" height="15" fill="rgb(230,49,44)" fg:x="5998" fg:w="3"/><text x="48.3742%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="48.2542%" y="869" width="0.0241%" height="15" fill="rgb(229,67,23)" fg:x="5998" fg:w="3"/><text x="48.3742%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="48.2542%" y="853" width="0.0241%" height="15" fill="rgb(249,83,47)" fg:x="5998" fg:w="3"/><text x="48.3742%" y="863.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.02%)</title><rect x="48.2542%" y="837" width="0.0241%" height="15" fill="rgb(215,43,3)" fg:x="5998" fg:w="3"/><text x="48.3742%" y="847.50"></text></g><g><title>__rust_probestack (3 samples, 0.02%)</title><rect x="48.2542%" y="821" width="0.0241%" height="15" fill="rgb(238,154,13)" fg:x="5998" fg:w="3"/><text x="48.3742%" y="831.50"></text></g><g><title>&lt;dads_gzip_thing::enc::GzEncoderAsync as core::ops::drop::Drop&gt;::drop::{{closure}}::{{closure}} (19 samples, 0.15%)</title><rect x="48.1577%" y="1173" width="0.1529%" height="15" fill="rgb(219,56,2)" fg:x="5986" fg:w="19"/><text x="48.2777%" y="1183.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (7 samples, 0.06%)</title><rect x="48.2542%" y="1157" width="0.0563%" height="15" fill="rgb(233,0,4)" fg:x="5998" fg:w="7"/><text x="48.3742%" y="1167.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (7 samples, 0.06%)</title><rect x="48.2542%" y="1141" width="0.0563%" height="15" fill="rgb(235,30,7)" fg:x="5998" fg:w="7"/><text x="48.3742%" y="1151.50"></text></g><g><title>tokio::runtime::context::BlockingRegionGuard::block_on (7 samples, 0.06%)</title><rect x="48.2542%" y="1125" width="0.0563%" height="15" fill="rgb(250,79,13)" fg:x="5998" fg:w="7"/><text x="48.3742%" y="1135.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (7 samples, 0.06%)</title><rect x="48.2542%" y="1109" width="0.0563%" height="15" fill="rgb(211,146,34)" fg:x="5998" fg:w="7"/><text x="48.3742%" y="1119.50"></text></g><g><title>tokio::runtime::coop::budget (7 samples, 0.06%)</title><rect x="48.2542%" y="1093" width="0.0563%" height="15" fill="rgb(228,22,38)" fg:x="5998" fg:w="7"/><text x="48.3742%" y="1103.50"></text></g><g><title>tokio::runtime::coop::with_budget (7 samples, 0.06%)</title><rect x="48.2542%" y="1077" width="0.0563%" height="15" fill="rgb(235,168,5)" fg:x="5998" fg:w="7"/><text x="48.3742%" y="1087.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (7 samples, 0.06%)</title><rect x="48.2542%" y="1061" width="0.0563%" height="15" fill="rgb(221,155,16)" fg:x="5998" fg:w="7"/><text x="48.3742%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7 samples, 0.06%)</title><rect x="48.2542%" y="1045" width="0.0563%" height="15" fill="rgb(215,215,53)" fg:x="5998" fg:w="7"/><text x="48.3742%" y="1055.50"></text></g><g><title>dads_gzip_thing::enc::GzEncoderAsync::flush::{{closure}} (7 samples, 0.06%)</title><rect x="48.2542%" y="1029" width="0.0563%" height="15" fill="rgb(223,4,10)" fg:x="5998" fg:w="7"/><text x="48.3742%" y="1039.50"></text></g><g><title>std::io::Read::read_to_end (4 samples, 0.03%)</title><rect x="48.2784%" y="1013" width="0.0322%" height="15" fill="rgb(234,103,6)" fg:x="6001" fg:w="4"/><text x="48.3984%" y="1023.50"></text></g><g><title>std::io::default_read_to_end (4 samples, 0.03%)</title><rect x="48.2784%" y="997" width="0.0322%" height="15" fill="rgb(227,97,0)" fg:x="6001" fg:w="4"/><text x="48.3984%" y="1007.50"></text></g><g><title>std::io::Read::read_buf (4 samples, 0.03%)</title><rect x="48.2784%" y="981" width="0.0322%" height="15" fill="rgb(234,150,53)" fg:x="6001" fg:w="4"/><text x="48.3984%" y="991.50"></text></g><g><title>std::io::default_read_buf (4 samples, 0.03%)</title><rect x="48.2784%" y="965" width="0.0322%" height="15" fill="rgb(228,201,54)" fg:x="6001" fg:w="4"/><text x="48.3984%" y="975.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (4 samples, 0.03%)</title><rect x="48.2784%" y="949" width="0.0322%" height="15" fill="rgb(222,22,37)" fg:x="6001" fg:w="4"/><text x="48.3984%" y="959.50"></text></g><g><title>&lt;flate2::gz::read::GzEncoder&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.03%)</title><rect x="48.2784%" y="933" width="0.0322%" height="15" fill="rgb(237,53,32)" fg:x="6001" fg:w="4"/><text x="48.3984%" y="943.50"></text></g><g><title>&lt;flate2::gz::bufread::GzEncoder&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.03%)</title><rect x="48.2784%" y="917" width="0.0322%" height="15" fill="rgb(233,25,53)" fg:x="6001" fg:w="4"/><text x="48.3984%" y="927.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateEncoder&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.03%)</title><rect x="48.2784%" y="901" width="0.0322%" height="15" fill="rgb(210,40,34)" fg:x="6001" fg:w="4"/><text x="48.3984%" y="911.50"></text></g><g><title>flate2::zio::read (4 samples, 0.03%)</title><rect x="48.2784%" y="885" width="0.0322%" height="15" fill="rgb(241,220,44)" fg:x="6001" fg:w="4"/><text x="48.3984%" y="895.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run (4 samples, 0.03%)</title><rect x="48.2784%" y="869" width="0.0322%" height="15" fill="rgb(235,28,35)" fg:x="6001" fg:w="4"/><text x="48.3984%" y="879.50"></text></g><g><title>flate2::mem::Compress::compress (4 samples, 0.03%)</title><rect x="48.2784%" y="853" width="0.0322%" height="15" fill="rgb(210,56,17)" fg:x="6001" fg:w="4"/><text x="48.3984%" y="863.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::compress (4 samples, 0.03%)</title><rect x="48.2784%" y="837" width="0.0322%" height="15" fill="rgb(224,130,29)" fg:x="6001" fg:w="4"/><text x="48.3984%" y="847.50"></text></g><g><title>miniz_oxide::deflate::stream::deflate (4 samples, 0.03%)</title><rect x="48.2784%" y="821" width="0.0322%" height="15" fill="rgb(235,212,8)" fg:x="6001" fg:w="4"/><text x="48.3984%" y="831.50"></text></g><g><title>miniz_oxide::deflate::core::compress (4 samples, 0.03%)</title><rect x="48.2784%" y="805" width="0.0322%" height="15" fill="rgb(223,33,50)" fg:x="6001" fg:w="4"/><text x="48.3984%" y="815.50"></text></g><g><title>miniz_oxide::deflate::core::compress_inner (4 samples, 0.03%)</title><rect x="48.2784%" y="789" width="0.0322%" height="15" fill="rgb(219,149,13)" fg:x="6001" fg:w="4"/><text x="48.3984%" y="799.50"></text></g><g><title>miniz_oxide::deflate::core::flush_block (4 samples, 0.03%)</title><rect x="48.2784%" y="773" width="0.0322%" height="15" fill="rgb(250,156,29)" fg:x="6001" fg:w="4"/><text x="48.3984%" y="783.50"></text></g><g><title>miniz_oxide::deflate::core::compress_block (4 samples, 0.03%)</title><rect x="48.2784%" y="757" width="0.0322%" height="15" fill="rgb(216,193,19)" fg:x="6001" fg:w="4"/><text x="48.3984%" y="767.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::start_static_block (4 samples, 0.03%)</title><rect x="48.2784%" y="741" width="0.0322%" height="15" fill="rgb(216,135,14)" fg:x="6001" fg:w="4"/><text x="48.3984%" y="751.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::optimize_table (4 samples, 0.03%)</title><rect x="48.2784%" y="725" width="0.0322%" height="15" fill="rgb(241,47,5)" fg:x="6001" fg:w="4"/><text x="48.3984%" y="735.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next (3 samples, 0.02%)</title><rect x="48.2864%" y="709" width="0.0241%" height="15" fill="rgb(233,42,35)" fg:x="6002" fg:w="3"/><text x="48.4064%" y="719.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_next (3 samples, 0.02%)</title><rect x="48.2864%" y="693" width="0.0241%" height="15" fill="rgb(231,13,6)" fg:x="6002" fg:w="3"/><text x="48.4064%" y="703.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (3 samples, 0.02%)</title><rect x="48.2864%" y="677" width="0.0241%" height="15" fill="rgb(207,181,40)" fg:x="6002" fg:w="3"/><text x="48.4064%" y="687.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="48.3105%" y="1157" width="0.0161%" height="15" fill="rgb(254,173,49)" fg:x="6005" fg:w="2"/><text x="48.4305%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::blocking::shutdown::Sender&gt; (2 samples, 0.02%)</title><rect x="48.3105%" y="1141" width="0.0161%" height="15" fill="rgb(221,1,38)" fg:x="6005" fg:w="2"/><text x="48.4305%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Sender&lt;()&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="48.3105%" y="1125" width="0.0161%" height="15" fill="rgb(206,124,46)" fg:x="6005" fg:w="2"/><text x="48.4305%" y="1135.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="48.3105%" y="1109" width="0.0161%" height="15" fill="rgb(249,21,11)" fg:x="6005" fg:w="2"/><text x="48.4305%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="48.3105%" y="1093" width="0.0161%" height="15" fill="rgb(222,201,40)" fg:x="6005" fg:w="2"/><text x="48.4305%" y="1103.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="48.3105%" y="1077" width="0.0161%" height="15" fill="rgb(235,61,29)" fg:x="6005" fg:w="2"/><text x="48.4305%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::handle::EnterGuard&gt; (2 samples, 0.02%)</title><rect x="48.3266%" y="1157" width="0.0161%" height="15" fill="rgb(219,207,3)" fg:x="6007" fg:w="2"/><text x="48.4466%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::context::SetCurrentGuard&gt; (2 samples, 0.02%)</title><rect x="48.3266%" y="1141" width="0.0161%" height="15" fill="rgb(222,56,46)" fg:x="6007" fg:w="2"/><text x="48.4466%" y="1151.50"></text></g><g><title>&lt;tokio::runtime::context::SetCurrentGuard as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="48.3266%" y="1125" width="0.0161%" height="15" fill="rgb(239,76,54)" fg:x="6007" fg:w="2"/><text x="48.4466%" y="1135.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="48.3266%" y="1109" width="0.0161%" height="15" fill="rgb(231,124,27)" fg:x="6007" fg:w="2"/><text x="48.4466%" y="1119.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="48.3266%" y="1093" width="0.0161%" height="15" fill="rgb(249,195,6)" fg:x="6007" fg:w="2"/><text x="48.4466%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::handle::Handle&gt; (2 samples, 0.02%)</title><rect x="48.3427%" y="1157" width="0.0161%" height="15" fill="rgb(237,174,47)" fg:x="6009" fg:w="2"/><text x="48.4627%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::Handle&gt; (2 samples, 0.02%)</title><rect x="48.3427%" y="1141" width="0.0161%" height="15" fill="rgb(206,201,31)" fg:x="6009" fg:w="2"/><text x="48.4627%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt; (2 samples, 0.02%)</title><rect x="48.3427%" y="1125" width="0.0161%" height="15" fill="rgb(231,57,52)" fg:x="6009" fg:w="2"/><text x="48.4627%" y="1135.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="48.3427%" y="1109" width="0.0161%" height="15" fill="rgb(248,177,22)" fg:x="6009" fg:w="2"/><text x="48.4627%" y="1119.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.02%)</title><rect x="48.3427%" y="1093" width="0.0161%" height="15" fill="rgb(215,211,37)" fg:x="6009" fg:w="2"/><text x="48.4627%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt; (2 samples, 0.02%)</title><rect x="48.3427%" y="1077" width="0.0161%" height="15" fill="rgb(241,128,51)" fg:x="6009" fg:w="2"/><text x="48.4627%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::multi_thread::worker::Shared&gt; (2 samples, 0.02%)</title><rect x="48.3427%" y="1061" width="0.0161%" height="15" fill="rgb(227,165,31)" fg:x="6009" fg:w="2"/><text x="48.4627%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[tokio::runtime::scheduler::multi_thread::worker::Remote]&gt;&gt; (2 samples, 0.02%)</title><rect x="48.3427%" y="1045" width="0.0161%" height="15" fill="rgb(228,167,24)" fg:x="6009" fg:w="2"/><text x="48.4627%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tokio::runtime::scheduler::multi_thread::worker::Remote]&gt; (2 samples, 0.02%)</title><rect x="48.3427%" y="1029" width="0.0161%" height="15" fill="rgb(228,143,12)" fg:x="6009" fg:w="2"/><text x="48.4627%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::multi_thread::worker::Remote&gt; (2 samples, 0.02%)</title><rect x="48.3427%" y="1013" width="0.0161%" height="15" fill="rgb(249,149,8)" fg:x="6009" fg:w="2"/><text x="48.4627%" y="1023.50"></text></g><g><title>std::sync::poison::Flag::get (3 samples, 0.02%)</title><rect x="48.3588%" y="1125" width="0.0241%" height="15" fill="rgb(243,35,44)" fg:x="6011" fg:w="3"/><text x="48.4788%" y="1135.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (3 samples, 0.02%)</title><rect x="48.3588%" y="1109" width="0.0241%" height="15" fill="rgb(246,89,9)" fg:x="6011" fg:w="3"/><text x="48.4788%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.02%)</title><rect x="48.3588%" y="1093" width="0.0241%" height="15" fill="rgb(233,213,13)" fg:x="6011" fg:w="3"/><text x="48.4788%" y="1103.50"></text></g><g><title>std::sys::unix::futex::futex_wait (2 samples, 0.02%)</title><rect x="48.4071%" y="1045" width="0.0161%" height="15" fill="rgb(233,141,41)" fg:x="6017" fg:w="2"/><text x="48.5271%" y="1055.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (2 samples, 0.02%)</title><rect x="48.4071%" y="1029" width="0.0161%" height="15" fill="rgb(239,167,4)" fg:x="6017" fg:w="2"/><text x="48.5271%" y="1039.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="48.4071%" y="1013" width="0.0161%" height="15" fill="rgb(209,217,16)" fg:x="6017" fg:w="2"/><text x="48.5271%" y="1023.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (12 samples, 0.10%)</title><rect x="48.3588%" y="1141" width="0.0965%" height="15" fill="rgb(219,88,35)" fg:x="6011" fg:w="12"/><text x="48.4788%" y="1151.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (9 samples, 0.07%)</title><rect x="48.3829%" y="1125" width="0.0724%" height="15" fill="rgb(220,193,23)" fg:x="6014" fg:w="9"/><text x="48.5029%" y="1135.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_timeout (8 samples, 0.06%)</title><rect x="48.3910%" y="1109" width="0.0644%" height="15" fill="rgb(230,90,52)" fg:x="6015" fg:w="8"/><text x="48.5110%" y="1119.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (7 samples, 0.06%)</title><rect x="48.3990%" y="1093" width="0.0563%" height="15" fill="rgb(252,106,19)" fg:x="6016" fg:w="7"/><text x="48.5190%" y="1103.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (7 samples, 0.06%)</title><rect x="48.3990%" y="1077" width="0.0563%" height="15" fill="rgb(206,74,20)" fg:x="6016" fg:w="7"/><text x="48.5190%" y="1087.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (6 samples, 0.05%)</title><rect x="48.4071%" y="1061" width="0.0483%" height="15" fill="rgb(230,138,44)" fg:x="6017" fg:w="6"/><text x="48.5271%" y="1071.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (4 samples, 0.03%)</title><rect x="48.4232%" y="1045" width="0.0322%" height="15" fill="rgb(235,182,43)" fg:x="6019" fg:w="4"/><text x="48.5432%" y="1055.50"></text></g><g><title>core::hint::spin_loop (51 samples, 0.41%)</title><rect x="48.4714%" y="1045" width="0.4103%" height="15" fill="rgb(242,16,51)" fg:x="6025" fg:w="51"/><text x="48.5914%" y="1055.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (51 samples, 0.41%)</title><rect x="48.4714%" y="1029" width="0.4103%" height="15" fill="rgb(248,9,4)" fg:x="6025" fg:w="51"/><text x="48.5914%" y="1039.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (77 samples, 0.62%)</title><rect x="48.4553%" y="1141" width="0.6195%" height="15" fill="rgb(210,31,22)" fg:x="6023" fg:w="77"/><text x="48.5753%" y="1151.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (77 samples, 0.62%)</title><rect x="48.4553%" y="1125" width="0.6195%" height="15" fill="rgb(239,54,39)" fg:x="6023" fg:w="77"/><text x="48.5753%" y="1135.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (76 samples, 0.61%)</title><rect x="48.4634%" y="1109" width="0.6114%" height="15" fill="rgb(230,99,41)" fg:x="6024" fg:w="76"/><text x="48.5834%" y="1119.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (76 samples, 0.61%)</title><rect x="48.4634%" y="1093" width="0.6114%" height="15" fill="rgb(253,106,12)" fg:x="6024" fg:w="76"/><text x="48.5834%" y="1103.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (75 samples, 0.60%)</title><rect x="48.4714%" y="1077" width="0.6034%" height="15" fill="rgb(213,46,41)" fg:x="6025" fg:w="75"/><text x="48.5914%" y="1087.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (75 samples, 0.60%)</title><rect x="48.4714%" y="1061" width="0.6034%" height="15" fill="rgb(215,133,35)" fg:x="6025" fg:w="75"/><text x="48.5914%" y="1071.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (24 samples, 0.19%)</title><rect x="48.8817%" y="1045" width="0.1931%" height="15" fill="rgb(213,28,5)" fg:x="6076" fg:w="24"/><text x="49.0017%" y="1055.50"></text></g><g><title>core::sync::atomic::atomic_load (24 samples, 0.19%)</title><rect x="48.8817%" y="1029" width="0.1931%" height="15" fill="rgb(215,77,49)" fg:x="6076" fg:w="24"/><text x="49.0017%" y="1039.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write::{{closure}} (3 samples, 0.02%)</title><rect x="49.1070%" y="901" width="0.0241%" height="15" fill="rgb(248,100,22)" fg:x="6104" fg:w="3"/><text x="49.2270%" y="911.50"></text></g><g><title>tokio::io::blocking::Buf::write_to (3 samples, 0.02%)</title><rect x="49.1070%" y="885" width="0.0241%" height="15" fill="rgb(208,67,9)" fg:x="6104" fg:w="3"/><text x="49.2270%" y="895.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.02%)</title><rect x="49.1070%" y="869" width="0.0241%" height="15" fill="rgb(219,133,21)" fg:x="6104" fg:w="3"/><text x="49.2270%" y="879.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (2 samples, 0.02%)</title><rect x="49.1150%" y="853" width="0.0161%" height="15" fill="rgb(246,46,29)" fg:x="6105" fg:w="2"/><text x="49.2350%" y="863.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::shutdown_core (3 samples, 0.02%)</title><rect x="49.1392%" y="821" width="0.0241%" height="15" fill="rgb(246,185,52)" fg:x="6108" fg:w="3"/><text x="49.2592%" y="831.50"></text></g><g><title>tokio::loom::std::thread::yield_now (36 samples, 0.29%)</title><rect x="49.2679%" y="757" width="0.2896%" height="15" fill="rgb(252,136,11)" fg:x="6124" fg:w="36"/><text x="49.3879%" y="767.50"></text></g><g><title>core::hint::spin_loop (36 samples, 0.29%)</title><rect x="49.2679%" y="741" width="0.2896%" height="15" fill="rgb(219,138,53)" fg:x="6124" fg:w="36"/><text x="49.3879%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (36 samples, 0.29%)</title><rect x="49.2679%" y="725" width="0.2896%" height="15" fill="rgb(211,51,23)" fg:x="6124" fg:w="36"/><text x="49.3879%" y="735.50"></text></g><g><title>std::sync::poison::Flag::get (9 samples, 0.07%)</title><rect x="49.5575%" y="725" width="0.0724%" height="15" fill="rgb(247,221,28)" fg:x="6160" fg:w="9"/><text x="49.6775%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (9 samples, 0.07%)</title><rect x="49.5575%" y="709" width="0.0724%" height="15" fill="rgb(251,222,45)" fg:x="6160" fg:w="9"/><text x="49.6775%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (9 samples, 0.07%)</title><rect x="49.5575%" y="693" width="0.0724%" height="15" fill="rgb(217,162,53)" fg:x="6160" fg:w="9"/><text x="49.6775%" y="703.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (20 samples, 0.16%)</title><rect x="49.5575%" y="757" width="0.1609%" height="15" fill="rgb(229,93,14)" fg:x="6160" fg:w="20"/><text x="49.6775%" y="767.50"></text></g><g><title>std::sync::condvar::Condvar::wait (20 samples, 0.16%)</title><rect x="49.5575%" y="741" width="0.1609%" height="15" fill="rgb(209,67,49)" fg:x="6160" fg:w="20"/><text x="49.6775%" y="751.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (11 samples, 0.09%)</title><rect x="49.6299%" y="725" width="0.0885%" height="15" fill="rgb(213,87,29)" fg:x="6169" fg:w="11"/><text x="49.7499%" y="735.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (11 samples, 0.09%)</title><rect x="49.6299%" y="709" width="0.0885%" height="15" fill="rgb(205,151,52)" fg:x="6169" fg:w="11"/><text x="49.7499%" y="719.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (11 samples, 0.09%)</title><rect x="49.6299%" y="693" width="0.0885%" height="15" fill="rgb(253,215,39)" fg:x="6169" fg:w="11"/><text x="49.7499%" y="703.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (11 samples, 0.09%)</title><rect x="49.6299%" y="677" width="0.0885%" height="15" fill="rgb(221,220,41)" fg:x="6169" fg:w="11"/><text x="49.7499%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (11 samples, 0.09%)</title><rect x="49.6299%" y="661" width="0.0885%" height="15" fill="rgb(218,133,21)" fg:x="6169" fg:w="11"/><text x="49.7499%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (11 samples, 0.09%)</title><rect x="49.6299%" y="645" width="0.0885%" height="15" fill="rgb(221,193,43)" fg:x="6169" fg:w="11"/><text x="49.7499%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (58 samples, 0.47%)</title><rect x="49.2599%" y="789" width="0.4666%" height="15" fill="rgb(240,128,52)" fg:x="6123" fg:w="58"/><text x="49.3799%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (57 samples, 0.46%)</title><rect x="49.2679%" y="773" width="0.4586%" height="15" fill="rgb(253,114,12)" fg:x="6124" fg:w="57"/><text x="49.3879%" y="783.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (2 samples, 0.02%)</title><rect x="49.7345%" y="725" width="0.0161%" height="15" fill="rgb(215,223,47)" fg:x="6182" fg:w="2"/><text x="49.8545%" y="735.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="49.7345%" y="709" width="0.0161%" height="15" fill="rgb(248,225,23)" fg:x="6182" fg:w="2"/><text x="49.8545%" y="719.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="49.7345%" y="693" width="0.0161%" height="15" fill="rgb(250,108,0)" fg:x="6182" fg:w="2"/><text x="49.8545%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.02%)</title><rect x="49.7345%" y="677" width="0.0161%" height="15" fill="rgb(228,208,7)" fg:x="6182" fg:w="2"/><text x="49.8545%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (65 samples, 0.52%)</title><rect x="49.2357%" y="805" width="0.5229%" height="15" fill="rgb(244,45,10)" fg:x="6120" fg:w="65"/><text x="49.3557%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::wake_deferred_tasks (3 samples, 0.02%)</title><rect x="49.7345%" y="789" width="0.0241%" height="15" fill="rgb(207,125,25)" fg:x="6182" fg:w="3"/><text x="49.8545%" y="799.50"></text></g><g><title>tokio::runtime::context::with_defer (3 samples, 0.02%)</title><rect x="49.7345%" y="773" width="0.0241%" height="15" fill="rgb(210,195,18)" fg:x="6182" fg:w="3"/><text x="49.8545%" y="783.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.02%)</title><rect x="49.7345%" y="757" width="0.0241%" height="15" fill="rgb(249,80,12)" fg:x="6182" fg:w="3"/><text x="49.8545%" y="767.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.02%)</title><rect x="49.7345%" y="741" width="0.0241%" height="15" fill="rgb(221,65,9)" fg:x="6182" fg:w="3"/><text x="49.8545%" y="751.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::maintenance (9 samples, 0.07%)</title><rect x="49.7586%" y="805" width="0.0724%" height="15" fill="rgb(235,49,36)" fg:x="6185" fg:w="9"/><text x="49.8786%" y="815.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::is_closed (3 samples, 0.02%)</title><rect x="49.8069%" y="789" width="0.0241%" height="15" fill="rgb(225,32,20)" fg:x="6191" fg:w="3"/><text x="49.9269%" y="799.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (3 samples, 0.02%)</title><rect x="49.8069%" y="773" width="0.0241%" height="15" fill="rgb(215,141,46)" fg:x="6191" fg:w="3"/><text x="49.9269%" y="783.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (3 samples, 0.02%)</title><rect x="49.8069%" y="757" width="0.0241%" height="15" fill="rgb(250,160,47)" fg:x="6191" fg:w="3"/><text x="49.9269%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (3 samples, 0.02%)</title><rect x="49.8069%" y="741" width="0.0241%" height="15" fill="rgb(216,222,40)" fg:x="6191" fg:w="3"/><text x="49.9269%" y="751.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (3 samples, 0.02%)</title><rect x="49.8069%" y="725" width="0.0241%" height="15" fill="rgb(234,217,39)" fg:x="6191" fg:w="3"/><text x="49.9269%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (3 samples, 0.02%)</title><rect x="49.8069%" y="709" width="0.0241%" height="15" fill="rgb(207,178,40)" fg:x="6191" fg:w="3"/><text x="49.9269%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.02%)</title><rect x="49.8069%" y="693" width="0.0241%" height="15" fill="rgb(221,136,13)" fg:x="6191" fg:w="3"/><text x="49.9269%" y="703.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_parked (13 samples, 0.10%)</title><rect x="49.8311%" y="805" width="0.1046%" height="15" fill="rgb(249,199,10)" fg:x="6194" fg:w="13"/><text x="49.9511%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::is_parked (13 samples, 0.10%)</title><rect x="49.8311%" y="789" width="0.1046%" height="15" fill="rgb(249,222,13)" fg:x="6194" fg:w="13"/><text x="49.9511%" y="799.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (13 samples, 0.10%)</title><rect x="49.8311%" y="773" width="0.1046%" height="15" fill="rgb(244,185,38)" fg:x="6194" fg:w="13"/><text x="49.9511%" y="783.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (13 samples, 0.10%)</title><rect x="49.8311%" y="757" width="0.1046%" height="15" fill="rgb(236,202,9)" fg:x="6194" fg:w="13"/><text x="49.9511%" y="767.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (13 samples, 0.10%)</title><rect x="49.8311%" y="741" width="0.1046%" height="15" fill="rgb(250,229,37)" fg:x="6194" fg:w="13"/><text x="49.9511%" y="751.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (13 samples, 0.10%)</title><rect x="49.8311%" y="725" width="0.1046%" height="15" fill="rgb(206,174,23)" fg:x="6194" fg:w="13"/><text x="49.9511%" y="735.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (13 samples, 0.10%)</title><rect x="49.8311%" y="709" width="0.1046%" height="15" fill="rgb(211,33,43)" fg:x="6194" fg:w="13"/><text x="49.9511%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (99 samples, 0.80%)</title><rect x="49.1633%" y="821" width="0.7965%" height="15" fill="rgb(245,58,50)" fg:x="6111" fg:w="99"/><text x="49.2833%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_parked (3 samples, 0.02%)</title><rect x="49.9356%" y="805" width="0.0241%" height="15" fill="rgb(244,68,36)" fg:x="6207" fg:w="3"/><text x="50.0556%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (2 samples, 0.02%)</title><rect x="49.9437%" y="789" width="0.0161%" height="15" fill="rgb(232,229,15)" fg:x="6208" fg:w="2"/><text x="50.0637%" y="799.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (7 samples, 0.06%)</title><rect x="49.9598%" y="757" width="0.0563%" height="15" fill="rgb(254,30,23)" fg:x="6210" fg:w="7"/><text x="50.0798%" y="767.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (7 samples, 0.06%)</title><rect x="49.9598%" y="741" width="0.0563%" height="15" fill="rgb(235,160,14)" fg:x="6210" fg:w="7"/><text x="50.0798%" y="751.50"></text></g><g><title>core::cell::BorrowRefMut::new (7 samples, 0.06%)</title><rect x="49.9598%" y="725" width="0.0563%" height="15" fill="rgb(212,155,44)" fg:x="6210" fg:w="7"/><text x="50.0798%" y="735.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (7 samples, 0.06%)</title><rect x="49.9598%" y="709" width="0.0563%" height="15" fill="rgb(226,2,50)" fg:x="6210" fg:w="7"/><text x="50.0798%" y="719.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (7 samples, 0.06%)</title><rect x="49.9598%" y="693" width="0.0563%" height="15" fill="rgb(234,177,6)" fg:x="6210" fg:w="7"/><text x="50.0798%" y="703.50"></text></g><g><title>core::mem::replace (7 samples, 0.06%)</title><rect x="49.9598%" y="677" width="0.0563%" height="15" fill="rgb(217,24,9)" fg:x="6210" fg:w="7"/><text x="50.0798%" y="687.50"></text></g><g><title>core::ptr::write (7 samples, 0.06%)</title><rect x="49.9598%" y="661" width="0.0563%" height="15" fill="rgb(220,13,46)" fg:x="6210" fg:w="7"/><text x="50.0798%" y="671.50"></text></g><g><title>core::ptr::read (2 samples, 0.02%)</title><rect x="50.0161%" y="725" width="0.0161%" height="15" fill="rgb(239,221,27)" fg:x="6217" fg:w="2"/><text x="50.1361%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (13 samples, 0.10%)</title><rect x="50.0161%" y="757" width="0.1046%" height="15" fill="rgb(222,198,25)" fg:x="6217" fg:w="13"/><text x="50.1361%" y="767.50"></text></g><g><title>core::mem::replace (13 samples, 0.10%)</title><rect x="50.0161%" y="741" width="0.1046%" height="15" fill="rgb(211,99,13)" fg:x="6217" fg:w="13"/><text x="50.1361%" y="751.50"></text></g><g><title>core::ptr::write (11 samples, 0.09%)</title><rect x="50.0322%" y="725" width="0.0885%" height="15" fill="rgb(232,111,31)" fg:x="6219" fg:w="11"/><text x="50.1522%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;core::option::Option&lt;alloc::boxed::Box&lt;tokio::runtime::scheduler::multi_thread::worker::Core&gt;&gt;&gt;&gt; (13 samples, 0.10%)</title><rect x="50.1207%" y="757" width="0.1046%" height="15" fill="rgb(245,82,37)" fg:x="6230" fg:w="13"/><text x="50.2407%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (13 samples, 0.10%)</title><rect x="50.1207%" y="741" width="0.1046%" height="15" fill="rgb(227,149,46)" fg:x="6230" fg:w="13"/><text x="50.2407%" y="751.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (13 samples, 0.10%)</title><rect x="50.1207%" y="725" width="0.1046%" height="15" fill="rgb(218,36,50)" fg:x="6230" fg:w="13"/><text x="50.2407%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (3 samples, 0.02%)</title><rect x="50.3459%" y="613" width="0.0241%" height="15" fill="rgb(226,80,48)" fg:x="6258" fg:w="3"/><text x="50.4659%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_swap (3 samples, 0.02%)</title><rect x="50.3459%" y="597" width="0.0241%" height="15" fill="rgb(238,224,15)" fg:x="6258" fg:w="3"/><text x="50.4659%" y="607.50"></text></g><g><title>core::mem::drop (6 samples, 0.05%)</title><rect x="50.3701%" y="597" width="0.0483%" height="15" fill="rgb(241,136,10)" fg:x="6261" fg:w="6"/><text x="50.4901%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (6 samples, 0.05%)</title><rect x="50.3701%" y="581" width="0.0483%" height="15" fill="rgb(208,32,45)" fg:x="6261" fg:w="6"/><text x="50.4901%" y="591.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="50.3701%" y="565" width="0.0483%" height="15" fill="rgb(207,135,9)" fg:x="6261" fg:w="6"/><text x="50.4901%" y="575.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (6 samples, 0.05%)</title><rect x="50.3701%" y="549" width="0.0483%" height="15" fill="rgb(206,86,44)" fg:x="6261" fg:w="6"/><text x="50.4901%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (6 samples, 0.05%)</title><rect x="50.3701%" y="533" width="0.0483%" height="15" fill="rgb(245,177,15)" fg:x="6261" fg:w="6"/><text x="50.4901%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (6 samples, 0.05%)</title><rect x="50.3701%" y="517" width="0.0483%" height="15" fill="rgb(206,64,50)" fg:x="6261" fg:w="6"/><text x="50.4901%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_swap (6 samples, 0.05%)</title><rect x="50.3701%" y="501" width="0.0483%" height="15" fill="rgb(234,36,40)" fg:x="6261" fg:w="6"/><text x="50.4901%" y="511.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (13 samples, 0.10%)</title><rect x="50.3218%" y="645" width="0.1046%" height="15" fill="rgb(213,64,8)" fg:x="6255" fg:w="13"/><text x="50.4418%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (13 samples, 0.10%)</title><rect x="50.3218%" y="629" width="0.1046%" height="15" fill="rgb(210,75,36)" fg:x="6255" fg:w="13"/><text x="50.4418%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark_condvar (7 samples, 0.06%)</title><rect x="50.3701%" y="613" width="0.0563%" height="15" fill="rgb(229,88,21)" fg:x="6261" fg:w="7"/><text x="50.4901%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (6 samples, 0.05%)</title><rect x="50.4344%" y="597" width="0.0483%" height="15" fill="rgb(252,204,47)" fg:x="6269" fg:w="6"/><text x="50.5544%" y="607.50"></text></g><g><title>core::ptr::read (6 samples, 0.05%)</title><rect x="50.4344%" y="581" width="0.0483%" height="15" fill="rgb(208,77,27)" fg:x="6269" fg:w="6"/><text x="50.5544%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (40 samples, 0.32%)</title><rect x="50.2977%" y="709" width="0.3218%" height="15" fill="rgb(221,76,26)" fg:x="6252" fg:w="40"/><text x="50.4177%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (40 samples, 0.32%)</title><rect x="50.2977%" y="693" width="0.3218%" height="15" fill="rgb(225,139,18)" fg:x="6252" fg:w="40"/><text x="50.4177%" y="703.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (40 samples, 0.32%)</title><rect x="50.2977%" y="677" width="0.3218%" height="15" fill="rgb(230,137,11)" fg:x="6252" fg:w="40"/><text x="50.4177%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::{{closure}} (39 samples, 0.31%)</title><rect x="50.3057%" y="661" width="0.3138%" height="15" fill="rgb(212,28,1)" fg:x="6253" fg:w="39"/><text x="50.4257%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (23 samples, 0.19%)</title><rect x="50.4344%" y="645" width="0.1850%" height="15" fill="rgb(248,164,17)" fg:x="6269" fg:w="23"/><text x="50.5544%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked (23 samples, 0.19%)</title><rect x="50.4344%" y="629" width="0.1850%" height="15" fill="rgb(222,171,42)" fg:x="6269" fg:w="23"/><text x="50.5544%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (23 samples, 0.19%)</title><rect x="50.4344%" y="613" width="0.1850%" height="15" fill="rgb(243,84,45)" fg:x="6269" fg:w="23"/><text x="50.5544%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (17 samples, 0.14%)</title><rect x="50.4827%" y="597" width="0.1368%" height="15" fill="rgb(252,49,23)" fg:x="6275" fg:w="17"/><text x="50.6027%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (12 samples, 0.10%)</title><rect x="50.5229%" y="581" width="0.0965%" height="15" fill="rgb(215,19,7)" fg:x="6280" fg:w="12"/><text x="50.6429%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_add (12 samples, 0.10%)</title><rect x="50.5229%" y="565" width="0.0965%" height="15" fill="rgb(238,81,41)" fg:x="6280" fg:w="12"/><text x="50.6429%" y="575.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (5 samples, 0.04%)</title><rect x="51.2872%" y="485" width="0.0402%" height="15" fill="rgb(210,199,37)" fg:x="6375" fg:w="5"/><text x="51.4072%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (5 samples, 0.04%)</title><rect x="51.2872%" y="469" width="0.0402%" height="15" fill="rgb(244,192,49)" fg:x="6375" fg:w="5"/><text x="51.4072%" y="479.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::BufRead&gt;::consume (3 samples, 0.02%)</title><rect x="51.3596%" y="181" width="0.0241%" height="15" fill="rgb(226,211,11)" fg:x="6384" fg:w="3"/><text x="51.4796%" y="191.50"></text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="51.3596%" y="165" width="0.0241%" height="15" fill="rgb(236,162,54)" fg:x="6384" fg:w="3"/><text x="51.4796%" y="175.50"></text></g><g><title>crc32fast::Hasher::update (3 samples, 0.02%)</title><rect x="51.3596%" y="149" width="0.0241%" height="15" fill="rgb(220,229,9)" fg:x="6384" fg:w="3"/><text x="51.4796%" y="159.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (3 samples, 0.02%)</title><rect x="51.3596%" y="133" width="0.0241%" height="15" fill="rgb(250,87,22)" fg:x="6384" fg:w="3"/><text x="51.4796%" y="143.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (3 samples, 0.02%)</title><rect x="51.3596%" y="117" width="0.0241%" height="15" fill="rgb(239,43,17)" fg:x="6384" fg:w="3"/><text x="51.4796%" y="127.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (3 samples, 0.02%)</title><rect x="51.3596%" y="101" width="0.0241%" height="15" fill="rgb(231,177,25)" fg:x="6384" fg:w="3"/><text x="51.4796%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_xor_si128 (3 samples, 0.02%)</title><rect x="51.3596%" y="85" width="0.0241%" height="15" fill="rgb(219,179,1)" fg:x="6384" fg:w="3"/><text x="51.4796%" y="95.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (31 samples, 0.25%)</title><rect x="51.3837%" y="181" width="0.2494%" height="15" fill="rgb(238,219,53)" fg:x="6387" fg:w="31"/><text x="51.5037%" y="191.50"></text></g><g><title>&lt;flate2::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (31 samples, 0.25%)</title><rect x="51.3837%" y="165" width="0.2494%" height="15" fill="rgb(232,167,36)" fg:x="6387" fg:w="31"/><text x="51.5037%" y="175.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for alloc::collections::vec_deque::VecDeque&lt;u8,A&gt;&gt;::read (31 samples, 0.25%)</title><rect x="51.3837%" y="149" width="0.2494%" height="15" fill="rgb(244,19,51)" fg:x="6387" fg:w="31"/><text x="51.5037%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::drain::Drain&lt;u8&gt;&gt; (31 samples, 0.25%)</title><rect x="51.3837%" y="133" width="0.2494%" height="15" fill="rgb(224,6,22)" fg:x="6387" fg:w="31"/><text x="51.5037%" y="143.50"></text></g><g><title>&lt;alloc::collections::vec_deque::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.25%)</title><rect x="51.3837%" y="117" width="0.2494%" height="15" fill="rgb(224,145,5)" fg:x="6387" fg:w="31"/><text x="51.5037%" y="127.50"></text></g><g><title>&lt;alloc::collections::vec_deque::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.25%)</title><rect x="51.3837%" y="101" width="0.2494%" height="15" fill="rgb(234,130,49)" fg:x="6387" fg:w="31"/><text x="51.5037%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (20 samples, 0.16%)</title><rect x="51.4722%" y="85" width="0.1609%" height="15" fill="rgb(254,6,2)" fg:x="6398" fg:w="20"/><text x="51.5922%" y="95.50"></text></g><g><title>miniz_oxide::deflate::core::DictOxide::find_match (739 samples, 5.95%)</title><rect x="53.6685%" y="69" width="5.9453%" height="15" fill="rgb(208,96,46)" fg:x="6671" fg:w="739"/><text x="53.7885%" y="79.50">miniz_oxide::defla..</text></g><g><title>miniz_oxide::deflate::core::flush_block (14 samples, 0.11%)</title><rect x="59.6138%" y="69" width="0.1126%" height="15" fill="rgb(239,3,39)" fg:x="7410" fg:w="14"/><text x="59.7338%" y="79.50"></text></g><g><title>miniz_oxide::deflate::core::compress_block (14 samples, 0.11%)</title><rect x="59.6138%" y="53" width="0.1126%" height="15" fill="rgb(233,210,1)" fg:x="7410" fg:w="14"/><text x="59.7338%" y="63.50"></text></g><g><title>miniz_oxide::deflate::core::compress_lz_codes (14 samples, 0.11%)</title><rect x="59.6138%" y="37" width="0.1126%" height="15" fill="rgb(244,137,37)" fg:x="7410" fg:w="14"/><text x="59.7338%" y="47.50"></text></g><g><title>miniz_oxide::deflate::core::compress_normal (1,031 samples, 8.29%)</title><rect x="51.6331%" y="85" width="8.2944%" height="15" fill="rgb(240,136,2)" fg:x="6418" fg:w="1031"/><text x="51.7531%" y="95.50">miniz_oxide::deflate::core:..</text></g><g><title>miniz_oxide::deflate::core::record_match (25 samples, 0.20%)</title><rect x="59.7265%" y="69" width="0.2011%" height="15" fill="rgb(239,18,37)" fg:x="7424" fg:w="25"/><text x="59.8465%" y="79.50"></text></g><g><title>miniz_oxide::deflate::core::LZOxide::write_code (14 samples, 0.11%)</title><rect x="59.8150%" y="53" width="0.1126%" height="15" fill="rgb(218,185,22)" fg:x="7435" fg:w="14"/><text x="59.9350%" y="63.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::start_dynamic_block (4 samples, 0.03%)</title><rect x="59.9276%" y="53" width="0.0322%" height="15" fill="rgb(225,218,4)" fg:x="7449" fg:w="4"/><text x="60.0476%" y="63.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::optimize_table (4 samples, 0.03%)</title><rect x="59.9276%" y="37" width="0.0322%" height="15" fill="rgb(230,182,32)" fg:x="7449" fg:w="4"/><text x="60.0476%" y="47.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,137 samples, 9.15%)</title><rect x="51.3355%" y="453" width="9.1472%" height="15" fill="rgb(242,56,43)" fg:x="6381" fg:w="1137"/><text x="51.4555%" y="463.50">&lt;core::future::from_generator:..</text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::insert::{{closure}} (1,137 samples, 9.15%)</title><rect x="51.3355%" y="437" width="9.1472%" height="15" fill="rgb(233,99,24)" fg:x="6381" fg:w="1137"/><text x="51.4555%" y="447.50">dads_gzip_thing::gzip::JsonLin..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,137 samples, 9.15%)</title><rect x="51.3355%" y="421" width="9.1472%" height="15" fill="rgb(234,209,42)" fg:x="6381" fg:w="1137"/><text x="51.4555%" y="431.50">&lt;core::future::from_generator:..</text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::close_least_recently_used::{{closure}} (1,136 samples, 9.14%)</title><rect x="51.3435%" y="405" width="9.1392%" height="15" fill="rgb(227,7,12)" fg:x="6382" fg:w="1136"/><text x="51.4635%" y="415.50">dads_gzip_thing::gzip::JsonLin..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,136 samples, 9.14%)</title><rect x="51.3435%" y="389" width="9.1392%" height="15" fill="rgb(245,203,43)" fg:x="6382" fg:w="1136"/><text x="51.4635%" y="399.50">&lt;core::future::from_generator:..</text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStream::flush::{{closure}} (1,136 samples, 9.14%)</title><rect x="51.3435%" y="373" width="9.1392%" height="15" fill="rgb(238,205,33)" fg:x="6382" fg:w="1136"/><text x="51.4635%" y="383.50">dads_gzip_thing::gzip::JsonLin..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,136 samples, 9.14%)</title><rect x="51.3435%" y="357" width="9.1392%" height="15" fill="rgb(231,56,7)" fg:x="6382" fg:w="1136"/><text x="51.4635%" y="367.50">&lt;core::future::from_generator:..</text></g><g><title>dads_gzip_thing::enc::GzEncoderAsync::flush::{{closure}} (1,136 samples, 9.14%)</title><rect x="51.3435%" y="341" width="9.1392%" height="15" fill="rgb(244,186,29)" fg:x="6382" fg:w="1136"/><text x="51.4635%" y="351.50">dads_gzip_thing::enc::GzEncode..</text></g><g><title>std::io::Read::read_to_end (1,134 samples, 9.12%)</title><rect x="51.3596%" y="325" width="9.1231%" height="15" fill="rgb(234,111,31)" fg:x="6384" fg:w="1134"/><text x="51.4796%" y="335.50">std::io::Read::read_to_end</text></g><g><title>std::io::default_read_to_end (1,134 samples, 9.12%)</title><rect x="51.3596%" y="309" width="9.1231%" height="15" fill="rgb(241,149,10)" fg:x="6384" fg:w="1134"/><text x="51.4796%" y="319.50">std::io::default_read_to_end</text></g><g><title>std::io::Read::read_buf (1,134 samples, 9.12%)</title><rect x="51.3596%" y="293" width="9.1231%" height="15" fill="rgb(249,206,44)" fg:x="6384" fg:w="1134"/><text x="51.4796%" y="303.50">std::io::Read::read_buf</text></g><g><title>std::io::default_read_buf (1,134 samples, 9.12%)</title><rect x="51.3596%" y="277" width="9.1231%" height="15" fill="rgb(251,153,30)" fg:x="6384" fg:w="1134"/><text x="51.4796%" y="287.50">std::io::default_read_buf</text></g><g><title>std::io::Read::read_buf::{{closure}} (1,134 samples, 9.12%)</title><rect x="51.3596%" y="261" width="9.1231%" height="15" fill="rgb(239,152,38)" fg:x="6384" fg:w="1134"/><text x="51.4796%" y="271.50">std::io::Read::read_buf::{{clo..</text></g><g><title>&lt;flate2::gz::read::GzEncoder&lt;R&gt; as std::io::Read&gt;::read (1,134 samples, 9.12%)</title><rect x="51.3596%" y="245" width="9.1231%" height="15" fill="rgb(249,139,47)" fg:x="6384" fg:w="1134"/><text x="51.4796%" y="255.50">&lt;flate2::gz::read::GzEncoder&lt;R..</text></g><g><title>&lt;flate2::gz::bufread::GzEncoder&lt;R&gt; as std::io::Read&gt;::read (1,134 samples, 9.12%)</title><rect x="51.3596%" y="229" width="9.1231%" height="15" fill="rgb(244,64,35)" fg:x="6384" fg:w="1134"/><text x="51.4796%" y="239.50">&lt;flate2::gz::bufread::GzEncode..</text></g><g><title>&lt;flate2::deflate::bufread::DeflateEncoder&lt;R&gt; as std::io::Read&gt;::read (1,134 samples, 9.12%)</title><rect x="51.3596%" y="213" width="9.1231%" height="15" fill="rgb(216,46,15)" fg:x="6384" fg:w="1134"/><text x="51.4796%" y="223.50">&lt;flate2::deflate::bufread::Def..</text></g><g><title>flate2::zio::read (1,134 samples, 9.12%)</title><rect x="51.3596%" y="197" width="9.1231%" height="15" fill="rgb(250,74,19)" fg:x="6384" fg:w="1134"/><text x="51.4796%" y="207.50">flate2::zio::read</text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run (1,100 samples, 8.85%)</title><rect x="51.6331%" y="181" width="8.8496%" height="15" fill="rgb(249,42,33)" fg:x="6418" fg:w="1100"/><text x="51.7531%" y="191.50">&lt;flate2::mem::Compress as fla..</text></g><g><title>flate2::mem::Compress::compress (1,100 samples, 8.85%)</title><rect x="51.6331%" y="165" width="8.8496%" height="15" fill="rgb(242,149,17)" fg:x="6418" fg:w="1100"/><text x="51.7531%" y="175.50">flate2::mem::Compress::compre..</text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::compress (1,100 samples, 8.85%)</title><rect x="51.6331%" y="149" width="8.8496%" height="15" fill="rgb(244,29,21)" fg:x="6418" fg:w="1100"/><text x="51.7531%" y="159.50">&lt;flate2::ffi::rust::Deflate a..</text></g><g><title>miniz_oxide::deflate::stream::deflate (1,100 samples, 8.85%)</title><rect x="51.6331%" y="133" width="8.8496%" height="15" fill="rgb(220,130,37)" fg:x="6418" fg:w="1100"/><text x="51.7531%" y="143.50">miniz_oxide::deflate::stream:..</text></g><g><title>miniz_oxide::deflate::core::compress (1,100 samples, 8.85%)</title><rect x="51.6331%" y="117" width="8.8496%" height="15" fill="rgb(211,67,2)" fg:x="6418" fg:w="1100"/><text x="51.7531%" y="127.50">miniz_oxide::deflate::core::c..</text></g><g><title>miniz_oxide::deflate::core::compress_inner (1,100 samples, 8.85%)</title><rect x="51.6331%" y="101" width="8.8496%" height="15" fill="rgb(235,68,52)" fg:x="6418" fg:w="1100"/><text x="51.7531%" y="111.50">miniz_oxide::deflate::core::c..</text></g><g><title>miniz_oxide::deflate::core::flush_block (69 samples, 0.56%)</title><rect x="59.9276%" y="85" width="0.5551%" height="15" fill="rgb(246,142,3)" fg:x="7449" fg:w="69"/><text x="60.0476%" y="95.50"></text></g><g><title>miniz_oxide::deflate::core::compress_block (69 samples, 0.56%)</title><rect x="59.9276%" y="69" width="0.5551%" height="15" fill="rgb(241,25,7)" fg:x="7449" fg:w="69"/><text x="60.0476%" y="79.50"></text></g><g><title>miniz_oxide::deflate::core::compress_lz_codes (65 samples, 0.52%)</title><rect x="59.9598%" y="53" width="0.5229%" height="15" fill="rgb(242,119,39)" fg:x="7453" fg:w="65"/><text x="60.0798%" y="63.50"></text></g><g><title>miniz_oxide::deflate::core::read_u16_le (27 samples, 0.22%)</title><rect x="60.2655%" y="37" width="0.2172%" height="15" fill="rgb(241,98,45)" fg:x="7491" fg:w="27"/><text x="60.3855%" y="47.50"></text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::get_id_or_generate (5 samples, 0.04%)</title><rect x="60.4827%" y="453" width="0.0402%" height="15" fill="rgb(254,28,30)" fg:x="7518" fg:w="5"/><text x="60.6027%" y="463.50"></text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::get_id (5 samples, 0.04%)</title><rect x="60.4827%" y="437" width="0.0402%" height="15" fill="rgb(241,142,54)" fg:x="7518" fg:w="5"/><text x="60.6027%" y="447.50"></text></g><g><title>bimap::hash::BiHashMap&lt;L,R,LS,RS&gt;::get_by_left (5 samples, 0.04%)</title><rect x="60.4827%" y="421" width="0.0402%" height="15" fill="rgb(222,85,15)" fg:x="7518" fg:w="5"/><text x="60.6027%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (5 samples, 0.04%)</title><rect x="60.4827%" y="405" width="0.0402%" height="15" fill="rgb(210,85,47)" fg:x="7518" fg:w="5"/><text x="60.6027%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5 samples, 0.04%)</title><rect x="60.4827%" y="389" width="0.0402%" height="15" fill="rgb(224,206,25)" fg:x="7518" fg:w="5"/><text x="60.6027%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 0.04%)</title><rect x="60.4827%" y="373" width="0.0402%" height="15" fill="rgb(243,201,19)" fg:x="7518" fg:w="5"/><text x="60.6027%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.04%)</title><rect x="60.4827%" y="357" width="0.0402%" height="15" fill="rgb(236,59,4)" fg:x="7518" fg:w="5"/><text x="60.6027%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.04%)</title><rect x="60.4827%" y="341" width="0.0402%" height="15" fill="rgb(254,179,45)" fg:x="7518" fg:w="5"/><text x="60.6027%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.03%)</title><rect x="60.4907%" y="325" width="0.0322%" height="15" fill="rgb(226,14,10)" fg:x="7519" fg:w="4"/><text x="60.6107%" y="335.50"></text></g><g><title>&lt;bimap::mem::Wrapper&lt;T&gt; as core::hash::Hash&gt;::hash (4 samples, 0.03%)</title><rect x="60.4907%" y="309" width="0.0322%" height="15" fill="rgb(244,27,41)" fg:x="7519" fg:w="4"/><text x="60.6107%" y="319.50"></text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (4 samples, 0.03%)</title><rect x="60.4907%" y="293" width="0.0322%" height="15" fill="rgb(235,35,32)" fg:x="7519" fg:w="4"/><text x="60.6107%" y="303.50"></text></g><g><title>&lt;std::path::Path as core::hash::Hash&gt;::hash (4 samples, 0.03%)</title><rect x="60.4907%" y="277" width="0.0322%" height="15" fill="rgb(218,68,31)" fg:x="7519" fg:w="4"/><text x="60.6107%" y="287.50"></text></g><g><title>std::sys::unix::path::is_sep_byte (2 samples, 0.02%)</title><rect x="60.5068%" y="261" width="0.0161%" height="15" fill="rgb(207,120,37)" fg:x="7521" fg:w="2"/><text x="60.6268%" y="271.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,145 samples, 9.21%)</title><rect x="51.3274%" y="485" width="9.2116%" height="15" fill="rgb(227,98,0)" fg:x="6380" fg:w="1145"/><text x="51.4474%" y="495.50">&lt;core::future::from_generator:..</text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::get_or_insert::{{closure}} (1,144 samples, 9.20%)</title><rect x="51.3355%" y="469" width="9.2035%" height="15" fill="rgb(207,7,3)" fg:x="6381" fg:w="1144"/><text x="51.4555%" y="479.50">dads_gzip_thing::gzip::JsonLin..</text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="60.5390%" y="389" width="0.0161%" height="15" fill="rgb(206,98,19)" fg:x="7525" fg:w="2"/><text x="60.6590%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="60.5390%" y="373" width="0.0161%" height="15" fill="rgb(217,5,26)" fg:x="7525" fg:w="2"/><text x="60.6590%" y="383.50"></text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::write_line::{{closure}} (1,153 samples, 9.28%)</title><rect x="51.2872%" y="501" width="9.2759%" height="15" fill="rgb(235,190,38)" fg:x="6375" fg:w="1153"/><text x="51.4072%" y="511.50">dads_gzip_thing::gzip::JsonLin..</text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::get_id_or_generate (3 samples, 0.02%)</title><rect x="60.5390%" y="485" width="0.0241%" height="15" fill="rgb(247,86,24)" fg:x="7525" fg:w="3"/><text x="60.6590%" y="495.50"></text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::get_id (3 samples, 0.02%)</title><rect x="60.5390%" y="469" width="0.0241%" height="15" fill="rgb(205,101,16)" fg:x="7525" fg:w="3"/><text x="60.6590%" y="479.50"></text></g><g><title>bimap::hash::BiHashMap&lt;L,R,LS,RS&gt;::get_by_left (3 samples, 0.02%)</title><rect x="60.5390%" y="453" width="0.0241%" height="15" fill="rgb(246,168,33)" fg:x="7525" fg:w="3"/><text x="60.6590%" y="463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3 samples, 0.02%)</title><rect x="60.5390%" y="437" width="0.0241%" height="15" fill="rgb(231,114,1)" fg:x="7525" fg:w="3"/><text x="60.6590%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3 samples, 0.02%)</title><rect x="60.5390%" y="421" width="0.0241%" height="15" fill="rgb(207,184,53)" fg:x="7525" fg:w="3"/><text x="60.6590%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.02%)</title><rect x="60.5390%" y="405" width="0.0241%" height="15" fill="rgb(224,95,51)" fg:x="7525" fg:w="3"/><text x="60.6590%" y="415.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (66 samples, 0.53%)</title><rect x="60.6999%" y="453" width="0.5310%" height="15" fill="rgb(212,188,45)" fg:x="7545" fg:w="66"/><text x="60.8199%" y="463.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (2 samples, 0.02%)</title><rect x="61.2309%" y="437" width="0.0161%" height="15" fill="rgb(223,154,38)" fg:x="7611" fg:w="2"/><text x="61.3509%" y="447.50"></text></g><g><title>tokio::runtime::context::budget (2 samples, 0.02%)</title><rect x="61.2309%" y="421" width="0.0161%" height="15" fill="rgb(251,22,52)" fg:x="7611" fg:w="2"/><text x="61.3509%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="61.2309%" y="405" width="0.0161%" height="15" fill="rgb(229,209,22)" fg:x="7611" fg:w="2"/><text x="61.3509%" y="415.50"></text></g><g><title>tokio::runtime::context::budget::{{closure}} (2 samples, 0.02%)</title><rect x="61.2309%" y="389" width="0.0161%" height="15" fill="rgb(234,138,34)" fg:x="7611" fg:w="2"/><text x="61.3509%" y="399.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::{{closure}} (2 samples, 0.02%)</title><rect x="61.2309%" y="373" width="0.0161%" height="15" fill="rgb(212,95,11)" fg:x="7611" fg:w="2"/><text x="61.3509%" y="383.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (2 samples, 0.02%)</title><rect x="61.2309%" y="357" width="0.0161%" height="15" fill="rgb(240,179,47)" fg:x="7611" fg:w="2"/><text x="61.3509%" y="367.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (2 samples, 0.02%)</title><rect x="61.2309%" y="341" width="0.0161%" height="15" fill="rgb(240,163,11)" fg:x="7611" fg:w="2"/><text x="61.3509%" y="351.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_ref (2 samples, 0.02%)</title><rect x="61.2309%" y="325" width="0.0161%" height="15" fill="rgb(236,37,12)" fg:x="7611" fg:w="2"/><text x="61.3509%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (306 samples, 2.46%)</title><rect x="61.2792%" y="421" width="2.4618%" height="15" fill="rgb(232,164,16)" fg:x="7617" fg:w="306"/><text x="61.3992%" y="431.50">core::..</text></g><g><title>core::sync::atomic::atomic_compare_exchange (306 samples, 2.46%)</title><rect x="61.2792%" y="405" width="2.4618%" height="15" fill="rgb(244,205,15)" fg:x="7617" fg:w="306"/><text x="61.3992%" y="415.50">core::..</text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (118 samples, 0.95%)</title><rect x="63.7409%" y="357" width="0.9493%" height="15" fill="rgb(223,117,47)" fg:x="7923" fg:w="118"/><text x="63.8609%" y="367.50">c..</text></g><g><title>core::sync::atomic::atomic_compare_exchange (118 samples, 0.95%)</title><rect x="63.7409%" y="341" width="0.9493%" height="15" fill="rgb(244,107,35)" fg:x="7923" fg:w="118"/><text x="63.8609%" y="351.50">c..</text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (119 samples, 0.96%)</title><rect x="63.7409%" y="421" width="0.9574%" height="15" fill="rgb(205,140,8)" fg:x="7923" fg:w="119"/><text x="63.8609%" y="431.50">t..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (119 samples, 0.96%)</title><rect x="63.7409%" y="405" width="0.9574%" height="15" fill="rgb(228,84,46)" fg:x="7923" fg:w="119"/><text x="63.8609%" y="415.50">s..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (119 samples, 0.96%)</title><rect x="63.7409%" y="389" width="0.9574%" height="15" fill="rgb(254,188,9)" fg:x="7923" fg:w="119"/><text x="63.8609%" y="399.50">s..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (119 samples, 0.96%)</title><rect x="63.7409%" y="373" width="0.9574%" height="15" fill="rgb(206,112,54)" fg:x="7923" fg:w="119"/><text x="63.8609%" y="383.50">s..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (47 samples, 0.38%)</title><rect x="64.6983%" y="421" width="0.3781%" height="15" fill="rgb(216,84,49)" fg:x="8042" fg:w="47"/><text x="64.8183%" y="431.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire::{{closure}} (47 samples, 0.38%)</title><rect x="64.6983%" y="405" width="0.3781%" height="15" fill="rgb(214,194,35)" fg:x="8042" fg:w="47"/><text x="64.8183%" y="415.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (47 samples, 0.38%)</title><rect x="64.6983%" y="389" width="0.3781%" height="15" fill="rgb(249,28,3)" fg:x="8042" fg:w="47"/><text x="64.8183%" y="399.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (47 samples, 0.38%)</title><rect x="64.6983%" y="373" width="0.3781%" height="15" fill="rgb(222,56,52)" fg:x="8042" fg:w="47"/><text x="64.8183%" y="383.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (26 samples, 0.21%)</title><rect x="64.8673%" y="357" width="0.2092%" height="15" fill="rgb(245,217,50)" fg:x="8063" fg:w="26"/><text x="64.9873%" y="367.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (64 samples, 0.51%)</title><rect x="65.0764%" y="421" width="0.5149%" height="15" fill="rgb(213,201,24)" fg:x="8089" fg:w="64"/><text x="65.1964%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt;&gt; (64 samples, 0.51%)</title><rect x="65.0764%" y="405" width="0.5149%" height="15" fill="rgb(248,116,28)" fg:x="8089" fg:w="64"/><text x="65.1964%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt; (64 samples, 0.51%)</title><rect x="65.0764%" y="389" width="0.5149%" height="15" fill="rgb(219,72,43)" fg:x="8089" fg:w="64"/><text x="65.1964%" y="399.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 0.51%)</title><rect x="65.0764%" y="373" width="0.5149%" height="15" fill="rgb(209,138,14)" fg:x="8089" fg:w="64"/><text x="65.1964%" y="383.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (64 samples, 0.51%)</title><rect x="65.0764%" y="357" width="0.5149%" height="15" fill="rgb(222,18,33)" fg:x="8089" fg:w="64"/><text x="65.1964%" y="367.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (64 samples, 0.51%)</title><rect x="65.0764%" y="341" width="0.5149%" height="15" fill="rgb(213,199,7)" fg:x="8089" fg:w="64"/><text x="65.1964%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (47 samples, 0.38%)</title><rect x="65.2132%" y="325" width="0.3781%" height="15" fill="rgb(250,110,10)" fg:x="8106" fg:w="47"/><text x="65.3332%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_swap (47 samples, 0.38%)</title><rect x="65.2132%" y="309" width="0.3781%" height="15" fill="rgb(248,123,6)" fg:x="8106" fg:w="47"/><text x="65.3332%" y="319.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (547 samples, 4.40%)</title><rect x="61.2309%" y="453" width="4.4006%" height="15" fill="rgb(206,91,31)" fg:x="7611" fg:w="547"/><text x="61.3509%" y="463.50">&lt;tokio::sync:..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire (545 samples, 4.38%)</title><rect x="61.2470%" y="437" width="4.3846%" height="15" fill="rgb(211,154,13)" fg:x="7613" fg:w="545"/><text x="61.3670%" y="447.50">tokio::sync::..</text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (5 samples, 0.04%)</title><rect x="65.5913%" y="421" width="0.0402%" height="15" fill="rgb(225,148,7)" fg:x="8153" fg:w="5"/><text x="65.7113%" y="431.50"></text></g><g><title>tokio::util::linked_list::Pointers&lt;T&gt;::set_prev (2 samples, 0.02%)</title><rect x="65.6154%" y="405" width="0.0161%" height="15" fill="rgb(220,160,43)" fg:x="8156" fg:w="2"/><text x="65.7354%" y="415.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="65.6154%" y="389" width="0.0161%" height="15" fill="rgb(213,52,39)" fg:x="8156" fg:w="2"/><text x="65.7354%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,786 samples, 14.37%)</title><rect x="51.2872%" y="517" width="14.3685%" height="15" fill="rgb(243,137,7)" fg:x="6375" fg:w="1786"/><text x="51.4072%" y="527.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as c..</text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::lock::{{closure}} (633 samples, 5.09%)</title><rect x="60.5632%" y="501" width="5.0925%" height="15" fill="rgb(230,79,13)" fg:x="7528" fg:w="633"/><text x="60.6832%" y="511.50">tokio::sync::mu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (633 samples, 5.09%)</title><rect x="60.5632%" y="485" width="5.0925%" height="15" fill="rgb(247,105,23)" fg:x="7528" fg:w="633"/><text x="60.6832%" y="495.50">&lt;core::future::..</text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::acquire::{{closure}} (633 samples, 5.09%)</title><rect x="60.5632%" y="469" width="5.0925%" height="15" fill="rgb(223,179,41)" fg:x="7528" fg:w="633"/><text x="60.6832%" y="479.50">tokio::sync::mu..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (2 samples, 0.02%)</title><rect x="65.6396%" y="453" width="0.0161%" height="15" fill="rgb(218,9,34)" fg:x="8159" fg:w="2"/><text x="65.7596%" y="463.50"></text></g><g><title>tokio::sync::batch_semaphore::Acquire::new (2 samples, 0.02%)</title><rect x="65.6396%" y="437" width="0.0161%" height="15" fill="rgb(222,106,8)" fg:x="8159" fg:w="2"/><text x="65.7596%" y="447.50"></text></g><g><title>core::mem::drop (42 samples, 0.34%)</title><rect x="65.7603%" y="469" width="0.3379%" height="15" fill="rgb(211,220,0)" fg:x="8174" fg:w="42"/><text x="65.8803%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt; (42 samples, 0.34%)</title><rect x="65.7603%" y="453" width="0.3379%" height="15" fill="rgb(229,52,16)" fg:x="8174" fg:w="42"/><text x="65.8803%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.34%)</title><rect x="65.7603%" y="437" width="0.3379%" height="15" fill="rgb(212,155,18)" fg:x="8174" fg:w="42"/><text x="65.8803%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (42 samples, 0.34%)</title><rect x="65.7603%" y="421" width="0.3379%" height="15" fill="rgb(242,21,14)" fg:x="8174" fg:w="42"/><text x="65.8803%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (42 samples, 0.34%)</title><rect x="65.7603%" y="405" width="0.3379%" height="15" fill="rgb(222,19,48)" fg:x="8174" fg:w="42"/><text x="65.8803%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (42 samples, 0.34%)</title><rect x="65.7603%" y="389" width="0.3379%" height="15" fill="rgb(232,45,27)" fg:x="8174" fg:w="42"/><text x="65.8803%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_swap (42 samples, 0.34%)</title><rect x="65.7603%" y="373" width="0.3379%" height="15" fill="rgb(249,103,42)" fg:x="8174" fg:w="42"/><text x="65.8803%" y="383.50"></text></g><g><title>tokio::sync::batch_semaphore::Waiter::assign_permits (132 samples, 1.06%)</title><rect x="66.0981%" y="469" width="1.0619%" height="15" fill="rgb(246,81,33)" fg:x="8216" fg:w="132"/><text x="66.2181%" y="479.50">t..</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (106 samples, 0.85%)</title><rect x="66.3073%" y="453" width="0.8528%" height="15" fill="rgb(252,33,42)" fg:x="8242" fg:w="106"/><text x="66.4273%" y="463.50">c..</text></g><g><title>core::sync::atomic::atomic_compare_exchange (106 samples, 0.85%)</title><rect x="66.3073%" y="437" width="0.8528%" height="15" fill="rgb(209,212,41)" fg:x="8242" fg:w="106"/><text x="66.4273%" y="447.50">c..</text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (43 samples, 0.35%)</title><rect x="67.2969%" y="405" width="0.3459%" height="15" fill="rgb(207,154,6)" fg:x="8365" fg:w="43"/><text x="67.4169%" y="415.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (43 samples, 0.35%)</title><rect x="67.2969%" y="389" width="0.3459%" height="15" fill="rgb(223,64,47)" fg:x="8365" fg:w="43"/><text x="67.4169%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (29 samples, 0.23%)</title><rect x="67.4095%" y="373" width="0.2333%" height="15" fill="rgb(211,161,38)" fg:x="8379" fg:w="29"/><text x="67.5295%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_sub (29 samples, 0.23%)</title><rect x="67.4095%" y="357" width="0.2333%" height="15" fill="rgb(219,138,40)" fg:x="8379" fg:w="29"/><text x="67.5295%" y="367.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5 samples, 0.04%)</title><rect x="68.1255%" y="341" width="0.0402%" height="15" fill="rgb(241,228,46)" fg:x="8468" fg:w="5"/><text x="68.2455%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 0.04%)</title><rect x="68.1255%" y="325" width="0.0402%" height="15" fill="rgb(223,209,38)" fg:x="8468" fg:w="5"/><text x="68.2455%" y="335.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="68.2944%" y="325" width="0.0241%" height="15" fill="rgb(236,164,45)" fg:x="8489" fg:w="3"/><text x="68.4144%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (3 samples, 0.02%)</title><rect x="68.2944%" y="309" width="0.0241%" height="15" fill="rgb(231,15,5)" fg:x="8489" fg:w="3"/><text x="68.4144%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3 samples, 0.02%)</title><rect x="68.2944%" y="293" width="0.0241%" height="15" fill="rgb(252,35,15)" fg:x="8489" fg:w="3"/><text x="68.4144%" y="303.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (3 samples, 0.02%)</title><rect x="68.3186%" y="325" width="0.0241%" height="15" fill="rgb(248,181,18)" fg:x="8492" fg:w="3"/><text x="68.4386%" y="335.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (3 samples, 0.02%)</title><rect x="68.3186%" y="309" width="0.0241%" height="15" fill="rgb(233,39,42)" fg:x="8492" fg:w="3"/><text x="68.4386%" y="319.50"></text></g><g><title>core::cell::BorrowRefMut::new (3 samples, 0.02%)</title><rect x="68.3186%" y="293" width="0.0241%" height="15" fill="rgb(238,110,33)" fg:x="8492" fg:w="3"/><text x="68.4386%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (97 samples, 0.78%)</title><rect x="67.6750%" y="389" width="0.7804%" height="15" fill="rgb(233,195,10)" fg:x="8412" fg:w="97"/><text x="67.7950%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (97 samples, 0.78%)</title><rect x="67.6750%" y="373" width="0.7804%" height="15" fill="rgb(254,105,3)" fg:x="8412" fg:w="97"/><text x="67.7950%" y="383.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (94 samples, 0.76%)</title><rect x="67.6991%" y="357" width="0.7562%" height="15" fill="rgb(221,225,9)" fg:x="8415" fg:w="94"/><text x="67.8191%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::{{closure}} (36 samples, 0.29%)</title><rect x="68.1657%" y="341" width="0.2896%" height="15" fill="rgb(224,227,45)" fg:x="8473" fg:w="36"/><text x="68.2857%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (14 samples, 0.11%)</title><rect x="68.3427%" y="325" width="0.1126%" height="15" fill="rgb(229,198,43)" fg:x="8495" fg:w="14"/><text x="68.4627%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked (3 samples, 0.02%)</title><rect x="68.4312%" y="309" width="0.0241%" height="15" fill="rgb(206,209,35)" fg:x="8506" fg:w="3"/><text x="68.5512%" y="319.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (103 samples, 0.83%)</title><rect x="67.6428%" y="405" width="0.8286%" height="15" fill="rgb(245,195,53)" fg:x="8408" fg:w="103"/><text x="67.7628%" y="415.50"></text></g><g><title>tokio::runtime::task::raw::schedule (2 samples, 0.02%)</title><rect x="68.4553%" y="389" width="0.0161%" height="15" fill="rgb(240,92,26)" fg:x="8509" fg:w="2"/><text x="68.5753%" y="399.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::from_raw (2 samples, 0.02%)</title><rect x="68.4553%" y="373" width="0.0161%" height="15" fill="rgb(207,40,23)" fg:x="8509" fg:w="2"/><text x="68.5753%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (32 samples, 0.26%)</title><rect x="68.4714%" y="373" width="0.2574%" height="15" fill="rgb(223,111,35)" fg:x="8511" fg:w="32"/><text x="68.5914%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (32 samples, 0.26%)</title><rect x="68.4714%" y="357" width="0.2574%" height="15" fill="rgb(229,147,28)" fg:x="8511" fg:w="32"/><text x="68.5914%" y="367.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (383 samples, 3.08%)</title><rect x="65.7603%" y="485" width="3.0813%" height="15" fill="rgb(211,29,28)" fg:x="8174" fg:w="383"/><text x="65.8803%" y="495.50">tokio::s..</text></g><g><title>tokio::util::wake_list::WakeList::wake_all (209 samples, 1.68%)</title><rect x="67.1601%" y="469" width="1.6814%" height="15" fill="rgb(228,72,33)" fg:x="8348" fg:w="209"/><text x="67.2801%" y="479.50">tok..</text></g><g><title>core::task::wake::Waker::wake (196 samples, 1.58%)</title><rect x="67.2647%" y="453" width="1.5768%" height="15" fill="rgb(205,214,31)" fg:x="8361" fg:w="196"/><text x="67.3847%" y="463.50">cor..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (195 samples, 1.57%)</title><rect x="67.2727%" y="437" width="1.5688%" height="15" fill="rgb(224,111,15)" fg:x="8362" fg:w="195"/><text x="67.3927%" y="447.50">tok..</text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (195 samples, 1.57%)</title><rect x="67.2727%" y="421" width="1.5688%" height="15" fill="rgb(253,21,26)" fg:x="8362" fg:w="195"/><text x="67.3927%" y="431.50">tok..</text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (46 samples, 0.37%)</title><rect x="68.4714%" y="405" width="0.3701%" height="15" fill="rgb(245,139,43)" fg:x="8511" fg:w="46"/><text x="68.5914%" y="415.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (46 samples, 0.37%)</title><rect x="68.4714%" y="389" width="0.3701%" height="15" fill="rgb(252,170,7)" fg:x="8511" fg:w="46"/><text x="68.5914%" y="399.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val::{{closure}} (14 samples, 0.11%)</title><rect x="68.7289%" y="373" width="0.1126%" height="15" fill="rgb(231,118,14)" fg:x="8543" fg:w="14"/><text x="68.8489%" y="383.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::ref_inc (14 samples, 0.11%)</title><rect x="68.7289%" y="357" width="0.1126%" height="15" fill="rgb(238,83,0)" fg:x="8543" fg:w="14"/><text x="68.8489%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mutex::MutexGuard&lt;alloc::collections::vec_deque::VecDeque&lt;dads_gzip_thing::Line&gt;&gt;&gt; (471 samples, 3.79%)</title><rect x="65.6557%" y="517" width="3.7892%" height="15" fill="rgb(221,39,39)" fg:x="8161" fg:w="471"/><text x="65.7757%" y="527.50">core::ptr::..</text></g><g><title>&lt;tokio::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (471 samples, 3.79%)</title><rect x="65.6557%" y="501" width="3.7892%" height="15" fill="rgb(222,119,46)" fg:x="8161" fg:w="471"/><text x="65.7757%" y="511.50">&lt;tokio::syn..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (75 samples, 0.60%)</title><rect x="68.8415%" y="485" width="0.6034%" height="15" fill="rgb(222,165,49)" fg:x="8557" fg:w="75"/><text x="68.9615%" y="495.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (75 samples, 0.60%)</title><rect x="68.8415%" y="469" width="0.6034%" height="15" fill="rgb(219,113,52)" fg:x="8557" fg:w="75"/><text x="68.9615%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (75 samples, 0.60%)</title><rect x="68.8415%" y="453" width="0.6034%" height="15" fill="rgb(214,7,15)" fg:x="8557" fg:w="75"/><text x="68.9615%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (75 samples, 0.60%)</title><rect x="68.8415%" y="437" width="0.6034%" height="15" fill="rgb(235,32,4)" fg:x="8557" fg:w="75"/><text x="68.9615%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (75 samples, 0.60%)</title><rect x="68.8415%" y="421" width="0.6034%" height="15" fill="rgb(238,90,54)" fg:x="8557" fg:w="75"/><text x="68.9615%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (66 samples, 0.53%)</title><rect x="68.9139%" y="405" width="0.5310%" height="15" fill="rgb(213,208,19)" fg:x="8566" fg:w="66"/><text x="69.0339%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (66 samples, 0.53%)</title><rect x="68.9139%" y="389" width="0.5310%" height="15" fill="rgb(233,156,4)" fg:x="8566" fg:w="66"/><text x="69.0339%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="69.4690%" y="501" width="0.0161%" height="15" fill="rgb(207,194,5)" fg:x="8635" fg:w="2"/><text x="69.5890%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;tokio::sync::broadcast::Slot&lt;dads_gzip_thing::TaskBroadcastMessage&gt;&gt;&gt; (416 samples, 3.35%)</title><rect x="69.4851%" y="485" width="3.3467%" height="15" fill="rgb(206,111,30)" fg:x="8637" fg:w="416"/><text x="69.6051%" y="495.50">core::ptr..</text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (416 samples, 3.35%)</title><rect x="69.4851%" y="469" width="3.3467%" height="15" fill="rgb(243,70,54)" fg:x="8637" fg:w="416"/><text x="69.6051%" y="479.50">&lt;std::syn..</text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (416 samples, 3.35%)</title><rect x="69.4851%" y="453" width="3.3467%" height="15" fill="rgb(242,28,8)" fg:x="8637" fg:w="416"/><text x="69.6051%" y="463.50">std::sys_..</text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (416 samples, 3.35%)</title><rect x="69.4851%" y="437" width="3.3467%" height="15" fill="rgb(219,106,18)" fg:x="8637" fg:w="416"/><text x="69.6051%" y="447.50">std::sys:..</text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (416 samples, 3.35%)</title><rect x="69.4851%" y="421" width="3.3467%" height="15" fill="rgb(244,222,10)" fg:x="8637" fg:w="416"/><text x="69.6051%" y="431.50">core::syn..</text></g><g><title>core::sync::atomic::atomic_sub (416 samples, 3.35%)</title><rect x="69.4851%" y="405" width="3.3467%" height="15" fill="rgb(236,179,52)" fg:x="8637" fg:w="416"/><text x="69.6051%" y="415.50">core::syn..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (101 samples, 0.81%)</title><rect x="72.8319%" y="485" width="0.8126%" height="15" fill="rgb(213,23,39)" fg:x="9053" fg:w="101"/><text x="72.9519%" y="495.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (101 samples, 0.81%)</title><rect x="72.8319%" y="469" width="0.8126%" height="15" fill="rgb(238,48,10)" fg:x="9053" fg:w="101"/><text x="72.9519%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (101 samples, 0.81%)</title><rect x="72.8319%" y="453" width="0.8126%" height="15" fill="rgb(251,196,23)" fg:x="9053" fg:w="101"/><text x="72.9519%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_contended (3 samples, 0.02%)</title><rect x="73.6203%" y="437" width="0.0241%" height="15" fill="rgb(250,152,24)" fg:x="9151" fg:w="3"/><text x="73.7403%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (113 samples, 0.91%)</title><rect x="75.2615%" y="421" width="0.9091%" height="15" fill="rgb(209,150,17)" fg:x="9355" fg:w="113"/><text x="75.3815%" y="431.50">c..</text></g><g><title>core::sync::atomic::atomic_compare_exchange (113 samples, 0.91%)</title><rect x="75.2615%" y="405" width="0.9091%" height="15" fill="rgb(234,202,34)" fg:x="9355" fg:w="113"/><text x="75.3815%" y="415.50">c..</text></g><g><title>core::hint::spin_loop (37 samples, 0.30%)</title><rect x="76.1706%" y="389" width="0.2977%" height="15" fill="rgb(253,148,53)" fg:x="9468" fg:w="37"/><text x="76.2906%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (37 samples, 0.30%)</title><rect x="76.1706%" y="373" width="0.2977%" height="15" fill="rgb(218,129,16)" fg:x="9468" fg:w="37"/><text x="76.2906%" y="383.50"></text></g><g><title>dads_gzip_thing::output_lines::{{closure}} (3,212 samples, 25.84%)</title><rect x="51.1585%" y="533" width="25.8407%" height="15" fill="rgb(216,85,19)" fg:x="6359" fg:w="3212"/><text x="51.2785%" y="543.50">dads_gzip_thing::output_lines::{{closure}}</text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::try_recv (939 samples, 7.55%)</title><rect x="69.4449%" y="517" width="7.5543%" height="15" fill="rgb(235,228,7)" fg:x="8632" fg:w="939"/><text x="69.5649%" y="527.50">tokio::sync::broadcast::..</text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (934 samples, 7.51%)</title><rect x="69.4851%" y="501" width="7.5141%" height="15" fill="rgb(245,175,0)" fg:x="8637" fg:w="934"/><text x="69.6051%" y="511.50">tokio::sync::broadcast::..</text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (417 samples, 3.35%)</title><rect x="73.6444%" y="485" width="3.3548%" height="15" fill="rgb(208,168,36)" fg:x="9154" fg:w="417"/><text x="73.7644%" y="495.50">tokio::lo..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (417 samples, 3.35%)</title><rect x="73.6444%" y="469" width="3.3548%" height="15" fill="rgb(246,171,24)" fg:x="9154" fg:w="417"/><text x="73.7644%" y="479.50">std::sync..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (417 samples, 3.35%)</title><rect x="73.6444%" y="453" width="3.3548%" height="15" fill="rgb(215,142,24)" fg:x="9154" fg:w="417"/><text x="73.7644%" y="463.50">std::sys_..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (417 samples, 3.35%)</title><rect x="73.6444%" y="437" width="3.3548%" height="15" fill="rgb(250,187,7)" fg:x="9154" fg:w="417"/><text x="73.7644%" y="447.50">std::sys:..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (103 samples, 0.83%)</title><rect x="76.1706%" y="421" width="0.8286%" height="15" fill="rgb(228,66,33)" fg:x="9468" fg:w="103"/><text x="76.2906%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (103 samples, 0.83%)</title><rect x="76.1706%" y="405" width="0.8286%" height="15" fill="rgb(234,215,21)" fg:x="9468" fg:w="103"/><text x="76.2906%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (66 samples, 0.53%)</title><rect x="76.4682%" y="389" width="0.5310%" height="15" fill="rgb(222,191,20)" fg:x="9505" fg:w="66"/><text x="76.5882%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (66 samples, 0.53%)</title><rect x="76.4682%" y="373" width="0.5310%" height="15" fill="rgb(245,79,54)" fg:x="9505" fg:w="66"/><text x="76.5882%" y="383.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (81 samples, 0.65%)</title><rect x="77.4658%" y="453" width="0.6516%" height="15" fill="rgb(240,10,37)" fg:x="9629" fg:w="81"/><text x="77.5858%" y="463.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (60 samples, 0.48%)</title><rect x="79.1553%" y="437" width="0.4827%" height="15" fill="rgb(214,192,32)" fg:x="9839" fg:w="60"/><text x="79.2753%" y="447.50"></text></g><g><title>tokio::runtime::context::budget (60 samples, 0.48%)</title><rect x="79.1553%" y="421" width="0.4827%" height="15" fill="rgb(209,36,54)" fg:x="9839" fg:w="60"/><text x="79.2753%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (60 samples, 0.48%)</title><rect x="79.1553%" y="405" width="0.4827%" height="15" fill="rgb(220,10,11)" fg:x="9839" fg:w="60"/><text x="79.2753%" y="415.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (60 samples, 0.48%)</title><rect x="79.1553%" y="389" width="0.4827%" height="15" fill="rgb(221,106,17)" fg:x="9839" fg:w="60"/><text x="79.2753%" y="399.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (60 samples, 0.48%)</title><rect x="79.1553%" y="373" width="0.4827%" height="15" fill="rgb(251,142,44)" fg:x="9839" fg:w="60"/><text x="79.2753%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt; (141 samples, 1.13%)</title><rect x="79.6702%" y="421" width="1.1344%" height="15" fill="rgb(238,13,15)" fg:x="9903" fg:w="141"/><text x="79.7902%" y="431.50">co..</text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (141 samples, 1.13%)</title><rect x="79.6702%" y="405" width="1.1344%" height="15" fill="rgb(208,107,27)" fg:x="9903" fg:w="141"/><text x="79.7902%" y="415.50">&lt;s..</text></g><g><title>std::sync::poison::Flag::done (141 samples, 1.13%)</title><rect x="79.6702%" y="389" width="1.1344%" height="15" fill="rgb(205,136,37)" fg:x="9903" fg:w="141"/><text x="79.7902%" y="399.50">st..</text></g><g><title>std::thread::panicking (141 samples, 1.13%)</title><rect x="79.6702%" y="373" width="1.1344%" height="15" fill="rgb(250,205,27)" fg:x="9903" fg:w="141"/><text x="79.7902%" y="383.50">st..</text></g><g><title>std::panicking::panicking (141 samples, 1.13%)</title><rect x="79.6702%" y="357" width="1.1344%" height="15" fill="rgb(210,80,43)" fg:x="9903" fg:w="141"/><text x="79.7902%" y="367.50">st..</text></g><g><title>std::panicking::panic_count::count_is_zero (141 samples, 1.13%)</title><rect x="79.6702%" y="341" width="1.1344%" height="15" fill="rgb(247,160,36)" fg:x="9903" fg:w="141"/><text x="79.7902%" y="351.50">st..</text></g><g><title>core::sync::atomic::AtomicUsize::load (141 samples, 1.13%)</title><rect x="79.6702%" y="325" width="1.1344%" height="15" fill="rgb(234,13,49)" fg:x="9903" fg:w="141"/><text x="79.7902%" y="335.50">co..</text></g><g><title>core::sync::atomic::atomic_load (141 samples, 1.13%)</title><rect x="79.6702%" y="309" width="1.1344%" height="15" fill="rgb(234,122,0)" fg:x="9903" fg:w="141"/><text x="79.7902%" y="319.50">co..</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (66 samples, 0.53%)</title><rect x="80.8045%" y="421" width="0.5310%" height="15" fill="rgb(207,146,38)" fg:x="10044" fg:w="66"/><text x="80.9245%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (66 samples, 0.53%)</title><rect x="80.8045%" y="405" width="0.5310%" height="15" fill="rgb(207,177,25)" fg:x="10044" fg:w="66"/><text x="80.9245%" y="415.50"></text></g><g><title>core::hint::spin_loop (4 samples, 0.03%)</title><rect x="81.3355%" y="325" width="0.0322%" height="15" fill="rgb(211,178,42)" fg:x="10110" fg:w="4"/><text x="81.4555%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (4 samples, 0.03%)</title><rect x="81.3355%" y="309" width="0.0322%" height="15" fill="rgb(230,69,54)" fg:x="10110" fg:w="4"/><text x="81.4555%" y="319.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (11 samples, 0.09%)</title><rect x="81.3355%" y="421" width="0.0885%" height="15" fill="rgb(214,135,41)" fg:x="10110" fg:w="11"/><text x="81.4555%" y="431.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (11 samples, 0.09%)</title><rect x="81.3355%" y="405" width="0.0885%" height="15" fill="rgb(237,67,25)" fg:x="10110" fg:w="11"/><text x="81.4555%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (11 samples, 0.09%)</title><rect x="81.3355%" y="389" width="0.0885%" height="15" fill="rgb(222,189,50)" fg:x="10110" fg:w="11"/><text x="81.4555%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (11 samples, 0.09%)</title><rect x="81.3355%" y="373" width="0.0885%" height="15" fill="rgb(245,148,34)" fg:x="10110" fg:w="11"/><text x="81.4555%" y="383.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (11 samples, 0.09%)</title><rect x="81.3355%" y="357" width="0.0885%" height="15" fill="rgb(222,29,6)" fg:x="10110" fg:w="11"/><text x="81.4555%" y="367.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (11 samples, 0.09%)</title><rect x="81.3355%" y="341" width="0.0885%" height="15" fill="rgb(221,189,43)" fg:x="10110" fg:w="11"/><text x="81.4555%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (7 samples, 0.06%)</title><rect x="81.3677%" y="325" width="0.0563%" height="15" fill="rgb(207,36,27)" fg:x="10114" fg:w="7"/><text x="81.4877%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_load (7 samples, 0.06%)</title><rect x="81.3677%" y="309" width="0.0563%" height="15" fill="rgb(217,90,24)" fg:x="10114" fg:w="7"/><text x="81.4877%" y="319.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (54 samples, 0.43%)</title><rect x="81.4240%" y="421" width="0.4344%" height="15" fill="rgb(224,66,35)" fg:x="10121" fg:w="54"/><text x="81.5440%" y="431.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire::{{closure}} (54 samples, 0.43%)</title><rect x="81.4240%" y="405" width="0.4344%" height="15" fill="rgb(221,13,50)" fg:x="10121" fg:w="54"/><text x="81.5440%" y="415.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (54 samples, 0.43%)</title><rect x="81.4240%" y="389" width="0.4344%" height="15" fill="rgb(236,68,49)" fg:x="10121" fg:w="54"/><text x="81.5440%" y="399.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (48 samples, 0.39%)</title><rect x="81.4722%" y="373" width="0.3862%" height="15" fill="rgb(229,146,28)" fg:x="10127" fg:w="48"/><text x="81.5922%" y="383.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (48 samples, 0.39%)</title><rect x="81.4722%" y="357" width="0.3862%" height="15" fill="rgb(225,31,38)" fg:x="10127" fg:w="48"/><text x="81.5922%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (30 samples, 0.24%)</title><rect x="81.6171%" y="341" width="0.2414%" height="15" fill="rgb(250,208,3)" fg:x="10145" fg:w="30"/><text x="81.7371%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_add (30 samples, 0.24%)</title><rect x="81.6171%" y="325" width="0.2414%" height="15" fill="rgb(246,54,23)" fg:x="10145" fg:w="30"/><text x="81.7371%" y="335.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (68 samples, 0.55%)</title><rect x="81.8584%" y="421" width="0.5471%" height="15" fill="rgb(243,76,11)" fg:x="10175" fg:w="68"/><text x="81.9784%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt;&gt; (45 samples, 0.36%)</title><rect x="82.0434%" y="405" width="0.3620%" height="15" fill="rgb(245,21,50)" fg:x="10198" fg:w="45"/><text x="82.1634%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt; (45 samples, 0.36%)</title><rect x="82.0434%" y="389" width="0.3620%" height="15" fill="rgb(228,9,43)" fg:x="10198" fg:w="45"/><text x="82.1634%" y="399.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.36%)</title><rect x="82.0434%" y="373" width="0.3620%" height="15" fill="rgb(208,100,47)" fg:x="10198" fg:w="45"/><text x="82.1634%" y="383.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (45 samples, 0.36%)</title><rect x="82.0434%" y="357" width="0.3620%" height="15" fill="rgb(232,26,8)" fg:x="10198" fg:w="45"/><text x="82.1634%" y="367.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (45 samples, 0.36%)</title><rect x="82.0434%" y="341" width="0.3620%" height="15" fill="rgb(216,166,38)" fg:x="10198" fg:w="45"/><text x="82.1634%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (45 samples, 0.36%)</title><rect x="82.0434%" y="325" width="0.3620%" height="15" fill="rgb(251,202,51)" fg:x="10198" fg:w="45"/><text x="82.1634%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_swap (45 samples, 0.36%)</title><rect x="82.0434%" y="309" width="0.3620%" height="15" fill="rgb(254,216,34)" fg:x="10198" fg:w="45"/><text x="82.1634%" y="319.50"></text></g><g><title>tokio::sync::batch_semaphore::Waiter::assign_permits (125 samples, 1.01%)</title><rect x="82.4055%" y="421" width="1.0056%" height="15" fill="rgb(251,32,27)" fg:x="10243" fg:w="125"/><text x="82.5255%" y="431.50">t..</text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (660 samples, 5.31%)</title><rect x="78.1175%" y="453" width="5.3097%" height="15" fill="rgb(208,127,28)" fg:x="9710" fg:w="660"/><text x="78.2375%" y="463.50">&lt;tokio::sync::ba..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire (471 samples, 3.79%)</title><rect x="79.6380%" y="437" width="3.7892%" height="15" fill="rgb(224,137,22)" fg:x="9899" fg:w="471"/><text x="79.7580%" y="447.50">tokio::sync..</text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (2 samples, 0.02%)</title><rect x="83.4111%" y="421" width="0.0161%" height="15" fill="rgb(254,70,32)" fg:x="10368" fg:w="2"/><text x="83.5311%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::batch_semaphore::Acquire&gt; (7 samples, 0.06%)</title><rect x="83.4272%" y="453" width="0.0563%" height="15" fill="rgb(229,75,37)" fg:x="10370" fg:w="7"/><text x="83.5472%" y="463.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="83.4674%" y="437" width="0.0161%" height="15" fill="rgb(252,64,23)" fg:x="10375" fg:w="2"/><text x="83.5874%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (787 samples, 6.33%)</title><rect x="77.1923%" y="517" width="6.3315%" height="15" fill="rgb(232,162,48)" fg:x="9595" fg:w="787"/><text x="77.3123%" y="527.50">&lt;core::future::from_..</text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::lock::{{closure}} (787 samples, 6.33%)</title><rect x="77.1923%" y="501" width="6.3315%" height="15" fill="rgb(246,160,12)" fg:x="9595" fg:w="787"/><text x="77.3123%" y="511.50">tokio::sync::mutex::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (787 samples, 6.33%)</title><rect x="77.1923%" y="485" width="6.3315%" height="15" fill="rgb(247,166,0)" fg:x="9595" fg:w="787"/><text x="77.3123%" y="495.50">&lt;core::future::from_..</text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::acquire::{{closure}} (787 samples, 6.33%)</title><rect x="77.1923%" y="469" width="6.3315%" height="15" fill="rgb(249,219,21)" fg:x="9595" fg:w="787"/><text x="77.3123%" y="479.50">tokio::sync::mutex::..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (5 samples, 0.04%)</title><rect x="83.4835%" y="453" width="0.0402%" height="15" fill="rgb(205,209,3)" fg:x="10377" fg:w="5"/><text x="83.6035%" y="463.50"></text></g><g><title>tokio::sync::batch_semaphore::Acquire::new (5 samples, 0.04%)</title><rect x="83.4835%" y="437" width="0.0402%" height="15" fill="rgb(243,44,1)" fg:x="10377" fg:w="5"/><text x="83.6035%" y="447.50"></text></g><g><title>core::mem::drop (108 samples, 0.87%)</title><rect x="83.9179%" y="469" width="0.8689%" height="15" fill="rgb(206,159,16)" fg:x="10431" fg:w="108"/><text x="84.0379%" y="479.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt; (108 samples, 0.87%)</title><rect x="83.9179%" y="453" width="0.8689%" height="15" fill="rgb(244,77,30)" fg:x="10431" fg:w="108"/><text x="84.0379%" y="463.50">c..</text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 samples, 0.87%)</title><rect x="83.9179%" y="437" width="0.8689%" height="15" fill="rgb(218,69,12)" fg:x="10431" fg:w="108"/><text x="84.0379%" y="447.50">&lt;..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (108 samples, 0.87%)</title><rect x="83.9179%" y="421" width="0.8689%" height="15" fill="rgb(212,87,7)" fg:x="10431" fg:w="108"/><text x="84.0379%" y="431.50">s..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (108 samples, 0.87%)</title><rect x="83.9179%" y="405" width="0.8689%" height="15" fill="rgb(245,114,25)" fg:x="10431" fg:w="108"/><text x="84.0379%" y="415.50">s..</text></g><g><title>core::sync::atomic::AtomicU32::swap (61 samples, 0.49%)</title><rect x="84.2961%" y="389" width="0.4907%" height="15" fill="rgb(210,61,42)" fg:x="10478" fg:w="61"/><text x="84.4161%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_swap (61 samples, 0.49%)</title><rect x="84.2961%" y="373" width="0.4907%" height="15" fill="rgb(211,52,33)" fg:x="10478" fg:w="61"/><text x="84.4161%" y="383.50"></text></g><g><title>tokio::sync::batch_semaphore::Waiter::assign_permits (19 samples, 0.15%)</title><rect x="84.7868%" y="469" width="0.1529%" height="15" fill="rgb(234,58,33)" fg:x="10539" fg:w="19"/><text x="84.9068%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (19 samples, 0.15%)</title><rect x="84.7868%" y="453" width="0.1529%" height="15" fill="rgb(220,115,36)" fg:x="10539" fg:w="19"/><text x="84.9068%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.15%)</title><rect x="84.7868%" y="437" width="0.1529%" height="15" fill="rgb(243,153,54)" fg:x="10539" fg:w="19"/><text x="84.9068%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_add (3 samples, 0.02%)</title><rect x="85.1488%" y="373" width="0.0241%" height="15" fill="rgb(251,47,18)" fg:x="10584" fg:w="3"/><text x="85.2688%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (3 samples, 0.02%)</title><rect x="85.1488%" y="357" width="0.0241%" height="15" fill="rgb(242,102,42)" fg:x="10584" fg:w="3"/><text x="85.2688%" y="367.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (4 samples, 0.03%)</title><rect x="85.1488%" y="421" width="0.0322%" height="15" fill="rgb(234,31,38)" fg:x="10584" fg:w="4"/><text x="85.2688%" y="431.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (4 samples, 0.03%)</title><rect x="85.1488%" y="405" width="0.0322%" height="15" fill="rgb(221,117,51)" fg:x="10584" fg:w="4"/><text x="85.2688%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::notify_one (4 samples, 0.03%)</title><rect x="85.1488%" y="389" width="0.0322%" height="15" fill="rgb(212,20,18)" fg:x="10584" fg:w="4"/><text x="85.2688%" y="399.50"></text></g><g><title>tokio::runtime::park::wake (6 samples, 0.05%)</title><rect x="85.1408%" y="437" width="0.0483%" height="15" fill="rgb(245,133,36)" fg:x="10583" fg:w="6"/><text x="85.2608%" y="447.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (56 samples, 0.45%)</title><rect x="85.1971%" y="405" width="0.4505%" height="15" fill="rgb(212,6,19)" fg:x="10590" fg:w="56"/><text x="85.3171%" y="415.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (56 samples, 0.45%)</title><rect x="85.1971%" y="389" width="0.4505%" height="15" fill="rgb(218,1,36)" fg:x="10590" fg:w="56"/><text x="85.3171%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (42 samples, 0.34%)</title><rect x="85.3097%" y="373" width="0.3379%" height="15" fill="rgb(246,84,54)" fg:x="10604" fg:w="42"/><text x="85.4297%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_sub (42 samples, 0.34%)</title><rect x="85.3097%" y="357" width="0.3379%" height="15" fill="rgb(242,110,6)" fg:x="10604" fg:w="42"/><text x="85.4297%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="85.6959%" y="373" width="0.0161%" height="15" fill="rgb(214,47,5)" fg:x="10652" fg:w="2"/><text x="85.8159%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6 samples, 0.05%)</title><rect x="86.1384%" y="341" width="0.0483%" height="15" fill="rgb(218,159,25)" fg:x="10707" fg:w="6"/><text x="86.2584%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6 samples, 0.05%)</title><rect x="86.1384%" y="325" width="0.0483%" height="15" fill="rgb(215,211,28)" fg:x="10707" fg:w="6"/><text x="86.2584%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::CURRENT::FOO::__getit (3 samples, 0.02%)</title><rect x="86.1625%" y="309" width="0.0241%" height="15" fill="rgb(238,59,32)" fg:x="10710" fg:w="3"/><text x="86.2825%" y="319.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.09%)</title><rect x="86.2188%" y="325" width="0.0885%" height="15" fill="rgb(226,82,3)" fg:x="10717" fg:w="11"/><text x="86.3388%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (11 samples, 0.09%)</title><rect x="86.2188%" y="309" width="0.0885%" height="15" fill="rgb(240,164,32)" fg:x="10717" fg:w="11"/><text x="86.3388%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (11 samples, 0.09%)</title><rect x="86.2188%" y="293" width="0.0885%" height="15" fill="rgb(232,46,7)" fg:x="10717" fg:w="11"/><text x="86.3388%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked (10 samples, 0.08%)</title><rect x="86.3073%" y="325" width="0.0805%" height="15" fill="rgb(229,129,53)" fg:x="10728" fg:w="10"/><text x="86.4273%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (106 samples, 0.85%)</title><rect x="85.6798%" y="389" width="0.8528%" height="15" fill="rgb(234,188,29)" fg:x="10650" fg:w="106"/><text x="85.7998%" y="399.50">t..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (102 samples, 0.82%)</title><rect x="85.7120%" y="373" width="0.8206%" height="15" fill="rgb(246,141,4)" fg:x="10654" fg:w="102"/><text x="85.8320%" y="383.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (100 samples, 0.80%)</title><rect x="85.7281%" y="357" width="0.8045%" height="15" fill="rgb(229,23,39)" fg:x="10656" fg:w="100"/><text x="85.8481%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::{{closure}} (43 samples, 0.35%)</title><rect x="86.1866%" y="341" width="0.3459%" height="15" fill="rgb(206,12,3)" fg:x="10713" fg:w="43"/><text x="86.3066%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (18 samples, 0.14%)</title><rect x="86.3878%" y="325" width="0.1448%" height="15" fill="rgb(252,226,20)" fg:x="10738" fg:w="18"/><text x="86.5078%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked (5 samples, 0.04%)</title><rect x="86.4924%" y="309" width="0.0402%" height="15" fill="rgb(216,123,35)" fg:x="10751" fg:w="5"/><text x="86.6124%" y="319.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::from_raw (4 samples, 0.03%)</title><rect x="86.5326%" y="373" width="0.0322%" height="15" fill="rgb(212,68,40)" fg:x="10756" fg:w="4"/><text x="86.6526%" y="383.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (115 samples, 0.93%)</title><rect x="85.6476%" y="405" width="0.9252%" height="15" fill="rgb(254,125,32)" fg:x="10646" fg:w="115"/><text x="85.7676%" y="415.50">t..</text></g><g><title>tokio::runtime::task::raw::schedule (5 samples, 0.04%)</title><rect x="86.5326%" y="389" width="0.0402%" height="15" fill="rgb(253,97,22)" fg:x="10756" fg:w="5"/><text x="86.6526%" y="399.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (438 samples, 3.52%)</title><rect x="83.5398%" y="485" width="3.5237%" height="15" fill="rgb(241,101,14)" fg:x="10384" fg:w="438"/><text x="83.6598%" y="495.50">tokio::syn..</text></g><g><title>tokio::util::wake_list::WakeList::wake_all (264 samples, 2.12%)</title><rect x="84.9397%" y="469" width="2.1239%" height="15" fill="rgb(238,103,29)" fg:x="10558" fg:w="264"/><text x="85.0597%" y="479.50">tokio..</text></g><g><title>core::task::wake::Waker::wake (240 samples, 1.93%)</title><rect x="85.1327%" y="453" width="1.9308%" height="15" fill="rgb(233,195,47)" fg:x="10582" fg:w="240"/><text x="85.2527%" y="463.50">core..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (233 samples, 1.87%)</title><rect x="85.1891%" y="437" width="1.8745%" height="15" fill="rgb(246,218,30)" fg:x="10589" fg:w="233"/><text x="85.3091%" y="447.50">toki..</text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (233 samples, 1.87%)</title><rect x="85.1891%" y="421" width="1.8745%" height="15" fill="rgb(219,145,47)" fg:x="10589" fg:w="233"/><text x="85.3091%" y="431.50">toki..</text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (61 samples, 0.49%)</title><rect x="86.5728%" y="405" width="0.4907%" height="15" fill="rgb(243,12,26)" fg:x="10761" fg:w="61"/><text x="86.6928%" y="415.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (61 samples, 0.49%)</title><rect x="86.5728%" y="389" width="0.4907%" height="15" fill="rgb(214,87,16)" fg:x="10761" fg:w="61"/><text x="86.6928%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (61 samples, 0.49%)</title><rect x="86.5728%" y="373" width="0.4907%" height="15" fill="rgb(208,99,42)" fg:x="10761" fg:w="61"/><text x="86.6928%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (61 samples, 0.49%)</title><rect x="86.5728%" y="357" width="0.4907%" height="15" fill="rgb(253,99,2)" fg:x="10761" fg:w="61"/><text x="86.6928%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mutex::MutexGuard&lt;alloc::collections::vec_deque::VecDeque&lt;alloc::string::String&gt;&gt;&gt; (510 samples, 4.10%)</title><rect x="83.5237%" y="517" width="4.1030%" height="15" fill="rgb(220,168,23)" fg:x="10382" fg:w="510"/><text x="83.6437%" y="527.50">core::ptr::d..</text></g><g><title>&lt;tokio::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (510 samples, 4.10%)</title><rect x="83.5237%" y="501" width="4.1030%" height="15" fill="rgb(242,38,24)" fg:x="10382" fg:w="510"/><text x="83.6437%" y="511.50">&lt;tokio::sync..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (70 samples, 0.56%)</title><rect x="87.0636%" y="485" width="0.5632%" height="15" fill="rgb(225,182,9)" fg:x="10822" fg:w="70"/><text x="87.1836%" y="495.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (58 samples, 0.47%)</title><rect x="87.1601%" y="469" width="0.4666%" height="15" fill="rgb(243,178,37)" fg:x="10834" fg:w="58"/><text x="87.2801%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (58 samples, 0.47%)</title><rect x="87.1601%" y="453" width="0.4666%" height="15" fill="rgb(232,139,19)" fg:x="10834" fg:w="58"/><text x="87.2801%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (58 samples, 0.47%)</title><rect x="87.1601%" y="437" width="0.4666%" height="15" fill="rgb(225,201,24)" fg:x="10834" fg:w="58"/><text x="87.2801%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (58 samples, 0.47%)</title><rect x="87.1601%" y="421" width="0.4666%" height="15" fill="rgb(221,47,46)" fg:x="10834" fg:w="58"/><text x="87.2801%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (58 samples, 0.47%)</title><rect x="87.1601%" y="405" width="0.4666%" height="15" fill="rgb(249,23,13)" fg:x="10834" fg:w="58"/><text x="87.2801%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (58 samples, 0.47%)</title><rect x="87.1601%" y="389" width="0.4666%" height="15" fill="rgb(219,9,5)" fg:x="10834" fg:w="58"/><text x="87.2801%" y="399.50"></text></g><g><title>alloc::fmt::format (7 samples, 0.06%)</title><rect x="87.6267%" y="501" width="0.0563%" height="15" fill="rgb(254,171,16)" fg:x="10892" fg:w="7"/><text x="87.7467%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (7 samples, 0.06%)</title><rect x="87.6267%" y="485" width="0.0563%" height="15" fill="rgb(230,171,20)" fg:x="10892" fg:w="7"/><text x="87.7467%" y="495.50"></text></g><g><title>alloc::fmt::format::{{closure}} (7 samples, 0.06%)</title><rect x="87.6267%" y="469" width="0.0563%" height="15" fill="rgb(210,71,41)" fg:x="10892" fg:w="7"/><text x="87.7467%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (7 samples, 0.06%)</title><rect x="87.6267%" y="453" width="0.0563%" height="15" fill="rgb(206,173,20)" fg:x="10892" fg:w="7"/><text x="87.7467%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (7 samples, 0.06%)</title><rect x="87.6267%" y="437" width="0.0563%" height="15" fill="rgb(233,88,34)" fg:x="10892" fg:w="7"/><text x="87.7467%" y="447.50"></text></g><g><title>core::fmt::write (6 samples, 0.05%)</title><rect x="87.6348%" y="421" width="0.0483%" height="15" fill="rgb(223,209,46)" fg:x="10893" fg:w="6"/><text x="87.7548%" y="431.50"></text></g><g><title>&lt;chrono::naive::date::NaiveDate as core::fmt::Debug&gt;::fmt (5 samples, 0.04%)</title><rect x="87.6428%" y="405" width="0.0402%" height="15" fill="rgb(250,43,18)" fg:x="10894" fg:w="5"/><text x="87.7628%" y="415.50"></text></g><g><title>chrono::format::write_hundreds (4 samples, 0.03%)</title><rect x="87.6508%" y="389" width="0.0322%" height="15" fill="rgb(208,13,10)" fg:x="10895" fg:w="4"/><text x="87.7708%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (3 samples, 0.02%)</title><rect x="87.6589%" y="373" width="0.0241%" height="15" fill="rgb(212,200,36)" fg:x="10896" fg:w="3"/><text x="87.7789%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (3 samples, 0.02%)</title><rect x="87.6589%" y="357" width="0.0241%" height="15" fill="rgb(225,90,30)" fg:x="10896" fg:w="3"/><text x="87.7789%" y="367.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (12 samples, 0.10%)</title><rect x="87.7393%" y="389" width="0.0965%" height="15" fill="rgb(236,182,39)" fg:x="10906" fg:w="12"/><text x="87.8593%" y="399.50"></text></g><g><title>&lt;dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::LineInfo&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (12 samples, 0.10%)</title><rect x="87.7393%" y="373" width="0.0965%" height="15" fill="rgb(212,144,35)" fg:x="10906" fg:w="12"/><text x="87.8593%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (12 samples, 0.10%)</title><rect x="87.7393%" y="357" width="0.0965%" height="15" fill="rgb(228,63,44)" fg:x="10906" fg:w="12"/><text x="87.8593%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.10%)</title><rect x="87.7393%" y="341" width="0.0965%" height="15" fill="rgb(228,109,6)" fg:x="10906" fg:w="12"/><text x="87.8593%" y="351.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (11 samples, 0.09%)</title><rect x="87.7474%" y="325" width="0.0885%" height="15" fill="rgb(238,117,24)" fg:x="10907" fg:w="11"/><text x="87.8674%" y="335.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (11 samples, 0.09%)</title><rect x="87.7474%" y="309" width="0.0885%" height="15" fill="rgb(242,26,26)" fg:x="10907" fg:w="11"/><text x="87.8674%" y="319.50"></text></g><g><title>serde::de::MapAccess::next_key (14 samples, 0.11%)</title><rect x="87.7393%" y="421" width="0.1126%" height="15" fill="rgb(221,92,48)" fg:x="10906" fg:w="14"/><text x="87.8593%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (14 samples, 0.11%)</title><rect x="87.7393%" y="405" width="0.1126%" height="15" fill="rgb(209,209,32)" fg:x="10906" fg:w="14"/><text x="87.8593%" y="415.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (2 samples, 0.02%)</title><rect x="87.8359%" y="389" width="0.0161%" height="15" fill="rgb(221,70,22)" fg:x="10918" fg:w="2"/><text x="87.9559%" y="399.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (2 samples, 0.02%)</title><rect x="87.8359%" y="373" width="0.0161%" height="15" fill="rgb(248,145,5)" fg:x="10918" fg:w="2"/><text x="87.9559%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (2 samples, 0.02%)</title><rect x="87.8359%" y="357" width="0.0161%" height="15" fill="rgb(226,116,26)" fg:x="10918" fg:w="2"/><text x="87.9559%" y="367.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (2 samples, 0.02%)</title><rect x="87.8359%" y="341" width="0.0161%" height="15" fill="rgb(244,5,17)" fg:x="10918" fg:w="2"/><text x="87.9559%" y="351.50"></text></g><g><title>chrono::format::parse::parse (4 samples, 0.03%)</title><rect x="87.8600%" y="293" width="0.0322%" height="15" fill="rgb(252,159,33)" fg:x="10921" fg:w="4"/><text x="87.9800%" y="303.50"></text></g><g><title>chrono::format::parse::parse_internal (4 samples, 0.03%)</title><rect x="87.8600%" y="277" width="0.0322%" height="15" fill="rgb(206,71,0)" fg:x="10921" fg:w="4"/><text x="87.9800%" y="287.50"></text></g><g><title>chrono::format::parse::parse_rfc3339 (3 samples, 0.02%)</title><rect x="87.8681%" y="261" width="0.0241%" height="15" fill="rgb(233,118,54)" fg:x="10922" fg:w="3"/><text x="87.9881%" y="271.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_datetime_with_offset (3 samples, 0.02%)</title><rect x="87.9163%" y="277" width="0.0241%" height="15" fill="rgb(234,83,48)" fg:x="10928" fg:w="3"/><text x="88.0363%" y="287.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date (2 samples, 0.02%)</title><rect x="87.9244%" y="261" width="0.0161%" height="15" fill="rgb(228,3,54)" fg:x="10929" fg:w="2"/><text x="88.0444%" y="271.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date::{{closure}} (2 samples, 0.02%)</title><rect x="87.9244%" y="245" width="0.0161%" height="15" fill="rgb(226,155,13)" fg:x="10929" fg:w="2"/><text x="88.0444%" y="255.50"></text></g><g><title>&lt;&lt;dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::LineInfo&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map::__DeserializeWith as serde::de::Deserialize&gt;::deserialize (13 samples, 0.10%)</title><rect x="87.8520%" y="373" width="0.1046%" height="15" fill="rgb(241,28,37)" fg:x="10920" fg:w="13"/><text x="87.9720%" y="383.50"></text></g><g><title>dads_gzip_thing::parse_timestamp (13 samples, 0.10%)</title><rect x="87.8520%" y="357" width="0.1046%" height="15" fill="rgb(233,93,10)" fg:x="10920" fg:w="13"/><text x="87.9720%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (13 samples, 0.10%)</title><rect x="87.8520%" y="341" width="0.1046%" height="15" fill="rgb(225,113,19)" fg:x="10920" fg:w="13"/><text x="87.9720%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (13 samples, 0.10%)</title><rect x="87.8520%" y="325" width="0.1046%" height="15" fill="rgb(241,2,18)" fg:x="10920" fg:w="13"/><text x="87.9720%" y="335.50"></text></g><g><title>chrono::datetime::DateTime&lt;chrono::offset::fixed::FixedOffset&gt;::parse_from_rfc3339 (12 samples, 0.10%)</title><rect x="87.8600%" y="309" width="0.0965%" height="15" fill="rgb(228,207,21)" fg:x="10921" fg:w="12"/><text x="87.9800%" y="319.50"></text></g><g><title>chrono::format::parsed::Parsed::to_datetime (7 samples, 0.06%)</title><rect x="87.9002%" y="293" width="0.0563%" height="15" fill="rgb(213,211,35)" fg:x="10926" fg:w="7"/><text x="88.0202%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.02%)</title><rect x="87.9887%" y="325" width="0.0161%" height="15" fill="rgb(209,83,10)" fg:x="10937" fg:w="2"/><text x="88.1087%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.02%)</title><rect x="87.9887%" y="309" width="0.0161%" height="15" fill="rgb(209,164,1)" fg:x="10937" fg:w="2"/><text x="88.1087%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.02%)</title><rect x="87.9887%" y="293" width="0.0161%" height="15" fill="rgb(213,184,43)" fg:x="10937" fg:w="2"/><text x="88.1087%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.02%)</title><rect x="87.9887%" y="277" width="0.0161%" height="15" fill="rgb(231,61,34)" fg:x="10937" fg:w="2"/><text x="88.1087%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2 samples, 0.02%)</title><rect x="87.9887%" y="261" width="0.0161%" height="15" fill="rgb(235,75,3)" fg:x="10937" fg:w="2"/><text x="88.1087%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (2 samples, 0.02%)</title><rect x="87.9887%" y="245" width="0.0161%" height="15" fill="rgb(220,106,47)" fg:x="10937" fg:w="2"/><text x="88.1087%" y="255.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="87.9887%" y="229" width="0.0161%" height="15" fill="rgb(210,196,33)" fg:x="10937" fg:w="2"/><text x="88.1087%" y="239.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (65 samples, 0.52%)</title><rect x="88.0048%" y="325" width="0.5229%" height="15" fill="rgb(229,154,42)" fg:x="10939" fg:w="65"/><text x="88.1248%" y="335.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::ignore_integer (4 samples, 0.03%)</title><rect x="88.5278%" y="325" width="0.0322%" height="15" fill="rgb(228,114,26)" fg:x="11004" fg:w="4"/><text x="88.6478%" y="335.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (4 samples, 0.03%)</title><rect x="88.5278%" y="309" width="0.0322%" height="15" fill="rgb(208,144,1)" fg:x="11004" fg:w="4"/><text x="88.6478%" y="319.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (4 samples, 0.03%)</title><rect x="88.5278%" y="293" width="0.0322%" height="15" fill="rgb(239,112,37)" fg:x="11004" fg:w="4"/><text x="88.6478%" y="303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (4 samples, 0.03%)</title><rect x="88.5278%" y="277" width="0.0322%" height="15" fill="rgb(210,96,50)" fg:x="11004" fg:w="4"/><text x="88.6478%" y="287.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (4 samples, 0.03%)</title><rect x="88.5278%" y="261" width="0.0322%" height="15" fill="rgb(222,178,2)" fg:x="11004" fg:w="4"/><text x="88.6478%" y="271.50"></text></g><g><title>&lt;serde::de::ignored_any::IgnoredAny as serde::de::Deserialize&gt;::deserialize (83 samples, 0.67%)</title><rect x="87.9566%" y="373" width="0.6677%" height="15" fill="rgb(226,74,18)" fg:x="10933" fg:w="83"/><text x="88.0766%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_ignored_any (83 samples, 0.67%)</title><rect x="87.9566%" y="357" width="0.6677%" height="15" fill="rgb(225,67,54)" fg:x="10933" fg:w="83"/><text x="88.0766%" y="367.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::ignore_value (83 samples, 0.67%)</title><rect x="87.9566%" y="341" width="0.6677%" height="15" fill="rgb(251,92,32)" fg:x="10933" fg:w="83"/><text x="88.0766%" y="351.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (8 samples, 0.06%)</title><rect x="88.5599%" y="325" width="0.0644%" height="15" fill="rgb(228,149,22)" fg:x="11008" fg:w="8"/><text x="88.6799%" y="335.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (8 samples, 0.06%)</title><rect x="88.5599%" y="309" width="0.0644%" height="15" fill="rgb(243,54,13)" fg:x="11008" fg:w="8"/><text x="88.6799%" y="319.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (8 samples, 0.06%)</title><rect x="88.5599%" y="293" width="0.0644%" height="15" fill="rgb(243,180,28)" fg:x="11008" fg:w="8"/><text x="88.6799%" y="303.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (8 samples, 0.06%)</title><rect x="88.5599%" y="277" width="0.0644%" height="15" fill="rgb(208,167,24)" fg:x="11008" fg:w="8"/><text x="88.6799%" y="287.50"></text></g><g><title>serde::de::MapAccess::next_key (8 samples, 0.06%)</title><rect x="88.6404%" y="325" width="0.0644%" height="15" fill="rgb(245,73,45)" fg:x="11018" fg:w="8"/><text x="88.7604%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (8 samples, 0.06%)</title><rect x="88.6404%" y="309" width="0.0644%" height="15" fill="rgb(237,203,48)" fg:x="11018" fg:w="8"/><text x="88.7604%" y="319.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.05%)</title><rect x="88.6565%" y="293" width="0.0483%" height="15" fill="rgb(211,197,16)" fg:x="11020" fg:w="6"/><text x="88.7765%" y="303.50"></text></g><g><title>&lt;dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::Meta&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (6 samples, 0.05%)</title><rect x="88.6565%" y="277" width="0.0483%" height="15" fill="rgb(243,99,51)" fg:x="11020" fg:w="6"/><text x="88.7765%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (6 samples, 0.05%)</title><rect x="88.6565%" y="261" width="0.0483%" height="15" fill="rgb(215,123,29)" fg:x="11020" fg:w="6"/><text x="88.7765%" y="271.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.05%)</title><rect x="88.6565%" y="245" width="0.0483%" height="15" fill="rgb(239,186,37)" fg:x="11020" fg:w="6"/><text x="88.7765%" y="255.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (6 samples, 0.05%)</title><rect x="88.6565%" y="229" width="0.0483%" height="15" fill="rgb(252,136,39)" fg:x="11020" fg:w="6"/><text x="88.7765%" y="239.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (6 samples, 0.05%)</title><rect x="88.6565%" y="213" width="0.0483%" height="15" fill="rgb(223,213,32)" fg:x="11020" fg:w="6"/><text x="88.7765%" y="223.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (2 samples, 0.02%)</title><rect x="88.7128%" y="229" width="0.0161%" height="15" fill="rgb(233,115,5)" fg:x="11027" fg:w="2"/><text x="88.8328%" y="239.50"></text></g><g><title>&lt;serde::de::ignored_any::IgnoredAny as serde::de::Deserialize&gt;::deserialize (3 samples, 0.02%)</title><rect x="88.7128%" y="277" width="0.0241%" height="15" fill="rgb(207,226,44)" fg:x="11027" fg:w="3"/><text x="88.8328%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_ignored_any (3 samples, 0.02%)</title><rect x="88.7128%" y="261" width="0.0241%" height="15" fill="rgb(208,126,0)" fg:x="11027" fg:w="3"/><text x="88.8328%" y="271.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::ignore_value (3 samples, 0.02%)</title><rect x="88.7128%" y="245" width="0.0241%" height="15" fill="rgb(244,66,21)" fg:x="11027" fg:w="3"/><text x="88.8328%" y="255.50"></text></g><g><title>dads_gzip_thing::get_key (139 samples, 1.12%)</title><rect x="87.6267%" y="517" width="1.1183%" height="15" fill="rgb(222,97,12)" fg:x="10892" fg:w="139"/><text x="87.7467%" y="527.50">d..</text></g><g><title>serde_json::de::from_str (132 samples, 1.06%)</title><rect x="87.6830%" y="501" width="1.0619%" height="15" fill="rgb(219,213,19)" fg:x="10899" fg:w="132"/><text x="87.8030%" y="511.50">s..</text></g><g><title>serde_json::de::from_trait (132 samples, 1.06%)</title><rect x="87.6830%" y="485" width="1.0619%" height="15" fill="rgb(252,169,30)" fg:x="10899" fg:w="132"/><text x="87.8030%" y="495.50">s..</text></g><g><title>dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::LineInfo&gt;::deserialize (132 samples, 1.06%)</title><rect x="87.6830%" y="469" width="1.0619%" height="15" fill="rgb(206,32,51)" fg:x="10899" fg:w="132"/><text x="87.8030%" y="479.50">d..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (132 samples, 1.06%)</title><rect x="87.6830%" y="453" width="1.0619%" height="15" fill="rgb(250,172,42)" fg:x="10899" fg:w="132"/><text x="87.8030%" y="463.50">&lt;..</text></g><g><title>&lt;dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::LineInfo&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (132 samples, 1.06%)</title><rect x="87.6830%" y="437" width="1.0619%" height="15" fill="rgb(209,34,43)" fg:x="10899" fg:w="132"/><text x="87.8030%" y="447.50">&lt;..</text></g><g><title>serde::de::MapAccess::next_value (111 samples, 0.89%)</title><rect x="87.8520%" y="421" width="0.8930%" height="15" fill="rgb(223,11,35)" fg:x="10920" fg:w="111"/><text x="87.9720%" y="431.50">s..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (111 samples, 0.89%)</title><rect x="87.8520%" y="405" width="0.8930%" height="15" fill="rgb(251,219,26)" fg:x="10920" fg:w="111"/><text x="87.9720%" y="415.50">&lt;..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (111 samples, 0.89%)</title><rect x="87.8520%" y="389" width="0.8930%" height="15" fill="rgb(231,119,3)" fg:x="10920" fg:w="111"/><text x="87.9720%" y="399.50">&lt;..</text></g><g><title>dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::Meta&gt;::deserialize (15 samples, 0.12%)</title><rect x="88.6243%" y="373" width="0.1207%" height="15" fill="rgb(216,97,11)" fg:x="11016" fg:w="15"/><text x="88.7443%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (15 samples, 0.12%)</title><rect x="88.6243%" y="357" width="0.1207%" height="15" fill="rgb(223,59,9)" fg:x="11016" fg:w="15"/><text x="88.7443%" y="367.50"></text></g><g><title>&lt;dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::Meta&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (15 samples, 0.12%)</title><rect x="88.6243%" y="341" width="0.1207%" height="15" fill="rgb(233,93,31)" fg:x="11016" fg:w="15"/><text x="88.7443%" y="351.50"></text></g><g><title>serde::de::MapAccess::next_value (5 samples, 0.04%)</title><rect x="88.7047%" y="325" width="0.0402%" height="15" fill="rgb(239,81,33)" fg:x="11026" fg:w="5"/><text x="88.8247%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (4 samples, 0.03%)</title><rect x="88.7128%" y="309" width="0.0322%" height="15" fill="rgb(213,120,34)" fg:x="11027" fg:w="4"/><text x="88.8328%" y="319.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.03%)</title><rect x="88.7128%" y="293" width="0.0322%" height="15" fill="rgb(243,49,53)" fg:x="11027" fg:w="4"/><text x="88.8328%" y="303.50"></text></g><g><title>dads_gzip_thing::output_key_to_path (2 samples, 0.02%)</title><rect x="88.7450%" y="517" width="0.0161%" height="15" fill="rgb(247,216,33)" fg:x="11031" fg:w="2"/><text x="88.8650%" y="527.50"></text></g><g><title>std::path::PathBuf::set_extension (2 samples, 0.02%)</title><rect x="88.7450%" y="501" width="0.0161%" height="15" fill="rgb(226,26,14)" fg:x="11031" fg:w="2"/><text x="88.8650%" y="511.50"></text></g><g><title>std::path::PathBuf::_set_extension (2 samples, 0.02%)</title><rect x="88.7450%" y="485" width="0.0161%" height="15" fill="rgb(215,49,53)" fg:x="11031" fg:w="2"/><text x="88.8650%" y="495.50"></text></g><g><title>std::path::Path::file_stem (2 samples, 0.02%)</title><rect x="88.7450%" y="469" width="0.0161%" height="15" fill="rgb(245,162,40)" fg:x="11031" fg:w="2"/><text x="88.8650%" y="479.50"></text></g><g><title>std::path::Path::file_name (2 samples, 0.02%)</title><rect x="88.7450%" y="453" width="0.0161%" height="15" fill="rgb(229,68,17)" fg:x="11031" fg:w="2"/><text x="88.8650%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;tokio::sync::broadcast::Slot&lt;dads_gzip_thing::TaskBroadcastMessage&gt;&gt;&gt; (118 samples, 0.95%)</title><rect x="92.5181%" y="485" width="0.9493%" height="15" fill="rgb(213,182,10)" fg:x="11500" fg:w="118"/><text x="92.6381%" y="495.50">c..</text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (118 samples, 0.95%)</title><rect x="92.5181%" y="469" width="0.9493%" height="15" fill="rgb(245,125,30)" fg:x="11500" fg:w="118"/><text x="92.6381%" y="479.50">&lt;..</text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (118 samples, 0.95%)</title><rect x="92.5181%" y="453" width="0.9493%" height="15" fill="rgb(232,202,2)" fg:x="11500" fg:w="118"/><text x="92.6381%" y="463.50">s..</text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (118 samples, 0.95%)</title><rect x="92.5181%" y="437" width="0.9493%" height="15" fill="rgb(237,140,51)" fg:x="11500" fg:w="118"/><text x="92.6381%" y="447.50">s..</text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (130 samples, 1.05%)</title><rect x="93.4674%" y="437" width="1.0459%" height="15" fill="rgb(236,157,25)" fg:x="11618" fg:w="130"/><text x="93.5874%" y="447.50">c..</text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (130 samples, 1.05%)</title><rect x="93.4674%" y="421" width="1.0459%" height="15" fill="rgb(219,209,0)" fg:x="11618" fg:w="130"/><text x="93.5874%" y="431.50">c..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (134 samples, 1.08%)</title><rect x="93.4674%" y="485" width="1.0780%" height="15" fill="rgb(240,116,54)" fg:x="11618" fg:w="134"/><text x="93.5874%" y="495.50">s..</text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (134 samples, 1.08%)</title><rect x="93.4674%" y="469" width="1.0780%" height="15" fill="rgb(216,10,36)" fg:x="11618" fg:w="134"/><text x="93.5874%" y="479.50">s..</text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (134 samples, 1.08%)</title><rect x="93.4674%" y="453" width="1.0780%" height="15" fill="rgb(222,72,44)" fg:x="11618" fg:w="134"/><text x="93.5874%" y="463.50">s..</text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_contended (4 samples, 0.03%)</title><rect x="94.5133%" y="437" width="0.0322%" height="15" fill="rgb(232,159,9)" fg:x="11748" fg:w="4"/><text x="94.6333%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (2 samples, 0.02%)</title><rect x="94.5294%" y="421" width="0.0161%" height="15" fill="rgb(210,39,32)" fg:x="11750" fg:w="2"/><text x="94.6494%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.02%)</title><rect x="94.5294%" y="405" width="0.0161%" height="15" fill="rgb(216,194,45)" fg:x="11750" fg:w="2"/><text x="94.6494%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (232 samples, 1.87%)</title><rect x="94.6018%" y="421" width="1.8665%" height="15" fill="rgb(218,18,35)" fg:x="11759" fg:w="232"/><text x="94.7218%" y="431.50">core..</text></g><g><title>core::sync::atomic::atomic_compare_exchange (232 samples, 1.87%)</title><rect x="94.6018%" y="405" width="1.8665%" height="15" fill="rgb(207,83,51)" fg:x="11759" fg:w="232"/><text x="94.7218%" y="415.50">core..</text></g><g><title>core::hint::spin_loop (63 samples, 0.51%)</title><rect x="96.4682%" y="389" width="0.5068%" height="15" fill="rgb(225,63,43)" fg:x="11991" fg:w="63"/><text x="96.5882%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (63 samples, 0.51%)</title><rect x="96.4682%" y="373" width="0.5068%" height="15" fill="rgb(207,57,36)" fg:x="11991" fg:w="63"/><text x="96.5882%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,767 samples, 46.40%)</title><rect x="51.1102%" y="549" width="46.3958%" height="15" fill="rgb(216,99,33)" fg:x="6353" fg:w="5767"/><text x="51.2302%" y="559.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>dads_gzip_thing::process_lines::{{closure}} (2,549 samples, 20.51%)</title><rect x="76.9992%" y="533" width="20.5068%" height="15" fill="rgb(225,42,16)" fg:x="9571" fg:w="2549"/><text x="77.1192%" y="543.50">dads_gzip_thing::process_lines::{{closure}}</text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::try_recv (1,087 samples, 8.74%)</title><rect x="88.7611%" y="517" width="8.7450%" height="15" fill="rgb(220,201,45)" fg:x="11033" fg:w="1087"/><text x="88.8811%" y="527.50">tokio::sync::broadcast::Rece..</text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (1,084 samples, 8.72%)</title><rect x="88.7852%" y="501" width="8.7208%" height="15" fill="rgb(225,33,4)" fg:x="11036" fg:w="1084"/><text x="88.9052%" y="511.50">tokio::sync::broadcast::Rece..</text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (368 samples, 2.96%)</title><rect x="94.5455%" y="485" width="2.9606%" height="15" fill="rgb(224,33,50)" fg:x="11752" fg:w="368"/><text x="94.6655%" y="495.50">tokio::l..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (368 samples, 2.96%)</title><rect x="94.5455%" y="469" width="2.9606%" height="15" fill="rgb(246,198,51)" fg:x="11752" fg:w="368"/><text x="94.6655%" y="479.50">std::syn..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (368 samples, 2.96%)</title><rect x="94.5455%" y="453" width="2.9606%" height="15" fill="rgb(205,22,4)" fg:x="11752" fg:w="368"/><text x="94.6655%" y="463.50">std::sys..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (368 samples, 2.96%)</title><rect x="94.5455%" y="437" width="2.9606%" height="15" fill="rgb(206,3,8)" fg:x="11752" fg:w="368"/><text x="94.6655%" y="447.50">std::sys..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (129 samples, 1.04%)</title><rect x="96.4682%" y="421" width="1.0378%" height="15" fill="rgb(251,23,15)" fg:x="11991" fg:w="129"/><text x="96.5882%" y="431.50">s..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (129 samples, 1.04%)</title><rect x="96.4682%" y="405" width="1.0378%" height="15" fill="rgb(252,88,28)" fg:x="11991" fg:w="129"/><text x="96.5882%" y="415.50">s..</text></g><g><title>core::sync::atomic::AtomicU32::load (66 samples, 0.53%)</title><rect x="96.9751%" y="389" width="0.5310%" height="15" fill="rgb(212,127,14)" fg:x="12054" fg:w="66"/><text x="97.0951%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (66 samples, 0.53%)</title><rect x="96.9751%" y="373" width="0.5310%" height="15" fill="rgb(247,145,37)" fg:x="12054" fg:w="66"/><text x="97.0951%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::TaskIdGuard&gt; (13 samples, 0.10%)</title><rect x="97.5060%" y="549" width="0.1046%" height="15" fill="rgb(209,117,53)" fg:x="12120" fg:w="13"/><text x="97.6260%" y="559.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (11 samples, 0.09%)</title><rect x="97.5221%" y="533" width="0.0885%" height="15" fill="rgb(212,90,42)" fg:x="12122" fg:w="11"/><text x="97.6421%" y="543.50"></text></g><g><title>tokio::runtime::context::set_current_task_id (4 samples, 0.03%)</title><rect x="97.5784%" y="517" width="0.0322%" height="15" fill="rgb(218,164,37)" fg:x="12129" fg:w="4"/><text x="97.6984%" y="527.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.03%)</title><rect x="97.5784%" y="501" width="0.0322%" height="15" fill="rgb(246,65,34)" fg:x="12129" fg:w="4"/><text x="97.6984%" y="511.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (2 samples, 0.02%)</title><rect x="97.5945%" y="485" width="0.0161%" height="15" fill="rgb(231,100,33)" fg:x="12131" fg:w="2"/><text x="97.7145%" y="495.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="97.5945%" y="469" width="0.0161%" height="15" fill="rgb(228,126,14)" fg:x="12131" fg:w="2"/><text x="97.7145%" y="479.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (5,826 samples, 46.87%)</title><rect x="50.8367%" y="693" width="46.8705%" height="15" fill="rgb(215,173,21)" fg:x="6319" fg:w="5826"/><text x="50.9567%" y="703.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (5,826 samples, 46.87%)</title><rect x="50.8367%" y="677" width="46.8705%" height="15" fill="rgb(210,6,40)" fg:x="6319" fg:w="5826"/><text x="50.9567%" y="687.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,826 samples, 46.87%)</title><rect x="50.8367%" y="661" width="46.8705%" height="15" fill="rgb(212,48,18)" fg:x="6319" fg:w="5826"/><text x="50.9567%" y="671.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,826 samples, 46.87%)</title><rect x="50.8367%" y="645" width="46.8705%" height="15" fill="rgb(230,214,11)" fg:x="6319" fg:w="5826"/><text x="50.9567%" y="655.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (5,826 samples, 46.87%)</title><rect x="50.8367%" y="629" width="46.8705%" height="15" fill="rgb(254,105,39)" fg:x="6319" fg:w="5826"/><text x="50.9567%" y="639.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (5,826 samples, 46.87%)</title><rect x="50.8367%" y="613" width="46.8705%" height="15" fill="rgb(245,158,5)" fg:x="6319" fg:w="5826"/><text x="50.9567%" y="623.50">tokio::runtime::task::harness::poll_future::{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (5,822 samples, 46.84%)</title><rect x="50.8689%" y="597" width="46.8383%" height="15" fill="rgb(249,208,11)" fg:x="6323" fg:w="5822"/><text x="50.9889%" y="607.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (5,817 samples, 46.80%)</title><rect x="50.9091%" y="581" width="46.7981%" height="15" fill="rgb(210,39,28)" fg:x="6328" fg:w="5817"/><text x="51.0291%" y="591.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (5,817 samples, 46.80%)</title><rect x="50.9091%" y="565" width="46.7981%" height="15" fill="rgb(211,56,53)" fg:x="6328" fg:w="5817"/><text x="51.0291%" y="575.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}}</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (12 samples, 0.10%)</title><rect x="97.6106%" y="549" width="0.0965%" height="15" fill="rgb(226,201,30)" fg:x="12133" fg:w="12"/><text x="97.7306%" y="559.50"></text></g><g><title>tokio::runtime::context::set_current_task_id (8 samples, 0.06%)</title><rect x="97.6428%" y="533" width="0.0644%" height="15" fill="rgb(239,101,34)" fg:x="12137" fg:w="8"/><text x="97.7628%" y="543.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (8 samples, 0.06%)</title><rect x="97.6428%" y="517" width="0.0644%" height="15" fill="rgb(226,209,5)" fg:x="12137" fg:w="8"/><text x="97.7628%" y="527.50"></text></g><g><title>tokio::runtime::context::set_current_task_id::{{closure}} (7 samples, 0.06%)</title><rect x="97.6508%" y="501" width="0.0563%" height="15" fill="rgb(250,105,47)" fg:x="12138" fg:w="7"/><text x="97.7708%" y="511.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (7 samples, 0.06%)</title><rect x="97.6508%" y="485" width="0.0563%" height="15" fill="rgb(230,72,3)" fg:x="12138" fg:w="7"/><text x="97.7708%" y="495.50"></text></g><g><title>core::mem::replace (7 samples, 0.06%)</title><rect x="97.6508%" y="469" width="0.0563%" height="15" fill="rgb(232,218,39)" fg:x="12138" fg:w="7"/><text x="97.7708%" y="479.50"></text></g><g><title>core::ptr::read (7 samples, 0.06%)</title><rect x="97.6508%" y="453" width="0.0563%" height="15" fill="rgb(248,166,6)" fg:x="12138" fg:w="7"/><text x="97.7708%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (39 samples, 0.31%)</title><rect x="98.0933%" y="661" width="0.3138%" height="15" fill="rgb(247,89,20)" fg:x="12193" fg:w="39"/><text x="98.2133%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (39 samples, 0.31%)</title><rect x="98.0933%" y="645" width="0.3138%" height="15" fill="rgb(248,130,54)" fg:x="12193" fg:w="39"/><text x="98.2133%" y="655.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (104 samples, 0.84%)</title><rect x="97.7072%" y="693" width="0.8367%" height="15" fill="rgb(234,196,4)" fg:x="12145" fg:w="104"/><text x="97.8272%" y="703.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (56 samples, 0.45%)</title><rect x="98.0933%" y="677" width="0.4505%" height="15" fill="rgb(250,143,31)" fg:x="12193" fg:w="56"/><text x="98.2133%" y="687.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle::{{closure}} (17 samples, 0.14%)</title><rect x="98.4071%" y="661" width="0.1368%" height="15" fill="rgb(211,110,34)" fg:x="12232" fg:w="17"/><text x="98.5271%" y="671.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::ref_dec (9 samples, 0.07%)</title><rect x="98.4714%" y="645" width="0.0724%" height="15" fill="rgb(215,124,48)" fg:x="12240" fg:w="9"/><text x="98.5914%" y="655.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (128 samples, 1.03%)</title><rect x="98.5438%" y="693" width="1.0298%" height="15" fill="rgb(216,46,13)" fg:x="12249" fg:w="128"/><text x="98.6638%" y="703.50">t..</text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (115 samples, 0.93%)</title><rect x="98.6484%" y="677" width="0.9252%" height="15" fill="rgb(205,184,25)" fg:x="12262" fg:w="115"/><text x="98.7684%" y="687.50">t..</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (99 samples, 0.80%)</title><rect x="98.7772%" y="661" width="0.7965%" height="15" fill="rgb(228,1,10)" fg:x="12278" fg:w="99"/><text x="98.8972%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (99 samples, 0.80%)</title><rect x="98.7772%" y="645" width="0.7965%" height="15" fill="rgb(213,116,27)" fg:x="12278" fg:w="99"/><text x="98.8972%" y="655.50"></text></g><g><title>tokio::runtime::coop::budget (6,171 samples, 49.65%)</title><rect x="49.9598%" y="805" width="49.6460%" height="15" fill="rgb(241,95,50)" fg:x="6210" fg:w="6171"/><text x="50.0798%" y="815.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (6,171 samples, 49.65%)</title><rect x="49.9598%" y="789" width="49.6460%" height="15" fill="rgb(238,48,32)" fg:x="6210" fg:w="6171"/><text x="50.0798%" y="799.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}} (6,171 samples, 49.65%)</title><rect x="49.9598%" y="773" width="49.6460%" height="15" fill="rgb(235,113,49)" fg:x="6210" fg:w="6171"/><text x="50.0798%" y="783.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}}</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (6,138 samples, 49.38%)</title><rect x="50.2253%" y="757" width="49.3805%" height="15" fill="rgb(205,127,43)" fg:x="6243" fg:w="6138"/><text x="50.3453%" y="767.50">tokio::runtime::task::LocalNotified&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (6,138 samples, 49.38%)</title><rect x="50.2253%" y="741" width="49.3805%" height="15" fill="rgb(250,162,2)" fg:x="6243" fg:w="6138"/><text x="50.3453%" y="751.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (6,133 samples, 49.34%)</title><rect x="50.2655%" y="725" width="49.3403%" height="15" fill="rgb(220,13,41)" fg:x="6248" fg:w="6133"/><text x="50.3855%" y="735.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (6,088 samples, 48.98%)</title><rect x="50.6275%" y="709" width="48.9783%" height="15" fill="rgb(249,221,25)" fg:x="6293" fg:w="6088"/><text x="50.7475%" y="719.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::waker::waker_ref (4 samples, 0.03%)</title><rect x="99.5736%" y="693" width="0.0322%" height="15" fill="rgb(215,208,19)" fg:x="12377" fg:w="4"/><text x="99.6936%" y="703.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (6,172 samples, 49.65%)</title><rect x="49.9598%" y="821" width="49.6541%" height="15" fill="rgb(236,175,2)" fg:x="6210" fg:w="6172"/><text x="50.0798%" y="831.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_task (10 samples, 0.08%)</title><rect x="99.6138%" y="821" width="0.0805%" height="15" fill="rgb(241,52,2)" fg:x="12382" fg:w="10"/><text x="99.7338%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_local_task (10 samples, 0.08%)</title><rect x="99.6138%" y="805" width="0.0805%" height="15" fill="rgb(248,140,14)" fg:x="12382" fg:w="10"/><text x="99.7338%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (10 samples, 0.08%)</title><rect x="99.6138%" y="789" width="0.0805%" height="15" fill="rgb(253,22,42)" fg:x="12382" fg:w="10"/><text x="99.7338%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_local_task::{{closure}} (10 samples, 0.08%)</title><rect x="99.6138%" y="773" width="0.0805%" height="15" fill="rgb(234,61,47)" fg:x="12382" fg:w="10"/><text x="99.7338%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::pop (10 samples, 0.08%)</title><rect x="99.6138%" y="757" width="0.0805%" height="15" fill="rgb(208,226,15)" fg:x="12382" fg:w="10"/><text x="99.7338%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU64::compare_exchange (10 samples, 0.08%)</title><rect x="99.6138%" y="741" width="0.0805%" height="15" fill="rgb(217,221,4)" fg:x="12382" fg:w="10"/><text x="99.7338%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (10 samples, 0.08%)</title><rect x="99.6138%" y="725" width="0.0805%" height="15" fill="rgb(212,174,34)" fg:x="12382" fg:w="10"/><text x="99.7338%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (13 samples, 0.10%)</title><rect x="99.7828%" y="773" width="0.1046%" height="15" fill="rgb(253,83,4)" fg:x="12403" fg:w="13"/><text x="99.9028%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.10%)</title><rect x="99.7828%" y="757" width="0.1046%" height="15" fill="rgb(250,195,49)" fg:x="12403" fg:w="13"/><text x="99.9028%" y="767.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (6 samples, 0.05%)</title><rect x="99.8874%" y="773" width="0.0483%" height="15" fill="rgb(241,192,25)" fg:x="12416" fg:w="6"/><text x="100.0074%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (23 samples, 0.19%)</title><rect x="99.7667%" y="805" width="0.1850%" height="15" fill="rgb(208,124,10)" fg:x="12401" fg:w="23"/><text x="99.8867%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into2 (22 samples, 0.18%)</title><rect x="99.7747%" y="789" width="0.1770%" height="15" fill="rgb(222,33,0)" fg:x="12402" fg:w="22"/><text x="99.8947%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::unpack (2 samples, 0.02%)</title><rect x="99.9356%" y="773" width="0.0161%" height="15" fill="rgb(234,209,28)" fg:x="12422" fg:w="2"/><text x="100.0556%" y="783.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (6,317 samples, 50.82%)</title><rect x="49.1392%" y="869" width="50.8206%" height="15" fill="rgb(224,11,23)" fg:x="6108" fg:w="6317"/><text x="49.2592%" y="879.50">tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (6,317 samples, 50.82%)</title><rect x="49.1392%" y="853" width="50.8206%" height="15" fill="rgb(232,99,1)" fg:x="6108" fg:w="6317"/><text x="49.2592%" y="863.50">tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (6,317 samples, 50.82%)</title><rect x="49.1392%" y="837" width="50.8206%" height="15" fill="rgb(237,95,45)" fg:x="6108" fg:w="6317"/><text x="49.2592%" y="847.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::steal_work (32 samples, 0.26%)</title><rect x="99.7023%" y="821" width="0.2574%" height="15" fill="rgb(208,109,11)" fg:x="12393" fg:w="32"/><text x="99.8223%" y="831.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (6,322 samples, 50.86%)</title><rect x="49.1070%" y="965" width="50.8608%" height="15" fill="rgb(216,190,48)" fg:x="6104" fg:w="6322"/><text x="49.2270%" y="975.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (6,322 samples, 50.86%)</title><rect x="49.1070%" y="949" width="50.8608%" height="15" fill="rgb(251,171,36)" fg:x="6104" fg:w="6322"/><text x="49.2270%" y="959.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (6,322 samples, 50.86%)</title><rect x="49.1070%" y="933" width="50.8608%" height="15" fill="rgb(230,62,22)" fg:x="6104" fg:w="6322"/><text x="49.2270%" y="943.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}}</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (6,322 samples, 50.86%)</title><rect x="49.1070%" y="917" width="50.8608%" height="15" fill="rgb(225,114,35)" fg:x="6104" fg:w="6322"/><text x="49.2270%" y="927.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (6,319 samples, 50.84%)</title><rect x="49.1311%" y="901" width="50.8367%" height="15" fill="rgb(215,118,42)" fg:x="6107" fg:w="6319"/><text x="49.2511%" y="911.50">tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (6,319 samples, 50.84%)</title><rect x="49.1311%" y="885" width="50.8367%" height="15" fill="rgb(243,119,21)" fg:x="6107" fg:w="6319"/><text x="49.2511%" y="895.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::task::harness::poll_future (6,323 samples, 50.87%)</title><rect x="49.1070%" y="1061" width="50.8689%" height="15" fill="rgb(252,177,53)" fg:x="6104" fg:w="6323"/><text x="49.2270%" y="1071.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (6,323 samples, 50.87%)</title><rect x="49.1070%" y="1045" width="50.8689%" height="15" fill="rgb(237,209,29)" fg:x="6104" fg:w="6323"/><text x="49.2270%" y="1055.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (6,323 samples, 50.87%)</title><rect x="49.1070%" y="1029" width="50.8689%" height="15" fill="rgb(212,65,23)" fg:x="6104" fg:w="6323"/><text x="49.2270%" y="1039.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (6,323 samples, 50.87%)</title><rect x="49.1070%" y="1013" width="50.8689%" height="15" fill="rgb(230,222,46)" fg:x="6104" fg:w="6323"/><text x="49.2270%" y="1023.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,323 samples, 50.87%)</title><rect x="49.1070%" y="997" width="50.8689%" height="15" fill="rgb(215,135,32)" fg:x="6104" fg:w="6323"/><text x="49.2270%" y="1007.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (6,323 samples, 50.87%)</title><rect x="49.1070%" y="981" width="50.8689%" height="15" fill="rgb(246,101,22)" fg:x="6104" fg:w="6323"/><text x="49.2270%" y="991.50">tokio::runtime::task::harness::poll_future::{{closure}}</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (6,418 samples, 51.63%)</title><rect x="48.3588%" y="1157" width="51.6331%" height="15" fill="rgb(206,107,13)" fg:x="6011" fg:w="6418"/><text x="48.4788%" y="1167.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::blocking::pool::Task::run (6,329 samples, 50.92%)</title><rect x="49.0748%" y="1141" width="50.9171%" height="15" fill="rgb(250,100,44)" fg:x="6100" fg:w="6329"/><text x="49.1948%" y="1151.50">tokio::runtime::blocking::pool::Task::run</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (6,329 samples, 50.92%)</title><rect x="49.0748%" y="1125" width="50.9171%" height="15" fill="rgb(231,147,38)" fg:x="6100" fg:w="6329"/><text x="49.1948%" y="1135.50">tokio::runtime::task::UnownedTask&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (6,329 samples, 50.92%)</title><rect x="49.0748%" y="1109" width="50.9171%" height="15" fill="rgb(229,8,40)" fg:x="6100" fg:w="6329"/><text x="49.1948%" y="1119.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (6,327 samples, 50.90%)</title><rect x="49.0909%" y="1093" width="50.9010%" height="15" fill="rgb(221,135,30)" fg:x="6102" fg:w="6327"/><text x="49.2109%" y="1103.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (6,326 samples, 50.89%)</title><rect x="49.0990%" y="1077" width="50.8930%" height="15" fill="rgb(249,193,18)" fg:x="6103" fg:w="6326"/><text x="49.2190%" y="1087.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (2 samples, 0.02%)</title><rect x="99.9759%" y="1061" width="0.0161%" height="15" fill="rgb(209,133,39)" fg:x="12427" fg:w="2"/><text x="100.0959%" y="1071.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (2 samples, 0.02%)</title><rect x="99.9759%" y="1045" width="0.0161%" height="15" fill="rgb(232,100,14)" fg:x="12427" fg:w="2"/><text x="100.0959%" y="1055.50"></text></g><g><title>all (12,430 samples, 100%)</title><rect x="0.0000%" y="1413" width="100.0000%" height="15" fill="rgb(224,185,1)" fg:x="0" fg:w="12430"/><text x="0.1200%" y="1423.50"></text></g><g><title>tokio-runtime-w (6,452 samples, 51.91%)</title><rect x="48.0933%" y="1397" width="51.9067%" height="15" fill="rgb(223,139,8)" fg:x="5978" fg:w="6452"/><text x="48.2133%" y="1407.50">tokio-runtime-w</text></g><g><title>__GI___clone3 (6,452 samples, 51.91%)</title><rect x="48.0933%" y="1381" width="51.9067%" height="15" fill="rgb(232,213,38)" fg:x="5978" fg:w="6452"/><text x="48.2133%" y="1391.50">__GI___clone3</text></g><g><title>start_thread (6,452 samples, 51.91%)</title><rect x="48.0933%" y="1365" width="51.9067%" height="15" fill="rgb(207,94,22)" fg:x="5978" fg:w="6452"/><text x="48.2133%" y="1375.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (6,450 samples, 51.89%)</title><rect x="48.1094%" y="1349" width="51.8906%" height="15" fill="rgb(219,183,54)" fg:x="5980" fg:w="6450"/><text x="48.2294%" y="1359.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (6,450 samples, 51.89%)</title><rect x="48.1094%" y="1333" width="51.8906%" height="15" fill="rgb(216,185,54)" fg:x="5980" fg:w="6450"/><text x="48.2294%" y="1343.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (6,449 samples, 51.88%)</title><rect x="48.1175%" y="1317" width="51.8825%" height="15" fill="rgb(254,217,39)" fg:x="5981" fg:w="6449"/><text x="48.2375%" y="1327.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (6,448 samples, 51.87%)</title><rect x="48.1255%" y="1301" width="51.8745%" height="15" fill="rgb(240,178,23)" fg:x="5982" fg:w="6448"/><text x="48.2455%" y="1311.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (6,448 samples, 51.87%)</title><rect x="48.1255%" y="1285" width="51.8745%" height="15" fill="rgb(218,11,47)" fg:x="5982" fg:w="6448"/><text x="48.2455%" y="1295.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (6,445 samples, 51.85%)</title><rect x="48.1496%" y="1269" width="51.8504%" height="15" fill="rgb(218,51,51)" fg:x="5985" fg:w="6445"/><text x="48.2696%" y="1279.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (6,445 samples, 51.85%)</title><rect x="48.1496%" y="1253" width="51.8504%" height="15" fill="rgb(238,126,27)" fg:x="5985" fg:w="6445"/><text x="48.2696%" y="1263.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (6,445 samples, 51.85%)</title><rect x="48.1496%" y="1237" width="51.8504%" height="15" fill="rgb(249,202,22)" fg:x="5985" fg:w="6445"/><text x="48.2696%" y="1247.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,445 samples, 51.85%)</title><rect x="48.1496%" y="1221" width="51.8504%" height="15" fill="rgb(254,195,49)" fg:x="5985" fg:w="6445"/><text x="48.2696%" y="1231.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (6,445 samples, 51.85%)</title><rect x="48.1496%" y="1205" width="51.8504%" height="15" fill="rgb(208,123,14)" fg:x="5985" fg:w="6445"/><text x="48.2696%" y="1215.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6,444 samples, 51.84%)</title><rect x="48.1577%" y="1189" width="51.8423%" height="15" fill="rgb(224,200,8)" fg:x="5986" fg:w="6444"/><text x="48.2777%" y="1199.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (6,425 samples, 51.69%)</title><rect x="48.3105%" y="1173" width="51.6895%" height="15" fill="rgb(217,61,36)" fg:x="6005" fg:w="6425"/><text x="48.4305%" y="1183.50">tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}}</text></g></svg></svg>