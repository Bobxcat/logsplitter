<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="2500" height="1478" onload="init(evt)" viewBox="0 0 2500 1478" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1478" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1461.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="2490" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="2490" y="1461.00"> </text><svg id="frames" x="10" width="2480" total_samples="4413"><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::BufRead&gt;::consume (1 samples, 0.02%)</title><rect x="0.0000%" y="885" width="0.0227%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.1200%" y="895.50"></text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="0.0000%" y="869" width="0.0227%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.1200%" y="879.50"></text></g><g><title>crc32fast::Hasher::update (1 samples, 0.02%)</title><rect x="0.0000%" y="853" width="0.0227%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.1200%" y="863.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (1 samples, 0.02%)</title><rect x="0.0000%" y="837" width="0.0227%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.1200%" y="847.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.02%)</title><rect x="0.0000%" y="821" width="0.0227%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.1200%" y="831.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (1 samples, 0.02%)</title><rect x="0.0000%" y="805" width="0.0227%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.1200%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_xor_si128 (1 samples, 0.02%)</title><rect x="0.0000%" y="789" width="0.0227%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.1200%" y="799.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (2 samples, 0.05%)</title><rect x="0.0227%" y="885" width="0.0453%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="2"/><text x="0.1427%" y="895.50"></text></g><g><title>&lt;flate2::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (2 samples, 0.05%)</title><rect x="0.0227%" y="869" width="0.0453%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="2"/><text x="0.1427%" y="879.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for alloc::collections::vec_deque::VecDeque&lt;u8,A&gt;&gt;::read (2 samples, 0.05%)</title><rect x="0.0227%" y="853" width="0.0453%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="2"/><text x="0.1427%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::drain::Drain&lt;u8&gt;&gt; (2 samples, 0.05%)</title><rect x="0.0227%" y="837" width="0.0453%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="2"/><text x="0.1427%" y="847.50"></text></g><g><title>&lt;alloc::collections::vec_deque::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="0.0227%" y="821" width="0.0453%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="2"/><text x="0.1427%" y="831.50"></text></g><g><title>&lt;alloc::collections::vec_deque::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="0.0227%" y="805" width="0.0453%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="2"/><text x="0.1427%" y="815.50"></text></g><g><title>miniz_oxide::deflate::core::DictOxide::find_match (10 samples, 0.23%)</title><rect x="1.3370%" y="773" width="0.2266%" height="15" fill="rgb(206,188,39)" fg:x="59" fg:w="10"/><text x="1.4570%" y="783.50"></text></g><g><title>miniz_oxide::deflate::core::flush_block (7 samples, 0.16%)</title><rect x="1.5636%" y="773" width="0.1586%" height="15" fill="rgb(217,207,13)" fg:x="69" fg:w="7"/><text x="1.6836%" y="783.50"></text></g><g><title>miniz_oxide::deflate::core::compress_block (7 samples, 0.16%)</title><rect x="1.5636%" y="757" width="0.1586%" height="15" fill="rgb(231,73,38)" fg:x="69" fg:w="7"/><text x="1.6836%" y="767.50"></text></g><g><title>miniz_oxide::deflate::core::compress_lz_codes (7 samples, 0.16%)</title><rect x="1.5636%" y="741" width="0.1586%" height="15" fill="rgb(225,20,46)" fg:x="69" fg:w="7"/><text x="1.6836%" y="751.50"></text></g><g><title>miniz_oxide::deflate::core::BitBuffer::flush (7 samples, 0.16%)</title><rect x="1.5636%" y="725" width="0.1586%" height="15" fill="rgb(210,31,41)" fg:x="69" fg:w="7"/><text x="1.6836%" y="735.50"></text></g><g><title>miniz_oxide::deflate::core::compress_normal (77 samples, 1.74%)</title><rect x="0.0680%" y="789" width="1.7448%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="77"/><text x="0.1880%" y="799.50">mini..</text></g><g><title>miniz_oxide::deflate::core::record_match (4 samples, 0.09%)</title><rect x="1.7222%" y="773" width="0.0906%" height="15" fill="rgb(226,26,5)" fg:x="76" fg:w="4"/><text x="1.8422%" y="783.50"></text></g><g><title>miniz_oxide::deflate::core::LZOxide::write_code (4 samples, 0.09%)</title><rect x="1.7222%" y="757" width="0.0906%" height="15" fill="rgb(249,33,26)" fg:x="76" fg:w="4"/><text x="1.8422%" y="767.50"></text></g><g><title>__GI___clone3 (81 samples, 1.84%)</title><rect x="0.0000%" y="1397" width="1.8355%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1407.50">__GI..</text></g><g><title>start_thread (81 samples, 1.84%)</title><rect x="0.0000%" y="1381" width="1.8355%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1391.50">star..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (81 samples, 1.84%)</title><rect x="0.0000%" y="1365" width="1.8355%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1375.50">std:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (81 samples, 1.84%)</title><rect x="0.0000%" y="1349" width="1.8355%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1359.50">&lt;all..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (81 samples, 1.84%)</title><rect x="0.0000%" y="1333" width="1.8355%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1343.50">&lt;all..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (81 samples, 1.84%)</title><rect x="0.0000%" y="1317" width="1.8355%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1327.50">core..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (81 samples, 1.84%)</title><rect x="0.0000%" y="1301" width="1.8355%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1311.50">std:..</text></g><g><title>std::panic::catch_unwind (81 samples, 1.84%)</title><rect x="0.0000%" y="1285" width="1.8355%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1295.50">std:..</text></g><g><title>std::panicking::try (81 samples, 1.84%)</title><rect x="0.0000%" y="1269" width="1.8355%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1279.50">std:..</text></g><g><title>std::panicking::try::do_call (81 samples, 1.84%)</title><rect x="0.0000%" y="1253" width="1.8355%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1263.50">std:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (81 samples, 1.84%)</title><rect x="0.0000%" y="1237" width="1.8355%" height="15" fill="rgb(229,88,8)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1247.50">&lt;cor..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (81 samples, 1.84%)</title><rect x="0.0000%" y="1221" width="1.8355%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1231.50">std:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (81 samples, 1.84%)</title><rect x="0.0000%" y="1205" width="1.8355%" height="15" fill="rgb(254,191,54)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1215.50">std:..</text></g><g><title>&lt;dads_gzip_thing::enc::GzEncoderAsync as core::ops::drop::Drop&gt;::drop::{{closure}}::{{closure}} (81 samples, 1.84%)</title><rect x="0.0000%" y="1189" width="1.8355%" height="15" fill="rgb(241,83,37)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1199.50">&lt;dad..</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (81 samples, 1.84%)</title><rect x="0.0000%" y="1173" width="1.8355%" height="15" fill="rgb(233,36,39)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1183.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (81 samples, 1.84%)</title><rect x="0.0000%" y="1157" width="1.8355%" height="15" fill="rgb(226,3,54)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1167.50">toki..</text></g><g><title>tokio::runtime::context::BlockingRegionGuard::block_on (81 samples, 1.84%)</title><rect x="0.0000%" y="1141" width="1.8355%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1151.50">toki..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (81 samples, 1.84%)</title><rect x="0.0000%" y="1125" width="1.8355%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1135.50">toki..</text></g><g><title>tokio::runtime::coop::budget (81 samples, 1.84%)</title><rect x="0.0000%" y="1109" width="1.8355%" height="15" fill="rgb(232,182,51)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1119.50">toki..</text></g><g><title>tokio::runtime::coop::with_budget (81 samples, 1.84%)</title><rect x="0.0000%" y="1093" width="1.8355%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1103.50">toki..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (81 samples, 1.84%)</title><rect x="0.0000%" y="1077" width="1.8355%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1087.50">toki..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (81 samples, 1.84%)</title><rect x="0.0000%" y="1061" width="1.8355%" height="15" fill="rgb(235,93,37)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1071.50">&lt;cor..</text></g><g><title>dads_gzip_thing::enc::GzEncoderAsync::flush::{{closure}} (81 samples, 1.84%)</title><rect x="0.0000%" y="1045" width="1.8355%" height="15" fill="rgb(213,116,39)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1055.50">dads..</text></g><g><title>std::io::Read::read_to_end (81 samples, 1.84%)</title><rect x="0.0000%" y="1029" width="1.8355%" height="15" fill="rgb(222,207,29)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1039.50">std:..</text></g><g><title>std::io::default_read_to_end (81 samples, 1.84%)</title><rect x="0.0000%" y="1013" width="1.8355%" height="15" fill="rgb(206,96,30)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1023.50">std:..</text></g><g><title>std::io::Read::read_buf (81 samples, 1.84%)</title><rect x="0.0000%" y="997" width="1.8355%" height="15" fill="rgb(218,138,4)" fg:x="0" fg:w="81"/><text x="0.1200%" y="1007.50">std:..</text></g><g><title>std::io::default_read_buf (81 samples, 1.84%)</title><rect x="0.0000%" y="981" width="1.8355%" height="15" fill="rgb(250,191,14)" fg:x="0" fg:w="81"/><text x="0.1200%" y="991.50">std:..</text></g><g><title>std::io::Read::read_buf::{{closure}} (81 samples, 1.84%)</title><rect x="0.0000%" y="965" width="1.8355%" height="15" fill="rgb(239,60,40)" fg:x="0" fg:w="81"/><text x="0.1200%" y="975.50">std:..</text></g><g><title>&lt;flate2::gz::read::GzEncoder&lt;R&gt; as std::io::Read&gt;::read (81 samples, 1.84%)</title><rect x="0.0000%" y="949" width="1.8355%" height="15" fill="rgb(206,27,48)" fg:x="0" fg:w="81"/><text x="0.1200%" y="959.50">&lt;fla..</text></g><g><title>&lt;flate2::gz::bufread::GzEncoder&lt;R&gt; as std::io::Read&gt;::read (81 samples, 1.84%)</title><rect x="0.0000%" y="933" width="1.8355%" height="15" fill="rgb(225,35,8)" fg:x="0" fg:w="81"/><text x="0.1200%" y="943.50">&lt;fla..</text></g><g><title>&lt;flate2::deflate::bufread::DeflateEncoder&lt;R&gt; as std::io::Read&gt;::read (81 samples, 1.84%)</title><rect x="0.0000%" y="917" width="1.8355%" height="15" fill="rgb(250,213,24)" fg:x="0" fg:w="81"/><text x="0.1200%" y="927.50">&lt;fla..</text></g><g><title>flate2::zio::read (81 samples, 1.84%)</title><rect x="0.0000%" y="901" width="1.8355%" height="15" fill="rgb(247,123,22)" fg:x="0" fg:w="81"/><text x="0.1200%" y="911.50">flat..</text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run (78 samples, 1.77%)</title><rect x="0.0680%" y="885" width="1.7675%" height="15" fill="rgb(231,138,38)" fg:x="3" fg:w="78"/><text x="0.1880%" y="895.50">&lt;fla..</text></g><g><title>flate2::mem::Compress::compress (78 samples, 1.77%)</title><rect x="0.0680%" y="869" width="1.7675%" height="15" fill="rgb(231,145,46)" fg:x="3" fg:w="78"/><text x="0.1880%" y="879.50">flat..</text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::compress (78 samples, 1.77%)</title><rect x="0.0680%" y="853" width="1.7675%" height="15" fill="rgb(251,118,11)" fg:x="3" fg:w="78"/><text x="0.1880%" y="863.50">&lt;fla..</text></g><g><title>miniz_oxide::deflate::stream::deflate (78 samples, 1.77%)</title><rect x="0.0680%" y="837" width="1.7675%" height="15" fill="rgb(217,147,25)" fg:x="3" fg:w="78"/><text x="0.1880%" y="847.50">mini..</text></g><g><title>miniz_oxide::deflate::core::compress (78 samples, 1.77%)</title><rect x="0.0680%" y="821" width="1.7675%" height="15" fill="rgb(247,81,37)" fg:x="3" fg:w="78"/><text x="0.1880%" y="831.50">mini..</text></g><g><title>miniz_oxide::deflate::core::compress_inner (78 samples, 1.77%)</title><rect x="0.0680%" y="805" width="1.7675%" height="15" fill="rgb(209,12,38)" fg:x="3" fg:w="78"/><text x="0.1880%" y="815.50">mini..</text></g><g><title>miniz_oxide::deflate::core::flush_block (1 samples, 0.02%)</title><rect x="1.8128%" y="789" width="0.0227%" height="15" fill="rgb(227,1,9)" fg:x="80" fg:w="1"/><text x="1.9328%" y="799.50"></text></g><g><title>miniz_oxide::deflate::core::compress_block (1 samples, 0.02%)</title><rect x="1.8128%" y="773" width="0.0227%" height="15" fill="rgb(248,47,43)" fg:x="80" fg:w="1"/><text x="1.9328%" y="783.50"></text></g><g><title>miniz_oxide::deflate::core::compress_lz_codes (1 samples, 0.02%)</title><rect x="1.8128%" y="757" width="0.0227%" height="15" fill="rgb(221,10,30)" fg:x="80" fg:w="1"/><text x="1.9328%" y="767.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (12 samples, 0.27%)</title><rect x="7.6139%" y="725" width="0.2719%" height="15" fill="rgb(210,229,1)" fg:x="336" fg:w="12"/><text x="7.7339%" y="735.50"></text></g><g><title>miniz_oxide::MZFlush::new (1 samples, 0.02%)</title><rect x="7.8858%" y="725" width="0.0227%" height="15" fill="rgb(222,148,37)" fg:x="348" fg:w="1"/><text x="8.0058%" y="735.50"></text></g><g><title>miniz_oxide::inflate::core::decompress_fast (233 samples, 5.28%)</title><rect x="8.1124%" y="677" width="5.2799%" height="15" fill="rgb(234,67,33)" fg:x="358" fg:w="233"/><text x="8.2324%" y="687.50">miniz_oxide::inf..</text></g><g><title>miniz_oxide::inflate::core::apply_match (15 samples, 0.34%)</title><rect x="13.0523%" y="661" width="0.3399%" height="15" fill="rgb(247,98,35)" fg:x="576" fg:w="15"/><text x="13.1723%" y="671.50"></text></g><g><title>miniz_oxide::inflate::core::init_tree (8 samples, 0.18%)</title><rect x="13.3923%" y="677" width="0.1813%" height="15" fill="rgb(247,138,52)" fg:x="591" fg:w="8"/><text x="13.5123%" y="687.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (266 samples, 6.03%)</title><rect x="7.5912%" y="741" width="6.0276%" height="15" fill="rgb(213,79,30)" fg:x="335" fg:w="266"/><text x="7.7112%" y="751.50">&lt;flate2::ffi::rust:..</text></g><g><title>miniz_oxide::inflate::stream::inflate (252 samples, 5.71%)</title><rect x="7.9085%" y="725" width="5.7104%" height="15" fill="rgb(246,177,23)" fg:x="349" fg:w="252"/><text x="8.0285%" y="735.50">miniz_oxide::infla..</text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (243 samples, 5.51%)</title><rect x="8.1124%" y="709" width="5.5065%" height="15" fill="rgb(230,62,27)" fg:x="358" fg:w="243"/><text x="8.2324%" y="719.50">miniz_oxide::infl..</text></g><g><title>miniz_oxide::inflate::core::decompress (243 samples, 5.51%)</title><rect x="8.1124%" y="693" width="5.5065%" height="15" fill="rgb(216,154,8)" fg:x="358" fg:w="243"/><text x="8.2324%" y="703.50">miniz_oxide::infl..</text></g><g><title>miniz_oxide::inflate::core::transfer (2 samples, 0.05%)</title><rect x="13.5735%" y="677" width="0.0453%" height="15" fill="rgb(244,35,45)" fg:x="599" fg:w="2"/><text x="13.6935%" y="687.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::total_in (1 samples, 0.02%)</title><rect x="13.6189%" y="741" width="0.0227%" height="15" fill="rgb(251,115,12)" fg:x="601" fg:w="1"/><text x="13.7389%" y="751.50"></text></g><g><title>flate2::mem::Compress::total_in (1 samples, 0.02%)</title><rect x="13.6189%" y="725" width="0.0227%" height="15" fill="rgb(240,54,50)" fg:x="601" fg:w="1"/><text x="13.7389%" y="735.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::Backend&gt;::total_in (1 samples, 0.02%)</title><rect x="13.6189%" y="709" width="0.0227%" height="15" fill="rgb(233,84,52)" fg:x="601" fg:w="1"/><text x="13.7389%" y="719.50"></text></g><g><title>&lt;async_compression::codec::gzip::decoder::GzipDecoder as async_compression::codec::Decode&gt;::decode::{{closure}} (283 samples, 6.41%)</title><rect x="7.3193%" y="789" width="6.4129%" height="15" fill="rgb(207,117,47)" fg:x="323" fg:w="283"/><text x="7.4393%" y="799.50">&lt;async_compression::..</text></g><g><title>&lt;async_compression::codec::flate::decoder::FlateDecoder as async_compression::codec::Decode&gt;::decode (283 samples, 6.41%)</title><rect x="7.3193%" y="773" width="6.4129%" height="15" fill="rgb(249,43,39)" fg:x="323" fg:w="283"/><text x="7.4393%" y="783.50">&lt;async_compression::..</text></g><g><title>async_compression::codec::flate::decoder::FlateDecoder::decode (273 samples, 6.19%)</title><rect x="7.5459%" y="757" width="6.1863%" height="15" fill="rgb(209,38,44)" fg:x="333" fg:w="273"/><text x="7.6659%" y="767.50">async_compression::..</text></g><g><title>&lt;flate2::mem::DecompressError as core::fmt::Display&gt;::fmt (4 samples, 0.09%)</title><rect x="13.6415%" y="741" width="0.0906%" height="15" fill="rgb(236,212,23)" fg:x="602" fg:w="4"/><text x="13.7615%" y="751.50"></text></g><g><title>&lt;async_compression::codec::gzip::decoder::GzipDecoder as async_compression::codec::Decode&gt;::decode (368 samples, 8.34%)</title><rect x="6.7754%" y="821" width="8.3390%" height="15" fill="rgb(242,79,21)" fg:x="299" fg:w="368"/><text x="6.8954%" y="831.50">&lt;async_compression::codec::..</text></g><g><title>async_compression::codec::gzip::decoder::GzipDecoder::process (368 samples, 8.34%)</title><rect x="6.7754%" y="805" width="8.3390%" height="15" fill="rgb(211,96,35)" fg:x="299" fg:w="368"/><text x="6.8954%" y="815.50">async_compression::codec::g..</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (61 samples, 1.38%)</title><rect x="13.7322%" y="789" width="1.3823%" height="15" fill="rgb(253,215,40)" fg:x="606" fg:w="61"/><text x="13.8522%" y="799.50">&lt;c..</text></g><g><title>crc32fast::Hasher::update (61 samples, 1.38%)</title><rect x="13.7322%" y="773" width="1.3823%" height="15" fill="rgb(211,81,21)" fg:x="606" fg:w="61"/><text x="13.8522%" y="783.50">cr..</text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (59 samples, 1.34%)</title><rect x="13.7775%" y="757" width="1.3370%" height="15" fill="rgb(208,190,38)" fg:x="608" fg:w="59"/><text x="13.8975%" y="767.50">cr..</text></g><g><title>crc32fast::baseline::update_fast_16 (59 samples, 1.34%)</title><rect x="13.7775%" y="741" width="1.3370%" height="15" fill="rgb(235,213,38)" fg:x="608" fg:w="59"/><text x="13.8975%" y="751.50">cr..</text></g><g><title>async_compression::tokio::bufread::generic::decoder::Decoder&lt;R,D&gt;::do_poll_read (371 samples, 8.41%)</title><rect x="6.7754%" y="837" width="8.4070%" height="15" fill="rgb(237,122,38)" fg:x="299" fg:w="371"/><text x="6.8954%" y="847.50">async_compression::tokio::b..</text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (3 samples, 0.07%)</title><rect x="15.1144%" y="821" width="0.0680%" height="15" fill="rgb(244,218,35)" fg:x="667" fg:w="3"/><text x="15.2344%" y="831.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.02%)</title><rect x="15.1598%" y="805" width="0.0227%" height="15" fill="rgb(240,68,47)" fg:x="669" fg:w="1"/><text x="15.2798%" y="815.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="15.1598%" y="789" width="0.0227%" height="15" fill="rgb(210,16,53)" fg:x="669" fg:w="1"/><text x="15.2798%" y="799.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::try_read_output (1 samples, 0.02%)</title><rect x="15.1598%" y="773" width="0.0227%" height="15" fill="rgb(235,124,12)" fg:x="669" fg:w="1"/><text x="15.2798%" y="783.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (1 samples, 0.02%)</title><rect x="15.1598%" y="757" width="0.0227%" height="15" fill="rgb(224,169,11)" fg:x="669" fg:w="1"/><text x="15.2798%" y="767.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (1 samples, 0.02%)</title><rect x="15.1598%" y="741" width="0.0227%" height="15" fill="rgb(250,166,2)" fg:x="669" fg:w="1"/><text x="15.2798%" y="751.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1 samples, 0.02%)</title><rect x="15.1598%" y="725" width="0.0227%" height="15" fill="rgb(242,216,29)" fg:x="669" fg:w="1"/><text x="15.2798%" y="735.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (375 samples, 8.50%)</title><rect x="6.7754%" y="901" width="8.4976%" height="15" fill="rgb(230,116,27)" fg:x="299" fg:w="375"/><text x="6.8954%" y="911.50">&lt;&amp;mut T as tokio::io::async_..</text></g><g><title>&lt;dads_gzip_thing::dec::GzDecoderAsync as tokio::io::async_read::AsyncRead&gt;::poll_read (375 samples, 8.50%)</title><rect x="6.7754%" y="885" width="8.4976%" height="15" fill="rgb(228,99,48)" fg:x="299" fg:w="375"/><text x="6.8954%" y="895.50">&lt;dads_gzip_thing::dec::GzDec..</text></g><g><title>&lt;async_compression::tokio::bufread::GzipDecoder&lt;R&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (375 samples, 8.50%)</title><rect x="6.7754%" y="869" width="8.4976%" height="15" fill="rgb(253,11,6)" fg:x="299" fg:w="375"/><text x="6.8954%" y="879.50">&lt;async_compression::tokio::b..</text></g><g><title>&lt;async_compression::tokio::bufread::generic::decoder::Decoder&lt;R,D&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (375 samples, 8.50%)</title><rect x="6.7754%" y="853" width="8.4976%" height="15" fill="rgb(247,143,39)" fg:x="299" fg:w="375"/><text x="6.8954%" y="863.50">&lt;async_compression::tokio::b..</text></g><g><title>tokio::io::read_buf::ReadBuf::initialize_unfilled (4 samples, 0.09%)</title><rect x="15.1824%" y="837" width="0.0906%" height="15" fill="rgb(236,97,10)" fg:x="670" fg:w="4"/><text x="15.3024%" y="847.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::initialize_unfilled_to (4 samples, 0.09%)</title><rect x="15.1824%" y="821" width="0.0906%" height="15" fill="rgb(233,208,19)" fg:x="670" fg:w="4"/><text x="15.3024%" y="831.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::filled (1 samples, 0.02%)</title><rect x="15.2731%" y="901" width="0.0227%" height="15" fill="rgb(216,164,2)" fg:x="674" fg:w="1"/><text x="15.3931%" y="911.50"></text></g><g><title>tokio::io::read_buf::slice_assume_init (1 samples, 0.02%)</title><rect x="15.2731%" y="885" width="0.0227%" height="15" fill="rgb(220,129,5)" fg:x="674" fg:w="1"/><text x="15.3931%" y="895.50"></text></g><g><title>&lt;tokio::io::util::read::Read&lt;R&gt; as core::future::future::Future&gt;::poll (380 samples, 8.61%)</title><rect x="6.7754%" y="917" width="8.6109%" height="15" fill="rgb(242,17,10)" fg:x="299" fg:w="380"/><text x="6.8954%" y="927.50">&lt;tokio::io::util::read::Read..</text></g><g><title>tokio::io::read_buf::ReadBuf::new (4 samples, 0.09%)</title><rect x="15.2957%" y="901" width="0.0906%" height="15" fill="rgb(242,107,0)" fg:x="675" fg:w="4"/><text x="15.4157%" y="911.50"></text></g><g><title>tokio::io::read_buf::slice_to_uninit_mut (1 samples, 0.02%)</title><rect x="15.3637%" y="885" width="0.0227%" height="15" fill="rgb(251,28,31)" fg:x="678" fg:w="1"/><text x="15.4837%" y="895.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="15.3864%" y="853" width="0.0227%" height="15" fill="rgb(233,223,10)" fg:x="679" fg:w="1"/><text x="15.5064%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.02%)</title><rect x="15.3864%" y="837" width="0.0227%" height="15" fill="rgb(215,21,27)" fg:x="679" fg:w="1"/><text x="15.5064%" y="847.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.02%)</title><rect x="15.3864%" y="821" width="0.0227%" height="15" fill="rgb(232,23,21)" fg:x="679" fg:w="1"/><text x="15.5064%" y="831.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="15.3864%" y="805" width="0.0227%" height="15" fill="rgb(244,5,23)" fg:x="679" fg:w="1"/><text x="15.5064%" y="815.50"></text></g><g><title>__rdl_realloc (1 samples, 0.02%)</title><rect x="15.3864%" y="789" width="0.0227%" height="15" fill="rgb(226,81,46)" fg:x="679" fg:w="1"/><text x="15.5064%" y="799.50"></text></g><g><title>dads_gzip_thing::gzip::JsonLinesReadStream::next_line::{{closure}} (602 samples, 13.64%)</title><rect x="1.8355%" y="933" width="13.6415%" height="15" fill="rgb(247,70,30)" fg:x="81" fg:w="602"/><text x="1.9555%" y="943.50">dads_gzip_thing::gzip::JsonLinesReadStream::ne..</text></g><g><title>alloc::string::String::push (4 samples, 0.09%)</title><rect x="15.3864%" y="917" width="0.0906%" height="15" fill="rgb(212,68,19)" fg:x="679" fg:w="4"/><text x="15.5064%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.09%)</title><rect x="15.3864%" y="901" width="0.0906%" height="15" fill="rgb(240,187,13)" fg:x="679" fg:w="4"/><text x="15.5064%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.09%)</title><rect x="15.3864%" y="885" width="0.0906%" height="15" fill="rgb(223,113,26)" fg:x="679" fg:w="4"/><text x="15.5064%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.09%)</title><rect x="15.3864%" y="869" width="0.0906%" height="15" fill="rgb(206,192,2)" fg:x="679" fg:w="4"/><text x="15.5064%" y="879.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.07%)</title><rect x="15.4090%" y="853" width="0.0680%" height="15" fill="rgb(241,108,4)" fg:x="680" fg:w="3"/><text x="15.5290%" y="863.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.07%)</title><rect x="15.4090%" y="837" width="0.0680%" height="15" fill="rgb(247,173,49)" fg:x="680" fg:w="3"/><text x="15.5290%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (607 samples, 13.75%)</title><rect x="1.8355%" y="949" width="13.7548%" height="15" fill="rgb(224,114,35)" fg:x="81" fg:w="607"/><text x="1.9555%" y="959.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as..</text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::lock::{{closure}} (5 samples, 0.11%)</title><rect x="15.4770%" y="933" width="0.1133%" height="15" fill="rgb(245,159,27)" fg:x="683" fg:w="5"/><text x="15.5970%" y="943.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.07%)</title><rect x="15.5223%" y="917" width="0.0680%" height="15" fill="rgb(245,172,44)" fg:x="685" fg:w="3"/><text x="15.6423%" y="927.50"></text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::acquire::{{closure}} (3 samples, 0.07%)</title><rect x="15.5223%" y="901" width="0.0680%" height="15" fill="rgb(236,23,11)" fg:x="685" fg:w="3"/><text x="15.6423%" y="911.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (3 samples, 0.07%)</title><rect x="15.5223%" y="885" width="0.0680%" height="15" fill="rgb(205,117,38)" fg:x="685" fg:w="3"/><text x="15.6423%" y="895.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (3 samples, 0.07%)</title><rect x="15.5223%" y="869" width="0.0680%" height="15" fill="rgb(237,72,25)" fg:x="685" fg:w="3"/><text x="15.6423%" y="879.50"></text></g><g><title>tokio::runtime::context::budget (3 samples, 0.07%)</title><rect x="15.5223%" y="853" width="0.0680%" height="15" fill="rgb(244,70,9)" fg:x="685" fg:w="3"/><text x="15.6423%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.07%)</title><rect x="15.5223%" y="837" width="0.0680%" height="15" fill="rgb(217,125,39)" fg:x="685" fg:w="3"/><text x="15.6423%" y="847.50"></text></g><g><title>tokio::runtime::context::budget::{{closure}} (3 samples, 0.07%)</title><rect x="15.5223%" y="821" width="0.0680%" height="15" fill="rgb(235,36,10)" fg:x="685" fg:w="3"/><text x="15.6423%" y="831.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::{{closure}} (3 samples, 0.07%)</title><rect x="15.5223%" y="805" width="0.0680%" height="15" fill="rgb(251,123,47)" fg:x="685" fg:w="3"/><text x="15.6423%" y="815.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (3 samples, 0.07%)</title><rect x="15.5223%" y="789" width="0.0680%" height="15" fill="rgb(221,13,13)" fg:x="685" fg:w="3"/><text x="15.6423%" y="799.50"></text></g><g><title>tokio::runtime::coop::budget (610 samples, 13.82%)</title><rect x="1.8355%" y="1061" width="13.8228%" height="15" fill="rgb(238,131,9)" fg:x="81" fg:w="610"/><text x="1.9555%" y="1071.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (610 samples, 13.82%)</title><rect x="1.8355%" y="1045" width="13.8228%" height="15" fill="rgb(211,50,8)" fg:x="81" fg:w="610"/><text x="1.9555%" y="1055.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (610 samples, 13.82%)</title><rect x="1.8355%" y="1029" width="13.8228%" height="15" fill="rgb(245,182,24)" fg:x="81" fg:w="610"/><text x="1.9555%" y="1039.50">tokio::runtime::park::CachedParkThread::block_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (610 samples, 13.82%)</title><rect x="1.8355%" y="1013" width="13.8228%" height="15" fill="rgb(242,14,37)" fg:x="81" fg:w="610"/><text x="1.9555%" y="1023.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as..</text></g><g><title>dads_gzip_thing::main::{{closure}} (610 samples, 13.82%)</title><rect x="1.8355%" y="997" width="13.8228%" height="15" fill="rgb(246,228,12)" fg:x="81" fg:w="610"/><text x="1.9555%" y="1007.50">dads_gzip_thing::main::{{closure}}</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (610 samples, 13.82%)</title><rect x="1.8355%" y="981" width="13.8228%" height="15" fill="rgb(213,55,15)" fg:x="81" fg:w="610"/><text x="1.9555%" y="991.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as..</text></g><g><title>dads_gzip_thing::start::{{closure}} (610 samples, 13.82%)</title><rect x="1.8355%" y="965" width="13.8228%" height="15" fill="rgb(209,9,3)" fg:x="81" fg:w="610"/><text x="1.9555%" y="975.50">dads_gzip_thing::start::{{closure}}</text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mutex::MutexGuard&lt;alloc::collections::vec_deque::VecDeque&lt;alloc::string::String&gt;&gt;&gt; (3 samples, 0.07%)</title><rect x="15.5903%" y="949" width="0.0680%" height="15" fill="rgb(230,59,30)" fg:x="688" fg:w="3"/><text x="15.7103%" y="959.50"></text></g><g><title>&lt;tokio::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect x="15.5903%" y="933" width="0.0680%" height="15" fill="rgb(209,121,21)" fg:x="688" fg:w="3"/><text x="15.7103%" y="943.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (3 samples, 0.07%)</title><rect x="15.5903%" y="917" width="0.0680%" height="15" fill="rgb(220,109,13)" fg:x="688" fg:w="3"/><text x="15.7103%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (1 samples, 0.02%)</title><rect x="15.6583%" y="1045" width="0.0227%" height="15" fill="rgb(232,18,1)" fg:x="691" fg:w="1"/><text x="15.7783%" y="1055.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="15.6583%" y="1029" width="0.0227%" height="15" fill="rgb(215,41,42)" fg:x="691" fg:w="1"/><text x="15.7783%" y="1039.50"></text></g><g><title>std::sync::poison::Flag::done (1 samples, 0.02%)</title><rect x="15.6583%" y="1013" width="0.0227%" height="15" fill="rgb(224,123,36)" fg:x="691" fg:w="1"/><text x="15.7783%" y="1023.50"></text></g><g><title>std::thread::panicking (1 samples, 0.02%)</title><rect x="15.6583%" y="997" width="0.0227%" height="15" fill="rgb(240,125,3)" fg:x="691" fg:w="1"/><text x="15.7783%" y="1007.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.02%)</title><rect x="15.6583%" y="981" width="0.0227%" height="15" fill="rgb(205,98,50)" fg:x="691" fg:w="1"/><text x="15.7783%" y="991.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.02%)</title><rect x="15.6583%" y="965" width="0.0227%" height="15" fill="rgb(205,185,37)" fg:x="691" fg:w="1"/><text x="15.7783%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.02%)</title><rect x="15.6583%" y="949" width="0.0227%" height="15" fill="rgb(238,207,15)" fg:x="691" fg:w="1"/><text x="15.7783%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="15.6583%" y="933" width="0.0227%" height="15" fill="rgb(213,199,42)" fg:x="691" fg:w="1"/><text x="15.7783%" y="943.50"></text></g><g><title>dads_gzip_thing (694 samples, 15.73%)</title><rect x="0.0000%" y="1413" width="15.7263%" height="15" fill="rgb(235,201,11)" fg:x="0" fg:w="694"/><text x="0.1200%" y="1423.50">dads_gzip_thing</text></g><g><title>_start (613 samples, 13.89%)</title><rect x="1.8355%" y="1397" width="13.8908%" height="15" fill="rgb(207,46,11)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1407.50">_start</text></g><g><title>__libc_start_main_impl (613 samples, 13.89%)</title><rect x="1.8355%" y="1381" width="13.8908%" height="15" fill="rgb(241,35,35)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1391.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (613 samples, 13.89%)</title><rect x="1.8355%" y="1365" width="13.8908%" height="15" fill="rgb(243,32,47)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1375.50">__libc_start_call_main</text></g><g><title>main (613 samples, 13.89%)</title><rect x="1.8355%" y="1349" width="13.8908%" height="15" fill="rgb(247,202,23)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1359.50">main</text></g><g><title>std::rt::lang_start_internal (613 samples, 13.89%)</title><rect x="1.8355%" y="1333" width="13.8908%" height="15" fill="rgb(219,102,11)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1343.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (613 samples, 13.89%)</title><rect x="1.8355%" y="1317" width="13.8908%" height="15" fill="rgb(243,110,44)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1327.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (613 samples, 13.89%)</title><rect x="1.8355%" y="1301" width="13.8908%" height="15" fill="rgb(222,74,54)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1311.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (613 samples, 13.89%)</title><rect x="1.8355%" y="1285" width="13.8908%" height="15" fill="rgb(216,99,12)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1295.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (613 samples, 13.89%)</title><rect x="1.8355%" y="1269" width="13.8908%" height="15" fill="rgb(226,22,26)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1279.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (613 samples, 13.89%)</title><rect x="1.8355%" y="1253" width="13.8908%" height="15" fill="rgb(217,163,10)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1263.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (613 samples, 13.89%)</title><rect x="1.8355%" y="1237" width="13.8908%" height="15" fill="rgb(213,25,53)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1247.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (613 samples, 13.89%)</title><rect x="1.8355%" y="1221" width="13.8908%" height="15" fill="rgb(252,105,26)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1231.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (613 samples, 13.89%)</title><rect x="1.8355%" y="1205" width="13.8908%" height="15" fill="rgb(220,39,43)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1215.50">core::ops::function::impls::&lt;impl core::ops::fu..</text></g><g><title>std::rt::lang_start::{{closure}} (613 samples, 13.89%)</title><rect x="1.8355%" y="1189" width="13.8908%" height="15" fill="rgb(229,68,48)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1199.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (613 samples, 13.89%)</title><rect x="1.8355%" y="1173" width="13.8908%" height="15" fill="rgb(252,8,32)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1183.50">std::sys_common::backtrace::__rust_begin_short_..</text></g><g><title>core::ops::function::FnOnce::call_once (613 samples, 13.89%)</title><rect x="1.8355%" y="1157" width="13.8908%" height="15" fill="rgb(223,20,43)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1167.50">core::ops::function::FnOnce::call_once</text></g><g><title>dads_gzip_thing::main (613 samples, 13.89%)</title><rect x="1.8355%" y="1141" width="13.8908%" height="15" fill="rgb(229,81,49)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1151.50">dads_gzip_thing::main</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (613 samples, 13.89%)</title><rect x="1.8355%" y="1125" width="13.8908%" height="15" fill="rgb(236,28,36)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1135.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (613 samples, 13.89%)</title><rect x="1.8355%" y="1109" width="13.8908%" height="15" fill="rgb(249,185,26)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1119.50">tokio::runtime::scheduler::multi_thread::MultiT..</text></g><g><title>tokio::runtime::context::BlockingRegionGuard::block_on (613 samples, 13.89%)</title><rect x="1.8355%" y="1093" width="13.8908%" height="15" fill="rgb(249,174,33)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1103.50">tokio::runtime::context::BlockingRegionGuard::b..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (613 samples, 13.89%)</title><rect x="1.8355%" y="1077" width="13.8908%" height="15" fill="rgb(233,201,37)" fg:x="81" fg:w="613"/><text x="1.9555%" y="1087.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (3 samples, 0.07%)</title><rect x="15.6583%" y="1061" width="0.0680%" height="15" fill="rgb(221,78,26)" fg:x="691" fg:w="3"/><text x="15.7783%" y="1071.50"></text></g><g><title>std::sync::condvar::Condvar::wait (2 samples, 0.05%)</title><rect x="15.6809%" y="1045" width="0.0453%" height="15" fill="rgb(250,127,30)" fg:x="692" fg:w="2"/><text x="15.8009%" y="1055.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (2 samples, 0.05%)</title><rect x="15.6809%" y="1029" width="0.0453%" height="15" fill="rgb(230,49,44)" fg:x="692" fg:w="2"/><text x="15.8009%" y="1039.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (2 samples, 0.05%)</title><rect x="15.6809%" y="1013" width="0.0453%" height="15" fill="rgb(229,67,23)" fg:x="692" fg:w="2"/><text x="15.8009%" y="1023.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (2 samples, 0.05%)</title><rect x="15.6809%" y="997" width="0.0453%" height="15" fill="rgb(249,83,47)" fg:x="692" fg:w="2"/><text x="15.8009%" y="1007.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (2 samples, 0.05%)</title><rect x="15.6809%" y="981" width="0.0453%" height="15" fill="rgb(215,43,3)" fg:x="692" fg:w="2"/><text x="15.8009%" y="991.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (2 samples, 0.05%)</title><rect x="15.6809%" y="965" width="0.0453%" height="15" fill="rgb(238,154,13)" fg:x="692" fg:w="2"/><text x="15.8009%" y="975.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.05%)</title><rect x="15.6809%" y="949" width="0.0453%" height="15" fill="rgb(219,56,2)" fg:x="692" fg:w="2"/><text x="15.8009%" y="959.50"></text></g><g><title>std::sys_common::thread_info::THREAD_INFO::__getit::destroy (2 samples, 0.05%)</title><rect x="15.7263%" y="1349" width="0.0453%" height="15" fill="rgb(233,0,4)" fg:x="694" fg:w="2"/><text x="15.8463%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;core::option::Option&lt;std::sys_common::thread_info::ThreadInfo&gt;&gt;&gt; (2 samples, 0.05%)</title><rect x="15.7263%" y="1333" width="0.0453%" height="15" fill="rgb(235,30,7)" fg:x="694" fg:w="2"/><text x="15.8463%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;std::sys_common::thread_info::ThreadInfo&gt;&gt;&gt; (2 samples, 0.05%)</title><rect x="15.7263%" y="1317" width="0.0453%" height="15" fill="rgb(250,79,13)" fg:x="694" fg:w="2"/><text x="15.8463%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::sys_common::thread_info::ThreadInfo&gt;&gt; (2 samples, 0.05%)</title><rect x="15.7263%" y="1301" width="0.0453%" height="15" fill="rgb(211,146,34)" fg:x="694" fg:w="2"/><text x="15.8463%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys_common::thread_info::ThreadInfo&gt; (2 samples, 0.05%)</title><rect x="15.7263%" y="1285" width="0.0453%" height="15" fill="rgb(228,22,38)" fg:x="694" fg:w="2"/><text x="15.8463%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::thread::Thread&gt; (2 samples, 0.05%)</title><rect x="15.7263%" y="1269" width="0.0453%" height="15" fill="rgb(235,168,5)" fg:x="694" fg:w="2"/><text x="15.8463%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::sync::Arc&lt;std::thread::Inner&gt;&gt;&gt; (2 samples, 0.05%)</title><rect x="15.7263%" y="1253" width="0.0453%" height="15" fill="rgb(221,155,16)" fg:x="694" fg:w="2"/><text x="15.8463%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::thread::Inner&gt;&gt; (2 samples, 0.05%)</title><rect x="15.7263%" y="1237" width="0.0453%" height="15" fill="rgb(215,215,53)" fg:x="694" fg:w="2"/><text x="15.8463%" y="1247.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="15.7263%" y="1221" width="0.0453%" height="15" fill="rgb(223,4,10)" fg:x="694" fg:w="2"/><text x="15.8463%" y="1231.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.02%)</title><rect x="15.7489%" y="1205" width="0.0227%" height="15" fill="rgb(234,103,6)" fg:x="695" fg:w="1"/><text x="15.8689%" y="1215.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.02%)</title><rect x="15.7489%" y="1189" width="0.0227%" height="15" fill="rgb(227,97,0)" fg:x="695" fg:w="1"/><text x="15.8689%" y="1199.50"></text></g><g><title>__GI___call_tls_dtors (3 samples, 0.07%)</title><rect x="15.7263%" y="1365" width="0.0680%" height="15" fill="rgb(234,150,53)" fg:x="694" fg:w="3"/><text x="15.8463%" y="1375.50"></text></g><g><title>std::thread::local::fast::destroy_value (1 samples, 0.02%)</title><rect x="15.7716%" y="1349" width="0.0227%" height="15" fill="rgb(228,201,54)" fg:x="696" fg:w="1"/><text x="15.8916%" y="1359.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::take (1 samples, 0.02%)</title><rect x="15.7716%" y="1333" width="0.0227%" height="15" fill="rgb(222,22,37)" fg:x="696" fg:w="1"/><text x="15.8916%" y="1343.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.02%)</title><rect x="15.7716%" y="1317" width="0.0227%" height="15" fill="rgb(237,53,32)" fg:x="696" fg:w="1"/><text x="15.8916%" y="1327.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="15.7716%" y="1301" width="0.0227%" height="15" fill="rgb(233,25,53)" fg:x="696" fg:w="1"/><text x="15.8916%" y="1311.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="15.7716%" y="1285" width="0.0227%" height="15" fill="rgb(210,40,34)" fg:x="696" fg:w="1"/><text x="15.8916%" y="1295.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.02%)</title><rect x="15.7716%" y="1269" width="0.0227%" height="15" fill="rgb(241,220,44)" fg:x="696" fg:w="1"/><text x="15.8916%" y="1279.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.02%)</title><rect x="15.9529%" y="1141" width="0.0227%" height="15" fill="rgb(235,28,35)" fg:x="704" fg:w="1"/><text x="16.0729%" y="1151.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="15.9529%" y="1125" width="0.0227%" height="15" fill="rgb(210,56,17)" fg:x="704" fg:w="1"/><text x="16.0729%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="15.9529%" y="1109" width="0.0227%" height="15" fill="rgb(224,130,29)" fg:x="704" fg:w="1"/><text x="16.0729%" y="1119.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="15.9529%" y="1093" width="0.0227%" height="15" fill="rgb(235,212,8)" fg:x="704" fg:w="1"/><text x="16.0729%" y="1103.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="15.9529%" y="1077" width="0.0227%" height="15" fill="rgb(223,33,50)" fg:x="704" fg:w="1"/><text x="16.0729%" y="1087.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.02%)</title><rect x="15.9529%" y="1061" width="0.0227%" height="15" fill="rgb(219,149,13)" fg:x="704" fg:w="1"/><text x="16.0729%" y="1071.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="15.9529%" y="1045" width="0.0227%" height="15" fill="rgb(250,156,29)" fg:x="704" fg:w="1"/><text x="16.0729%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(usize,std::thread::JoinHandle&lt;()&gt;)&gt;&gt; (1 samples, 0.02%)</title><rect x="15.9755%" y="1141" width="0.0227%" height="15" fill="rgb(216,193,19)" fg:x="705" fg:w="1"/><text x="16.0955%" y="1151.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (1 samples, 0.02%)</title><rect x="15.9982%" y="1141" width="0.0227%" height="15" fill="rgb(216,135,14)" fg:x="706" fg:w="1"/><text x="16.1182%" y="1151.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (1 samples, 0.02%)</title><rect x="15.9982%" y="1125" width="0.0227%" height="15" fill="rgb(241,47,5)" fg:x="706" fg:w="1"/><text x="16.1182%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::thread::Thread&gt; (1 samples, 0.02%)</title><rect x="15.9982%" y="1109" width="0.0227%" height="15" fill="rgb(233,42,35)" fg:x="706" fg:w="1"/><text x="16.1182%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::sync::Arc&lt;std::thread::Inner&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="15.9982%" y="1093" width="0.0227%" height="15" fill="rgb(231,13,6)" fg:x="706" fg:w="1"/><text x="16.1182%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::thread::Inner&gt;&gt; (1 samples, 0.02%)</title><rect x="15.9982%" y="1077" width="0.0227%" height="15" fill="rgb(207,181,40)" fg:x="706" fg:w="1"/><text x="16.1182%" y="1087.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="15.9982%" y="1061" width="0.0227%" height="15" fill="rgb(254,173,49)" fg:x="706" fg:w="1"/><text x="16.1182%" y="1071.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.02%)</title><rect x="15.9982%" y="1045" width="0.0227%" height="15" fill="rgb(221,1,38)" fg:x="706" fg:w="1"/><text x="16.1182%" y="1055.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.02%)</title><rect x="15.9982%" y="1029" width="0.0227%" height="15" fill="rgb(206,124,46)" fg:x="706" fg:w="1"/><text x="16.1182%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::blocking::pool::BlockingPool&gt; (4 samples, 0.09%)</title><rect x="15.9529%" y="1173" width="0.0906%" height="15" fill="rgb(249,21,11)" fg:x="704" fg:w="4"/><text x="16.0729%" y="1183.50"></text></g><g><title>tokio::runtime::blocking::pool::BlockingPool::shutdown (4 samples, 0.09%)</title><rect x="15.9529%" y="1157" width="0.0906%" height="15" fill="rgb(222,201,40)" fg:x="704" fg:w="4"/><text x="16.0729%" y="1167.50"></text></g><g><title>tokio::runtime::blocking::shutdown::Receiver::wait (1 samples, 0.02%)</title><rect x="16.0208%" y="1141" width="0.0227%" height="15" fill="rgb(235,61,29)" fg:x="707" fg:w="1"/><text x="16.1408%" y="1151.50"></text></g><g><title>tokio::runtime::context::BlockingRegionGuard::block_on (1 samples, 0.02%)</title><rect x="16.0208%" y="1125" width="0.0227%" height="15" fill="rgb(219,207,3)" fg:x="707" fg:w="1"/><text x="16.1408%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::runtime::Runtime&gt; (2 samples, 0.05%)</title><rect x="16.0435%" y="1173" width="0.0453%" height="15" fill="rgb(222,56,46)" fg:x="708" fg:w="2"/><text x="16.1635%" y="1183.50"></text></g><g><title>&lt;tokio::runtime::runtime::Runtime as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="16.0435%" y="1157" width="0.0453%" height="15" fill="rgb(239,76,54)" fg:x="708" fg:w="2"/><text x="16.1635%" y="1167.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::shutdown (2 samples, 0.05%)</title><rect x="16.0435%" y="1141" width="0.0453%" height="15" fill="rgb(231,124,27)" fg:x="708" fg:w="2"/><text x="16.1635%" y="1151.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::shutdown (2 samples, 0.05%)</title><rect x="16.0435%" y="1125" width="0.0453%" height="15" fill="rgb(249,195,6)" fg:x="708" fg:w="2"/><text x="16.1635%" y="1135.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::close (2 samples, 0.05%)</title><rect x="16.0435%" y="1109" width="0.0453%" height="15" fill="rgb(237,174,47)" fg:x="708" fg:w="2"/><text x="16.1635%" y="1119.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_all (2 samples, 0.05%)</title><rect x="16.0435%" y="1093" width="0.0453%" height="15" fill="rgb(206,201,31)" fg:x="708" fg:w="2"/><text x="16.1635%" y="1103.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1 samples, 0.02%)</title><rect x="16.0662%" y="1077" width="0.0227%" height="15" fill="rgb(231,57,52)" fg:x="709" fg:w="1"/><text x="16.1862%" y="1087.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (1 samples, 0.02%)</title><rect x="16.0662%" y="1061" width="0.0227%" height="15" fill="rgb(248,177,22)" fg:x="709" fg:w="1"/><text x="16.1862%" y="1071.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (1 samples, 0.02%)</title><rect x="16.0662%" y="1045" width="0.0227%" height="15" fill="rgb(215,211,37)" fg:x="709" fg:w="1"/><text x="16.1862%" y="1055.50"></text></g><g><title>core::sync::atomic::atomic_swap (1 samples, 0.02%)</title><rect x="16.0662%" y="1029" width="0.0227%" height="15" fill="rgb(241,128,51)" fg:x="709" fg:w="1"/><text x="16.1862%" y="1039.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (1 samples, 0.02%)</title><rect x="16.0888%" y="1141" width="0.0227%" height="15" fill="rgb(227,165,31)" fg:x="710" fg:w="1"/><text x="16.2088%" y="1151.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect x="16.0888%" y="1125" width="0.0227%" height="15" fill="rgb(228,167,24)" fg:x="710" fg:w="1"/><text x="16.2088%" y="1135.50"></text></g><g><title>tokio::loom::std::sys::num_cpus (1 samples, 0.02%)</title><rect x="16.0888%" y="1109" width="0.0227%" height="15" fill="rgb(228,143,12)" fg:x="710" fg:w="1"/><text x="16.2088%" y="1119.50"></text></g><g><title>num_cpus::get (1 samples, 0.02%)</title><rect x="16.0888%" y="1093" width="0.0227%" height="15" fill="rgb(249,149,8)" fg:x="710" fg:w="1"/><text x="16.2088%" y="1103.50"></text></g><g><title>num_cpus::linux::get_num_cpus (1 samples, 0.02%)</title><rect x="16.0888%" y="1077" width="0.0227%" height="15" fill="rgb(243,35,44)" fg:x="710" fg:w="1"/><text x="16.2088%" y="1087.50"></text></g><g><title>&lt;tokio::runtime::scheduler::multi_thread::park::Parker as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="16.1115%" y="1109" width="0.0453%" height="15" fill="rgb(246,89,9)" fg:x="711" fg:w="2"/><text x="16.2315%" y="1119.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="16.1115%" y="1093" width="0.0453%" height="15" fill="rgb(233,213,13)" fg:x="711" fg:w="2"/><text x="16.2315%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (2 samples, 0.05%)</title><rect x="16.1115%" y="1077" width="0.0453%" height="15" fill="rgb(233,141,41)" fg:x="711" fg:w="2"/><text x="16.2315%" y="1087.50"></text></g><g><title>core::sync::atomic::atomic_add (2 samples, 0.05%)</title><rect x="16.1115%" y="1061" width="0.0453%" height="15" fill="rgb(239,167,4)" fg:x="711" fg:w="2"/><text x="16.2315%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::enumerate::Enumerate&lt;alloc::vec::drain::Drain&lt;alloc::boxed::Box&lt;tokio::runtime::scheduler::multi_thread::worker::Core&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="16.1568%" y="1109" width="0.0227%" height="15" fill="rgb(209,217,16)" fg:x="713" fg:w="1"/><text x="16.2768%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;alloc::boxed::Box&lt;tokio::runtime::scheduler::multi_thread::worker::Core&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="16.1568%" y="1093" width="0.0227%" height="15" fill="rgb(219,88,35)" fg:x="713" fg:w="1"/><text x="16.2768%" y="1103.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="16.1568%" y="1077" width="0.0227%" height="15" fill="rgb(220,193,23)" fg:x="713" fg:w="1"/><text x="16.2768%" y="1087.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="16.1795%" y="1093" width="0.0227%" height="15" fill="rgb(230,90,52)" fg:x="714" fg:w="1"/><text x="16.2995%" y="1103.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="16.1795%" y="1077" width="0.0227%" height="15" fill="rgb(252,106,19)" fg:x="714" fg:w="1"/><text x="16.2995%" y="1087.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.02%)</title><rect x="16.1795%" y="1061" width="0.0227%" height="15" fill="rgb(206,74,20)" fg:x="714" fg:w="1"/><text x="16.2995%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="16.1795%" y="1045" width="0.0227%" height="15" fill="rgb(230,138,44)" fg:x="714" fg:w="1"/><text x="16.2995%" y="1055.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="16.1795%" y="1029" width="0.0227%" height="15" fill="rgb(235,182,43)" fg:x="714" fg:w="1"/><text x="16.2995%" y="1039.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="16.1795%" y="1013" width="0.0227%" height="15" fill="rgb(242,16,51)" fg:x="714" fg:w="1"/><text x="16.2995%" y="1023.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::new (9 samples, 0.20%)</title><rect x="16.1115%" y="1141" width="0.2039%" height="15" fill="rgb(248,9,4)" fg:x="711" fg:w="9"/><text x="16.2315%" y="1151.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::create (9 samples, 0.20%)</title><rect x="16.1115%" y="1125" width="0.2039%" height="15" fill="rgb(210,31,22)" fg:x="711" fg:w="9"/><text x="16.2315%" y="1135.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::local (6 samples, 0.14%)</title><rect x="16.1795%" y="1109" width="0.1360%" height="15" fill="rgb(239,54,39)" fg:x="714" fg:w="6"/><text x="16.2995%" y="1119.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5 samples, 0.11%)</title><rect x="16.2021%" y="1093" width="0.1133%" height="15" fill="rgb(230,99,41)" fg:x="715" fg:w="5"/><text x="16.3221%" y="1103.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5 samples, 0.11%)</title><rect x="16.2021%" y="1077" width="0.1133%" height="15" fill="rgb(253,106,12)" fg:x="715" fg:w="5"/><text x="16.3221%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::runtime::blocking::pool::Shared&gt;&gt; (3 samples, 0.07%)</title><rect x="16.3154%" y="1045" width="0.0680%" height="15" fill="rgb(213,46,41)" fg:x="720" fg:w="3"/><text x="16.4354%" y="1055.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect x="16.3154%" y="1029" width="0.0680%" height="15" fill="rgb(215,133,35)" fg:x="720" fg:w="3"/><text x="16.4354%" y="1039.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (3 samples, 0.07%)</title><rect x="16.3154%" y="1013" width="0.0680%" height="15" fill="rgb(213,28,5)" fg:x="720" fg:w="3"/><text x="16.4354%" y="1023.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (3 samples, 0.07%)</title><rect x="16.3154%" y="997" width="0.0680%" height="15" fill="rgb(215,77,49)" fg:x="720" fg:w="3"/><text x="16.4354%" y="1007.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (3 samples, 0.07%)</title><rect x="16.3154%" y="981" width="0.0680%" height="15" fill="rgb(248,100,22)" fg:x="720" fg:w="3"/><text x="16.4354%" y="991.50"></text></g><g><title>core::sync::atomic::atomic_swap (3 samples, 0.07%)</title><rect x="16.3154%" y="965" width="0.0680%" height="15" fill="rgb(208,67,9)" fg:x="720" fg:w="3"/><text x="16.4354%" y="975.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.05%)</title><rect x="16.3834%" y="981" width="0.0453%" height="15" fill="rgb(219,133,21)" fg:x="723" fg:w="2"/><text x="16.5034%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (2 samples, 0.05%)</title><rect x="16.3834%" y="965" width="0.0453%" height="15" fill="rgb(246,46,29)" fg:x="723" fg:w="2"/><text x="16.5034%" y="975.50"></text></g><g><title>alloc::ffi::c_str::CString::new (2 samples, 0.05%)</title><rect x="16.3834%" y="949" width="0.0453%" height="15" fill="rgb(246,185,52)" fg:x="723" fg:w="2"/><text x="16.5034%" y="959.50"></text></g><g><title>&lt;T as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (2 samples, 0.05%)</title><rect x="16.3834%" y="933" width="0.0453%" height="15" fill="rgb(252,136,11)" fg:x="723" fg:w="2"/><text x="16.5034%" y="943.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.02%)</title><rect x="16.4061%" y="917" width="0.0227%" height="15" fill="rgb(219,138,53)" fg:x="724" fg:w="1"/><text x="16.5261%" y="927.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (6 samples, 0.14%)</title><rect x="16.3154%" y="1061" width="0.1360%" height="15" fill="rgb(211,51,23)" fg:x="720" fg:w="6"/><text x="16.4354%" y="1071.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread (3 samples, 0.07%)</title><rect x="16.3834%" y="1045" width="0.0680%" height="15" fill="rgb(247,221,28)" fg:x="723" fg:w="3"/><text x="16.5034%" y="1055.50"></text></g><g><title>std::thread::Builder::spawn (3 samples, 0.07%)</title><rect x="16.3834%" y="1029" width="0.0680%" height="15" fill="rgb(251,222,45)" fg:x="723" fg:w="3"/><text x="16.5034%" y="1039.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (3 samples, 0.07%)</title><rect x="16.3834%" y="1013" width="0.0680%" height="15" fill="rgb(217,162,53)" fg:x="723" fg:w="3"/><text x="16.5034%" y="1023.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (3 samples, 0.07%)</title><rect x="16.3834%" y="997" width="0.0680%" height="15" fill="rgb(229,93,14)" fg:x="723" fg:w="3"/><text x="16.5034%" y="1007.50"></text></g><g><title>std::sys::unix::thread::Thread::new (1 samples, 0.02%)</title><rect x="16.4287%" y="981" width="0.0227%" height="15" fill="rgb(209,67,49)" fg:x="725" fg:w="1"/><text x="16.5487%" y="991.50"></text></g><g><title>__pthread_create_2_1 (1 samples, 0.02%)</title><rect x="16.4287%" y="965" width="0.0227%" height="15" fill="rgb(213,87,29)" fg:x="725" fg:w="1"/><text x="16.5487%" y="975.50"></text></g><g><title>allocate_stack (1 samples, 0.02%)</title><rect x="16.4287%" y="949" width="0.0227%" height="15" fill="rgb(205,151,52)" fg:x="725" fg:w="1"/><text x="16.5487%" y="959.50"></text></g><g><title>get_cached_stack (1 samples, 0.02%)</title><rect x="16.4287%" y="933" width="0.0227%" height="15" fill="rgb(253,215,39)" fg:x="725" fg:w="1"/><text x="16.5487%" y="943.50"></text></g><g><title>__GI__dl_allocate_tls_init (1 samples, 0.02%)</title><rect x="16.4287%" y="917" width="0.0227%" height="15" fill="rgb(221,220,41)" fg:x="725" fg:w="1"/><text x="16.5487%" y="927.50"></text></g><g><title>tokio::runtime::builder::Builder::build (17 samples, 0.39%)</title><rect x="16.0888%" y="1173" width="0.3852%" height="15" fill="rgb(218,133,21)" fg:x="710" fg:w="17"/><text x="16.2088%" y="1183.50"></text></g><g><title>tokio::runtime::builder::Builder::build_threaded_runtime (17 samples, 0.39%)</title><rect x="16.0888%" y="1157" width="0.3852%" height="15" fill="rgb(221,193,43)" fg:x="710" fg:w="17"/><text x="16.2088%" y="1167.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (7 samples, 0.16%)</title><rect x="16.3154%" y="1141" width="0.1586%" height="15" fill="rgb(240,128,52)" fg:x="720" fg:w="7"/><text x="16.4354%" y="1151.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (7 samples, 0.16%)</title><rect x="16.3154%" y="1125" width="0.1586%" height="15" fill="rgb(253,114,12)" fg:x="720" fg:w="7"/><text x="16.4354%" y="1135.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn_blocking (7 samples, 0.16%)</title><rect x="16.3154%" y="1109" width="0.1586%" height="15" fill="rgb(215,223,47)" fg:x="720" fg:w="7"/><text x="16.4354%" y="1119.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (7 samples, 0.16%)</title><rect x="16.3154%" y="1093" width="0.1586%" height="15" fill="rgb(248,225,23)" fg:x="720" fg:w="7"/><text x="16.4354%" y="1103.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (7 samples, 0.16%)</title><rect x="16.3154%" y="1077" width="0.1586%" height="15" fill="rgb(250,108,0)" fg:x="720" fg:w="7"/><text x="16.4354%" y="1087.50"></text></g><g><title>tokio::runtime::task::unowned (1 samples, 0.02%)</title><rect x="16.4514%" y="1061" width="0.0227%" height="15" fill="rgb(228,208,7)" fg:x="726" fg:w="1"/><text x="16.5714%" y="1071.50"></text></g><g><title>tokio::runtime::task::new_task (1 samples, 0.02%)</title><rect x="16.4514%" y="1045" width="0.0227%" height="15" fill="rgb(244,45,10)" fg:x="726" fg:w="1"/><text x="16.5714%" y="1055.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (1 samples, 0.02%)</title><rect x="16.4514%" y="1029" width="0.0227%" height="15" fill="rgb(207,125,25)" fg:x="726" fg:w="1"/><text x="16.5714%" y="1039.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (1 samples, 0.02%)</title><rect x="16.4514%" y="1013" width="0.0227%" height="15" fill="rgb(210,195,18)" fg:x="726" fg:w="1"/><text x="16.5714%" y="1023.50"></text></g><g><title>flate2::gz::read::GzEncoder&lt;R&gt;::new (12 samples, 0.27%)</title><rect x="16.4741%" y="1029" width="0.2719%" height="15" fill="rgb(249,80,12)" fg:x="727" fg:w="12"/><text x="16.5941%" y="1039.50"></text></g><g><title>flate2::gz::GzBuilder::read (12 samples, 0.27%)</title><rect x="16.4741%" y="1013" width="0.2719%" height="15" fill="rgb(221,65,9)" fg:x="727" fg:w="12"/><text x="16.5941%" y="1023.50"></text></g><g><title>flate2::gz::GzBuilder::buf_read (12 samples, 0.27%)</title><rect x="16.4741%" y="997" width="0.2719%" height="15" fill="rgb(235,49,36)" fg:x="727" fg:w="12"/><text x="16.5941%" y="1007.50"></text></g><g><title>flate2::gz::bufread::gz_encoder (12 samples, 0.27%)</title><rect x="16.4741%" y="981" width="0.2719%" height="15" fill="rgb(225,32,20)" fg:x="727" fg:w="12"/><text x="16.5941%" y="991.50"></text></g><g><title>flate2::deflate::bufread::DeflateEncoder&lt;R&gt;::new (12 samples, 0.27%)</title><rect x="16.4741%" y="965" width="0.2719%" height="15" fill="rgb(215,141,46)" fg:x="727" fg:w="12"/><text x="16.5941%" y="975.50"></text></g><g><title>flate2::mem::Compress::new (12 samples, 0.27%)</title><rect x="16.4741%" y="949" width="0.2719%" height="15" fill="rgb(250,160,47)" fg:x="727" fg:w="12"/><text x="16.5941%" y="959.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::make (12 samples, 0.27%)</title><rect x="16.4741%" y="933" width="0.2719%" height="15" fill="rgb(216,222,40)" fg:x="727" fg:w="12"/><text x="16.5941%" y="943.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (12 samples, 0.27%)</title><rect x="16.4741%" y="917" width="0.2719%" height="15" fill="rgb(234,217,39)" fg:x="727" fg:w="12"/><text x="16.5941%" y="927.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.27%)</title><rect x="16.4741%" y="901" width="0.2719%" height="15" fill="rgb(207,178,40)" fg:x="727" fg:w="12"/><text x="16.5941%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.27%)</title><rect x="16.4741%" y="885" width="0.2719%" height="15" fill="rgb(221,136,13)" fg:x="727" fg:w="12"/><text x="16.5941%" y="895.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.27%)</title><rect x="16.4741%" y="869" width="0.2719%" height="15" fill="rgb(249,199,10)" fg:x="727" fg:w="12"/><text x="16.5941%" y="879.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.27%)</title><rect x="16.4741%" y="853" width="0.2719%" height="15" fill="rgb(249,222,13)" fg:x="727" fg:w="12"/><text x="16.5941%" y="863.50"></text></g><g><title>__rust_probestack (10 samples, 0.23%)</title><rect x="16.5194%" y="837" width="0.2266%" height="15" fill="rgb(244,185,38)" fg:x="729" fg:w="10"/><text x="16.6394%" y="847.50"></text></g><g><title>&lt;miniz_oxide::deflate::core::TDEFLStatus as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="16.7460%" y="821" width="0.0227%" height="15" fill="rgb(236,202,9)" fg:x="739" fg:w="1"/><text x="16.8660%" y="831.50"></text></g><g><title>miniz_oxide::deflate::core::CallbackOxide::flush_output (1 samples, 0.02%)</title><rect x="16.7686%" y="773" width="0.0227%" height="15" fill="rgb(250,229,37)" fg:x="740" fg:w="1"/><text x="16.8886%" y="783.50"></text></g><g><title>miniz_oxide::deflate::core::CallbackBuf::flush_output (1 samples, 0.02%)</title><rect x="16.7686%" y="757" width="0.0227%" height="15" fill="rgb(206,174,23)" fg:x="740" fg:w="1"/><text x="16.8886%" y="767.50"></text></g><g><title>tokio::runtime::coop::budget (15 samples, 0.34%)</title><rect x="16.4741%" y="1109" width="0.3399%" height="15" fill="rgb(211,33,43)" fg:x="727" fg:w="15"/><text x="16.5941%" y="1119.50"></text></g><g><title>tokio::runtime::coop::with_budget (15 samples, 0.34%)</title><rect x="16.4741%" y="1093" width="0.3399%" height="15" fill="rgb(245,58,50)" fg:x="727" fg:w="15"/><text x="16.5941%" y="1103.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (15 samples, 0.34%)</title><rect x="16.4741%" y="1077" width="0.3399%" height="15" fill="rgb(244,68,36)" fg:x="727" fg:w="15"/><text x="16.5941%" y="1087.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.34%)</title><rect x="16.4741%" y="1061" width="0.3399%" height="15" fill="rgb(232,229,15)" fg:x="727" fg:w="15"/><text x="16.5941%" y="1071.50"></text></g><g><title>dads_gzip_thing::enc::GzEncoderAsync::flush::{{closure}} (15 samples, 0.34%)</title><rect x="16.4741%" y="1045" width="0.3399%" height="15" fill="rgb(254,30,23)" fg:x="727" fg:w="15"/><text x="16.5941%" y="1055.50"></text></g><g><title>std::io::Read::read_to_end (3 samples, 0.07%)</title><rect x="16.7460%" y="1029" width="0.0680%" height="15" fill="rgb(235,160,14)" fg:x="739" fg:w="3"/><text x="16.8660%" y="1039.50"></text></g><g><title>std::io::default_read_to_end (3 samples, 0.07%)</title><rect x="16.7460%" y="1013" width="0.0680%" height="15" fill="rgb(212,155,44)" fg:x="739" fg:w="3"/><text x="16.8660%" y="1023.50"></text></g><g><title>std::io::Read::read_buf (3 samples, 0.07%)</title><rect x="16.7460%" y="997" width="0.0680%" height="15" fill="rgb(226,2,50)" fg:x="739" fg:w="3"/><text x="16.8660%" y="1007.50"></text></g><g><title>std::io::default_read_buf (3 samples, 0.07%)</title><rect x="16.7460%" y="981" width="0.0680%" height="15" fill="rgb(234,177,6)" fg:x="739" fg:w="3"/><text x="16.8660%" y="991.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (3 samples, 0.07%)</title><rect x="16.7460%" y="965" width="0.0680%" height="15" fill="rgb(217,24,9)" fg:x="739" fg:w="3"/><text x="16.8660%" y="975.50"></text></g><g><title>&lt;flate2::gz::read::GzEncoder&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.07%)</title><rect x="16.7460%" y="949" width="0.0680%" height="15" fill="rgb(220,13,46)" fg:x="739" fg:w="3"/><text x="16.8660%" y="959.50"></text></g><g><title>&lt;flate2::gz::bufread::GzEncoder&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.07%)</title><rect x="16.7460%" y="933" width="0.0680%" height="15" fill="rgb(239,221,27)" fg:x="739" fg:w="3"/><text x="16.8660%" y="943.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateEncoder&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.07%)</title><rect x="16.7460%" y="917" width="0.0680%" height="15" fill="rgb(222,198,25)" fg:x="739" fg:w="3"/><text x="16.8660%" y="927.50"></text></g><g><title>flate2::zio::read (3 samples, 0.07%)</title><rect x="16.7460%" y="901" width="0.0680%" height="15" fill="rgb(211,99,13)" fg:x="739" fg:w="3"/><text x="16.8660%" y="911.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run (3 samples, 0.07%)</title><rect x="16.7460%" y="885" width="0.0680%" height="15" fill="rgb(232,111,31)" fg:x="739" fg:w="3"/><text x="16.8660%" y="895.50"></text></g><g><title>flate2::mem::Compress::compress (3 samples, 0.07%)</title><rect x="16.7460%" y="869" width="0.0680%" height="15" fill="rgb(245,82,37)" fg:x="739" fg:w="3"/><text x="16.8660%" y="879.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::compress (3 samples, 0.07%)</title><rect x="16.7460%" y="853" width="0.0680%" height="15" fill="rgb(227,149,46)" fg:x="739" fg:w="3"/><text x="16.8660%" y="863.50"></text></g><g><title>miniz_oxide::deflate::stream::deflate (3 samples, 0.07%)</title><rect x="16.7460%" y="837" width="0.0680%" height="15" fill="rgb(218,36,50)" fg:x="739" fg:w="3"/><text x="16.8660%" y="847.50"></text></g><g><title>miniz_oxide::deflate::core::compress (2 samples, 0.05%)</title><rect x="16.7686%" y="821" width="0.0453%" height="15" fill="rgb(226,80,48)" fg:x="740" fg:w="2"/><text x="16.8886%" y="831.50"></text></g><g><title>miniz_oxide::deflate::core::compress_inner (2 samples, 0.05%)</title><rect x="16.7686%" y="805" width="0.0453%" height="15" fill="rgb(238,224,15)" fg:x="740" fg:w="2"/><text x="16.8886%" y="815.50"></text></g><g><title>miniz_oxide::deflate::core::flush_block (2 samples, 0.05%)</title><rect x="16.7686%" y="789" width="0.0453%" height="15" fill="rgb(241,136,10)" fg:x="740" fg:w="2"/><text x="16.8886%" y="799.50"></text></g><g><title>miniz_oxide::deflate::core::compress_block (1 samples, 0.02%)</title><rect x="16.7913%" y="773" width="0.0227%" height="15" fill="rgb(208,32,45)" fg:x="741" fg:w="1"/><text x="16.9113%" y="783.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::start_static_block (1 samples, 0.02%)</title><rect x="16.7913%" y="757" width="0.0227%" height="15" fill="rgb(207,135,9)" fg:x="741" fg:w="1"/><text x="16.9113%" y="767.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::optimize_table (1 samples, 0.02%)</title><rect x="16.7913%" y="741" width="0.0227%" height="15" fill="rgb(206,86,44)" fg:x="741" fg:w="1"/><text x="16.9113%" y="751.50"></text></g><g><title>&lt;dads_gzip_thing::enc::GzEncoderAsync as core::ops::drop::Drop&gt;::drop::{{closure}}::{{closure}} (39 samples, 0.88%)</title><rect x="15.9529%" y="1189" width="0.8838%" height="15" fill="rgb(245,177,15)" fg:x="704" fg:w="39"/><text x="16.0729%" y="1199.50">&lt;..</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (16 samples, 0.36%)</title><rect x="16.4741%" y="1173" width="0.3626%" height="15" fill="rgb(206,64,50)" fg:x="727" fg:w="16"/><text x="16.5941%" y="1183.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (16 samples, 0.36%)</title><rect x="16.4741%" y="1157" width="0.3626%" height="15" fill="rgb(234,36,40)" fg:x="727" fg:w="16"/><text x="16.5941%" y="1167.50"></text></g><g><title>tokio::runtime::context::BlockingRegionGuard::block_on (16 samples, 0.36%)</title><rect x="16.4741%" y="1141" width="0.3626%" height="15" fill="rgb(213,64,8)" fg:x="727" fg:w="16"/><text x="16.5941%" y="1151.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (16 samples, 0.36%)</title><rect x="16.4741%" y="1125" width="0.3626%" height="15" fill="rgb(210,75,36)" fg:x="727" fg:w="16"/><text x="16.5941%" y="1135.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::waker (1 samples, 0.02%)</title><rect x="16.8140%" y="1109" width="0.0227%" height="15" fill="rgb(229,88,21)" fg:x="742" fg:w="1"/><text x="16.9340%" y="1119.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::unpark (1 samples, 0.02%)</title><rect x="16.8140%" y="1093" width="0.0227%" height="15" fill="rgb(252,204,47)" fg:x="742" fg:w="1"/><text x="16.9340%" y="1103.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::with_current (1 samples, 0.02%)</title><rect x="16.8140%" y="1077" width="0.0227%" height="15" fill="rgb(208,77,27)" fg:x="742" fg:w="1"/><text x="16.9340%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="16.8140%" y="1061" width="0.0227%" height="15" fill="rgb(221,76,26)" fg:x="742" fg:w="1"/><text x="16.9340%" y="1071.50"></text></g><g><title>tokio::runtime::park::CURRENT_PARKER::__getit (1 samples, 0.02%)</title><rect x="16.8140%" y="1045" width="0.0227%" height="15" fill="rgb(225,139,18)" fg:x="742" fg:w="1"/><text x="16.9340%" y="1055.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="16.8140%" y="1029" width="0.0227%" height="15" fill="rgb(230,137,11)" fg:x="742" fg:w="1"/><text x="16.9340%" y="1039.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="16.8140%" y="1013" width="0.0227%" height="15" fill="rgb(212,28,1)" fg:x="742" fg:w="1"/><text x="16.9340%" y="1023.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="16.8140%" y="997" width="0.0227%" height="15" fill="rgb(248,164,17)" fg:x="742" fg:w="1"/><text x="16.9340%" y="1007.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.05%)</title><rect x="16.8593%" y="1109" width="0.0453%" height="15" fill="rgb(222,171,42)" fg:x="744" fg:w="2"/><text x="16.9793%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::oneshot::Sender&lt;()&gt;&gt; (2 samples, 0.05%)</title><rect x="16.8593%" y="1093" width="0.0453%" height="15" fill="rgb(243,84,45)" fg:x="744" fg:w="2"/><text x="16.9793%" y="1103.50"></text></g><g><title>&lt;tokio::sync::oneshot::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="16.8593%" y="1077" width="0.0453%" height="15" fill="rgb(252,49,23)" fg:x="744" fg:w="2"/><text x="16.9793%" y="1087.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::complete (2 samples, 0.05%)</title><rect x="16.8593%" y="1061" width="0.0453%" height="15" fill="rgb(215,19,7)" fg:x="744" fg:w="2"/><text x="16.9793%" y="1071.50"></text></g><g><title>tokio::sync::oneshot::State::set_complete (2 samples, 0.05%)</title><rect x="16.8593%" y="1045" width="0.0453%" height="15" fill="rgb(238,81,41)" fg:x="744" fg:w="2"/><text x="16.9793%" y="1055.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (1 samples, 0.02%)</title><rect x="16.8819%" y="1029" width="0.0227%" height="15" fill="rgb(210,199,37)" fg:x="745" fg:w="1"/><text x="17.0019%" y="1039.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.02%)</title><rect x="16.8819%" y="1013" width="0.0227%" height="15" fill="rgb(244,192,49)" fg:x="745" fg:w="1"/><text x="17.0019%" y="1023.50"></text></g><g><title>core::mem::drop (4 samples, 0.09%)</title><rect x="16.8593%" y="1173" width="0.0906%" height="15" fill="rgb(226,211,11)" fg:x="744" fg:w="4"/><text x="16.9793%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::blocking::shutdown::Sender&gt; (4 samples, 0.09%)</title><rect x="16.8593%" y="1157" width="0.0906%" height="15" fill="rgb(236,162,54)" fg:x="744" fg:w="4"/><text x="16.9793%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Sender&lt;()&gt;&gt;&gt; (4 samples, 0.09%)</title><rect x="16.8593%" y="1141" width="0.0906%" height="15" fill="rgb(220,229,9)" fg:x="744" fg:w="4"/><text x="16.9793%" y="1151.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.09%)</title><rect x="16.8593%" y="1125" width="0.0906%" height="15" fill="rgb(250,87,22)" fg:x="744" fg:w="4"/><text x="16.9793%" y="1135.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.05%)</title><rect x="16.9046%" y="1109" width="0.0453%" height="15" fill="rgb(239,43,17)" fg:x="746" fg:w="2"/><text x="17.0246%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.05%)</title><rect x="16.9046%" y="1093" width="0.0453%" height="15" fill="rgb(231,177,25)" fg:x="746" fg:w="2"/><text x="17.0246%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::handle::EnterGuard&gt; (1 samples, 0.02%)</title><rect x="16.9499%" y="1173" width="0.0227%" height="15" fill="rgb(219,179,1)" fg:x="748" fg:w="1"/><text x="17.0699%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::context::SetCurrentGuard&gt; (1 samples, 0.02%)</title><rect x="16.9499%" y="1157" width="0.0227%" height="15" fill="rgb(238,219,53)" fg:x="748" fg:w="1"/><text x="17.0699%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::multi_thread::park::Unparker&gt; (1 samples, 0.02%)</title><rect x="16.9952%" y="1013" width="0.0227%" height="15" fill="rgb(232,167,36)" fg:x="750" fg:w="1"/><text x="17.1152%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::park::Inner&gt;&gt; (1 samples, 0.02%)</title><rect x="16.9952%" y="997" width="0.0227%" height="15" fill="rgb(244,19,51)" fg:x="750" fg:w="1"/><text x="17.1152%" y="1007.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="16.9952%" y="981" width="0.0227%" height="15" fill="rgb(224,6,22)" fg:x="750" fg:w="1"/><text x="17.1152%" y="991.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.02%)</title><rect x="16.9952%" y="965" width="0.0227%" height="15" fill="rgb(224,145,5)" fg:x="750" fg:w="1"/><text x="17.1152%" y="975.50"></text></g><g><title>core::mem::drop (1 samples, 0.02%)</title><rect x="16.9952%" y="949" width="0.0227%" height="15" fill="rgb(234,130,49)" fg:x="750" fg:w="1"/><text x="17.1152%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;tokio::runtime::scheduler::multi_thread::park::Inner&gt;&gt; (1 samples, 0.02%)</title><rect x="16.9952%" y="933" width="0.0227%" height="15" fill="rgb(254,6,2)" fg:x="750" fg:w="1"/><text x="17.1152%" y="943.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="16.9952%" y="917" width="0.0227%" height="15" fill="rgb(208,96,46)" fg:x="750" fg:w="1"/><text x="17.1152%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.02%)</title><rect x="16.9952%" y="901" width="0.0227%" height="15" fill="rgb(239,3,39)" fg:x="750" fg:w="1"/><text x="17.1152%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.02%)</title><rect x="16.9952%" y="885" width="0.0227%" height="15" fill="rgb(233,210,1)" fg:x="750" fg:w="1"/><text x="17.1152%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::handle::Handle&gt; (3 samples, 0.07%)</title><rect x="16.9726%" y="1173" width="0.0680%" height="15" fill="rgb(244,137,37)" fg:x="749" fg:w="3"/><text x="17.0926%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::Handle&gt; (3 samples, 0.07%)</title><rect x="16.9726%" y="1157" width="0.0680%" height="15" fill="rgb(240,136,2)" fg:x="749" fg:w="3"/><text x="17.0926%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt; (3 samples, 0.07%)</title><rect x="16.9726%" y="1141" width="0.0680%" height="15" fill="rgb(239,18,37)" fg:x="749" fg:w="3"/><text x="17.0926%" y="1151.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect x="16.9726%" y="1125" width="0.0680%" height="15" fill="rgb(218,185,22)" fg:x="749" fg:w="3"/><text x="17.0926%" y="1135.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.07%)</title><rect x="16.9726%" y="1109" width="0.0680%" height="15" fill="rgb(225,218,4)" fg:x="749" fg:w="3"/><text x="17.0926%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt; (3 samples, 0.07%)</title><rect x="16.9726%" y="1093" width="0.0680%" height="15" fill="rgb(230,182,32)" fg:x="749" fg:w="3"/><text x="17.0926%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::multi_thread::worker::Shared&gt; (3 samples, 0.07%)</title><rect x="16.9726%" y="1077" width="0.0680%" height="15" fill="rgb(242,56,43)" fg:x="749" fg:w="3"/><text x="17.0926%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[tokio::runtime::scheduler::multi_thread::worker::Remote]&gt;&gt; (3 samples, 0.07%)</title><rect x="16.9726%" y="1061" width="0.0680%" height="15" fill="rgb(233,99,24)" fg:x="749" fg:w="3"/><text x="17.0926%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tokio::runtime::scheduler::multi_thread::worker::Remote]&gt; (3 samples, 0.07%)</title><rect x="16.9726%" y="1045" width="0.0680%" height="15" fill="rgb(234,209,42)" fg:x="749" fg:w="3"/><text x="17.0926%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::multi_thread::worker::Remote&gt; (2 samples, 0.05%)</title><rect x="16.9952%" y="1029" width="0.0453%" height="15" fill="rgb(227,7,12)" fg:x="750" fg:w="2"/><text x="17.1152%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::multi_thread::queue::Steal&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="17.0179%" y="1013" width="0.0227%" height="15" fill="rgb(245,203,43)" fg:x="751" fg:w="1"/><text x="17.1379%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::queue::Inner&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="17.0179%" y="997" width="0.0227%" height="15" fill="rgb(238,205,33)" fg:x="751" fg:w="1"/><text x="17.1379%" y="1007.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="17.0179%" y="981" width="0.0227%" height="15" fill="rgb(231,56,7)" fg:x="751" fg:w="1"/><text x="17.1379%" y="991.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.02%)</title><rect x="17.0179%" y="965" width="0.0227%" height="15" fill="rgb(244,186,29)" fg:x="751" fg:w="1"/><text x="17.1379%" y="975.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.02%)</title><rect x="17.0179%" y="949" width="0.0227%" height="15" fill="rgb(234,111,31)" fg:x="751" fg:w="1"/><text x="17.1379%" y="959.50"></text></g><g><title>std::sys::unix::futex::futex_wait (6 samples, 0.14%)</title><rect x="17.2218%" y="1093" width="0.1360%" height="15" fill="rgb(241,149,10)" fg:x="760" fg:w="6"/><text x="17.3418%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (2 samples, 0.05%)</title><rect x="17.3805%" y="1077" width="0.0453%" height="15" fill="rgb(249,206,44)" fg:x="767" fg:w="2"/><text x="17.5005%" y="1087.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.05%)</title><rect x="17.3805%" y="1061" width="0.0453%" height="15" fill="rgb(251,153,30)" fg:x="767" fg:w="2"/><text x="17.5005%" y="1071.50"></text></g><g><title>core::hint::spin_loop (3 samples, 0.07%)</title><rect x="17.4258%" y="1045" width="0.0680%" height="15" fill="rgb(239,152,38)" fg:x="769" fg:w="3"/><text x="17.5458%" y="1055.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (3 samples, 0.07%)</title><rect x="17.4258%" y="1029" width="0.0680%" height="15" fill="rgb(249,139,47)" fg:x="769" fg:w="3"/><text x="17.5458%" y="1039.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (17 samples, 0.39%)</title><rect x="17.1312%" y="1157" width="0.3852%" height="15" fill="rgb(244,64,35)" fg:x="756" fg:w="17"/><text x="17.2512%" y="1167.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (17 samples, 0.39%)</title><rect x="17.1312%" y="1141" width="0.3852%" height="15" fill="rgb(216,46,15)" fg:x="756" fg:w="17"/><text x="17.2512%" y="1151.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_timeout (16 samples, 0.36%)</title><rect x="17.1539%" y="1125" width="0.3626%" height="15" fill="rgb(250,74,19)" fg:x="757" fg:w="16"/><text x="17.2739%" y="1135.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (15 samples, 0.34%)</title><rect x="17.1765%" y="1109" width="0.3399%" height="15" fill="rgb(249,42,33)" fg:x="758" fg:w="15"/><text x="17.2965%" y="1119.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (7 samples, 0.16%)</title><rect x="17.3578%" y="1093" width="0.1586%" height="15" fill="rgb(242,149,17)" fg:x="766" fg:w="7"/><text x="17.4778%" y="1103.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (4 samples, 0.09%)</title><rect x="17.4258%" y="1077" width="0.0906%" height="15" fill="rgb(244,29,21)" fg:x="769" fg:w="4"/><text x="17.5458%" y="1087.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (4 samples, 0.09%)</title><rect x="17.4258%" y="1061" width="0.0906%" height="15" fill="rgb(220,130,37)" fg:x="769" fg:w="4"/><text x="17.5458%" y="1071.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.02%)</title><rect x="17.4938%" y="1045" width="0.0227%" height="15" fill="rgb(211,67,2)" fg:x="772" fg:w="1"/><text x="17.6138%" y="1055.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="17.4938%" y="1029" width="0.0227%" height="15" fill="rgb(235,68,52)" fg:x="772" fg:w="1"/><text x="17.6138%" y="1039.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (3 samples, 0.07%)</title><rect x="17.5391%" y="1093" width="0.0680%" height="15" fill="rgb(246,142,3)" fg:x="774" fg:w="3"/><text x="17.6591%" y="1103.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.07%)</title><rect x="17.5391%" y="1077" width="0.0680%" height="15" fill="rgb(241,25,7)" fg:x="774" fg:w="3"/><text x="17.6591%" y="1087.50"></text></g><g><title>core::hint::spin_loop (73 samples, 1.65%)</title><rect x="17.8790%" y="1061" width="1.6542%" height="15" fill="rgb(242,119,39)" fg:x="789" fg:w="73"/><text x="17.9990%" y="1071.50">cor..</text></g><g><title>core::core_arch::x86::sse2::_mm_pause (73 samples, 1.65%)</title><rect x="17.8790%" y="1045" width="1.6542%" height="15" fill="rgb(241,98,45)" fg:x="789" fg:w="73"/><text x="17.9990%" y="1055.50">cor..</text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (127 samples, 2.88%)</title><rect x="17.5164%" y="1157" width="2.8779%" height="15" fill="rgb(254,28,30)" fg:x="773" fg:w="127"/><text x="17.6364%" y="1167.50">tokio::l..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (127 samples, 2.88%)</title><rect x="17.5164%" y="1141" width="2.8779%" height="15" fill="rgb(241,142,54)" fg:x="773" fg:w="127"/><text x="17.6364%" y="1151.50">std::syn..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (127 samples, 2.88%)</title><rect x="17.5164%" y="1125" width="2.8779%" height="15" fill="rgb(222,85,15)" fg:x="773" fg:w="127"/><text x="17.6364%" y="1135.50">std::sys..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (127 samples, 2.88%)</title><rect x="17.5164%" y="1109" width="2.8779%" height="15" fill="rgb(210,85,47)" fg:x="773" fg:w="127"/><text x="17.6364%" y="1119.50">std::sys..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (123 samples, 2.79%)</title><rect x="17.6071%" y="1093" width="2.7872%" height="15" fill="rgb(224,206,25)" fg:x="777" fg:w="123"/><text x="17.7271%" y="1103.50">std::sy..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (123 samples, 2.79%)</title><rect x="17.6071%" y="1077" width="2.7872%" height="15" fill="rgb(243,201,19)" fg:x="777" fg:w="123"/><text x="17.7271%" y="1087.50">std::sy..</text></g><g><title>core::sync::atomic::AtomicU32::load (38 samples, 0.86%)</title><rect x="19.5332%" y="1061" width="0.8611%" height="15" fill="rgb(236,59,4)" fg:x="862" fg:w="38"/><text x="19.6532%" y="1071.50">c..</text></g><g><title>core::sync::atomic::atomic_load (38 samples, 0.86%)</title><rect x="19.5332%" y="1045" width="0.8611%" height="15" fill="rgb(254,179,45)" fg:x="862" fg:w="38"/><text x="19.6532%" y="1055.50">c..</text></g><g><title>tokio::runtime::blocking::pool::SpawnerMetrics::inc_num_idle_threads (1 samples, 0.02%)</title><rect x="20.3943%" y="1157" width="0.0227%" height="15" fill="rgb(226,14,10)" fg:x="900" fg:w="1"/><text x="20.5143%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.02%)</title><rect x="20.3943%" y="1141" width="0.0227%" height="15" fill="rgb(244,27,41)" fg:x="900" fg:w="1"/><text x="20.5143%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.02%)</title><rect x="20.3943%" y="1125" width="0.0227%" height="15" fill="rgb(235,35,32)" fg:x="900" fg:w="1"/><text x="20.5143%" y="1135.50"></text></g><g><title>core::mem::drop (1 samples, 0.02%)</title><rect x="20.4169%" y="1125" width="0.0227%" height="15" fill="rgb(218,68,31)" fg:x="901" fg:w="1"/><text x="20.5369%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::Task&lt;tokio::runtime::blocking::schedule::NoopSchedule&gt;&gt; (1 samples, 0.02%)</title><rect x="20.4169%" y="1109" width="0.0227%" height="15" fill="rgb(207,120,37)" fg:x="901" fg:w="1"/><text x="20.5369%" y="1119.50"></text></g><g><title>&lt;tokio::runtime::task::Task&lt;S&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="20.4169%" y="1093" width="0.0227%" height="15" fill="rgb(227,98,0)" fg:x="901" fg:w="1"/><text x="20.5369%" y="1103.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::dealloc (1 samples, 0.02%)</title><rect x="20.4169%" y="1077" width="0.0227%" height="15" fill="rgb(207,7,3)" fg:x="901" fg:w="1"/><text x="20.5369%" y="1087.50"></text></g><g><title>tokio::runtime::park::wake_by_ref (1 samples, 0.02%)</title><rect x="20.4623%" y="917" width="0.0227%" height="15" fill="rgb(206,98,19)" fg:x="903" fg:w="1"/><text x="20.5823%" y="927.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (1 samples, 0.02%)</title><rect x="20.4623%" y="901" width="0.0227%" height="15" fill="rgb(217,5,26)" fg:x="903" fg:w="1"/><text x="20.5823%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (1 samples, 0.02%)</title><rect x="20.4623%" y="885" width="0.0227%" height="15" fill="rgb(235,190,38)" fg:x="903" fg:w="1"/><text x="20.5823%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_swap (1 samples, 0.02%)</title><rect x="20.4623%" y="869" width="0.0227%" height="15" fill="rgb(247,86,24)" fg:x="903" fg:w="1"/><text x="20.5823%" y="879.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (2 samples, 0.05%)</title><rect x="20.4623%" y="1093" width="0.0453%" height="15" fill="rgb(205,101,16)" fg:x="903" fg:w="2"/><text x="20.5823%" y="1103.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.05%)</title><rect x="20.4623%" y="1077" width="0.0453%" height="15" fill="rgb(246,168,33)" fg:x="903" fg:w="2"/><text x="20.5823%" y="1087.50"></text></g><g><title>std::panicking::try (2 samples, 0.05%)</title><rect x="20.4623%" y="1061" width="0.0453%" height="15" fill="rgb(231,114,1)" fg:x="903" fg:w="2"/><text x="20.5823%" y="1071.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.05%)</title><rect x="20.4623%" y="1045" width="0.0453%" height="15" fill="rgb(207,184,53)" fg:x="903" fg:w="2"/><text x="20.5823%" y="1055.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.05%)</title><rect x="20.4623%" y="1029" width="0.0453%" height="15" fill="rgb(224,95,51)" fg:x="903" fg:w="2"/><text x="20.5823%" y="1039.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.05%)</title><rect x="20.4623%" y="1013" width="0.0453%" height="15" fill="rgb(212,188,45)" fg:x="903" fg:w="2"/><text x="20.5823%" y="1023.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete::{{closure}} (2 samples, 0.05%)</title><rect x="20.4623%" y="997" width="0.0453%" height="15" fill="rgb(223,154,38)" fg:x="903" fg:w="2"/><text x="20.5823%" y="1007.50"></text></g><g><title>tokio::runtime::task::core::Trailer::wake_join (2 samples, 0.05%)</title><rect x="20.4623%" y="981" width="0.0453%" height="15" fill="rgb(251,22,52)" fg:x="903" fg:w="2"/><text x="20.5823%" y="991.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="20.4623%" y="965" width="0.0453%" height="15" fill="rgb(229,209,22)" fg:x="903" fg:w="2"/><text x="20.5823%" y="975.50"></text></g><g><title>tokio::runtime::task::core::Trailer::wake_join::{{closure}} (2 samples, 0.05%)</title><rect x="20.4623%" y="949" width="0.0453%" height="15" fill="rgb(234,138,34)" fg:x="903" fg:w="2"/><text x="20.5823%" y="959.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (2 samples, 0.05%)</title><rect x="20.4623%" y="933" width="0.0453%" height="15" fill="rgb(212,95,11)" fg:x="903" fg:w="2"/><text x="20.5823%" y="943.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (1 samples, 0.02%)</title><rect x="20.4849%" y="917" width="0.0227%" height="15" fill="rgb(240,179,47)" fg:x="904" fg:w="1"/><text x="20.6049%" y="927.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (1 samples, 0.02%)</title><rect x="20.4849%" y="901" width="0.0227%" height="15" fill="rgb(240,163,11)" fg:x="904" fg:w="1"/><text x="20.6049%" y="911.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="20.4849%" y="885" width="0.0227%" height="15" fill="rgb(236,37,12)" fg:x="904" fg:w="1"/><text x="20.6049%" y="895.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write::{{closure}} (3 samples, 0.07%)</title><rect x="20.5303%" y="917" width="0.0680%" height="15" fill="rgb(232,164,16)" fg:x="906" fg:w="3"/><text x="20.6503%" y="927.50"></text></g><g><title>tokio::io::blocking::Buf::write_to (2 samples, 0.05%)</title><rect x="20.5529%" y="901" width="0.0453%" height="15" fill="rgb(244,205,15)" fg:x="907" fg:w="2"/><text x="20.6729%" y="911.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.02%)</title><rect x="20.5756%" y="885" width="0.0227%" height="15" fill="rgb(223,117,47)" fg:x="908" fg:w="1"/><text x="20.6956%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::context::EnterRuntimeGuard&gt; (1 samples, 0.02%)</title><rect x="20.5982%" y="885" width="0.0227%" height="15" fill="rgb(244,107,35)" fg:x="909" fg:w="1"/><text x="20.7182%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::context::SetCurrentGuard&gt; (1 samples, 0.02%)</title><rect x="20.5982%" y="869" width="0.0227%" height="15" fill="rgb(205,140,8)" fg:x="909" fg:w="1"/><text x="20.7182%" y="879.50"></text></g><g><title>&lt;tokio::runtime::context::SetCurrentGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="20.5982%" y="853" width="0.0227%" height="15" fill="rgb(228,84,46)" fg:x="909" fg:w="1"/><text x="20.7182%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="20.5982%" y="837" width="0.0227%" height="15" fill="rgb(254,188,9)" fg:x="909" fg:w="1"/><text x="20.7182%" y="847.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="20.5982%" y="821" width="0.0227%" height="15" fill="rgb(206,112,54)" fg:x="909" fg:w="1"/><text x="20.7182%" y="831.50"></text></g><g><title>&lt;tokio::runtime::context::SetCurrentGuard as core::ops::drop::Drop&gt;::drop::{{closure}} (1 samples, 0.02%)</title><rect x="20.5982%" y="805" width="0.0227%" height="15" fill="rgb(216,84,49)" fg:x="909" fg:w="1"/><text x="20.7182%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tokio::runtime::scheduler::Handle&gt;&gt; (1 samples, 0.02%)</title><rect x="20.5982%" y="789" width="0.0227%" height="15" fill="rgb(214,194,35)" fg:x="909" fg:w="1"/><text x="20.7182%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::Handle&gt; (1 samples, 0.02%)</title><rect x="20.5982%" y="773" width="0.0227%" height="15" fill="rgb(249,28,3)" fg:x="909" fg:w="1"/><text x="20.7182%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::current_thread::Handle&gt;&gt; (1 samples, 0.02%)</title><rect x="20.5982%" y="757" width="0.0227%" height="15" fill="rgb(222,56,52)" fg:x="909" fg:w="1"/><text x="20.7182%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="20.5982%" y="741" width="0.0227%" height="15" fill="rgb(245,217,50)" fg:x="909" fg:w="1"/><text x="20.7182%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.02%)</title><rect x="20.6209%" y="837" width="0.0227%" height="15" fill="rgb(213,201,24)" fg:x="910" fg:w="1"/><text x="20.7409%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::multi_thread::worker::Worker&gt; (1 samples, 0.02%)</title><rect x="20.6209%" y="821" width="0.0227%" height="15" fill="rgb(248,116,28)" fg:x="910" fg:w="1"/><text x="20.7409%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt; (1 samples, 0.02%)</title><rect x="20.6209%" y="805" width="0.0227%" height="15" fill="rgb(219,72,43)" fg:x="910" fg:w="1"/><text x="20.7409%" y="815.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="20.6209%" y="789" width="0.0227%" height="15" fill="rgb(209,138,14)" fg:x="910" fg:w="1"/><text x="20.7409%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::multi_thread::worker::Context&gt; (2 samples, 0.05%)</title><rect x="20.6209%" y="885" width="0.0453%" height="15" fill="rgb(222,18,33)" fg:x="910" fg:w="2"/><text x="20.7409%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::worker::Worker&gt;&gt; (2 samples, 0.05%)</title><rect x="20.6209%" y="869" width="0.0453%" height="15" fill="rgb(213,199,7)" fg:x="910" fg:w="2"/><text x="20.7409%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="20.6209%" y="853" width="0.0453%" height="15" fill="rgb(250,110,10)" fg:x="910" fg:w="2"/><text x="20.7409%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.02%)</title><rect x="20.6436%" y="837" width="0.0227%" height="15" fill="rgb(248,123,6)" fg:x="911" fg:w="1"/><text x="20.7636%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.02%)</title><rect x="20.6436%" y="821" width="0.0227%" height="15" fill="rgb(206,91,31)" fg:x="911" fg:w="1"/><text x="20.7636%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::scheduler::multi_thread::worker::Core&gt;&gt; (2 samples, 0.05%)</title><rect x="20.7342%" y="821" width="0.0453%" height="15" fill="rgb(211,154,13)" fg:x="915" fg:w="2"/><text x="20.8542%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::multi_thread::worker::Core&gt; (2 samples, 0.05%)</title><rect x="20.7342%" y="805" width="0.0453%" height="15" fill="rgb(225,148,7)" fg:x="915" fg:w="2"/><text x="20.8542%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::multi_thread::queue::Local&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;&gt; (2 samples, 0.05%)</title><rect x="20.7342%" y="789" width="0.0453%" height="15" fill="rgb(220,160,43)" fg:x="915" fg:w="2"/><text x="20.8542%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::queue::Inner&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;&gt;&gt; (2 samples, 0.05%)</title><rect x="20.7342%" y="773" width="0.0453%" height="15" fill="rgb(213,52,39)" fg:x="915" fg:w="2"/><text x="20.8542%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="20.7342%" y="757" width="0.0453%" height="15" fill="rgb(243,137,7)" fg:x="915" fg:w="2"/><text x="20.8542%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.05%)</title><rect x="20.7342%" y="741" width="0.0453%" height="15" fill="rgb(230,79,13)" fg:x="915" fg:w="2"/><text x="20.8542%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.05%)</title><rect x="20.7342%" y="725" width="0.0453%" height="15" fill="rgb(247,105,23)" fg:x="915" fg:w="2"/><text x="20.8542%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;alloc::boxed::Box&lt;tokio::runtime::scheduler::multi_thread::worker::Core&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="20.7795%" y="821" width="0.0227%" height="15" fill="rgb(223,179,41)" fg:x="917" fg:w="1"/><text x="20.8995%" y="831.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="20.7795%" y="805" width="0.0227%" height="15" fill="rgb(218,9,34)" fg:x="917" fg:w="1"/><text x="20.8995%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (1 samples, 0.02%)</title><rect x="20.7795%" y="789" width="0.0227%" height="15" fill="rgb(222,106,8)" fg:x="917" fg:w="1"/><text x="20.8995%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (1 samples, 0.02%)</title><rect x="20.7795%" y="773" width="0.0227%" height="15" fill="rgb(211,220,0)" fg:x="917" fg:w="1"/><text x="20.8995%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (1 samples, 0.02%)</title><rect x="20.7795%" y="757" width="0.0227%" height="15" fill="rgb(229,52,16)" fg:x="917" fg:w="1"/><text x="20.8995%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_swap (1 samples, 0.02%)</title><rect x="20.7795%" y="741" width="0.0227%" height="15" fill="rgb(212,155,18)" fg:x="917" fg:w="1"/><text x="20.8995%" y="751.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="20.8022%" y="821" width="0.0227%" height="15" fill="rgb(242,21,14)" fg:x="918" fg:w="1"/><text x="20.9222%" y="831.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="20.8022%" y="805" width="0.0227%" height="15" fill="rgb(222,19,48)" fg:x="918" fg:w="1"/><text x="20.9222%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1 samples, 0.02%)</title><rect x="20.8022%" y="789" width="0.0227%" height="15" fill="rgb(232,45,27)" fg:x="918" fg:w="1"/><text x="20.9222%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (1 samples, 0.02%)</title><rect x="20.8022%" y="773" width="0.0227%" height="15" fill="rgb(249,103,42)" fg:x="918" fg:w="1"/><text x="20.9222%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.02%)</title><rect x="20.8022%" y="757" width="0.0227%" height="15" fill="rgb(246,81,33)" fg:x="918" fg:w="1"/><text x="20.9222%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.02%)</title><rect x="20.8022%" y="741" width="0.0227%" height="15" fill="rgb(252,33,42)" fg:x="918" fg:w="1"/><text x="20.9222%" y="751.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::shutdown_core (5 samples, 0.11%)</title><rect x="20.7342%" y="837" width="0.1133%" height="15" fill="rgb(209,212,41)" fg:x="915" fg:w="5"/><text x="20.8542%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::shutdown (1 samples, 0.02%)</title><rect x="20.8248%" y="821" width="0.0227%" height="15" fill="rgb(207,154,6)" fg:x="919" fg:w="1"/><text x="20.9448%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::shutdown (1 samples, 0.02%)</title><rect x="20.8248%" y="805" width="0.0227%" height="15" fill="rgb(223,64,47)" fg:x="919" fg:w="1"/><text x="20.9448%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::shutdown (1 samples, 0.02%)</title><rect x="20.8248%" y="789" width="0.0227%" height="15" fill="rgb(211,161,38)" fg:x="919" fg:w="1"/><text x="20.9448%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::maintenance (3 samples, 0.07%)</title><rect x="20.8475%" y="837" width="0.0680%" height="15" fill="rgb(219,138,40)" fg:x="920" fg:w="3"/><text x="20.9675%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.05%)</title><rect x="20.9835%" y="773" width="0.0453%" height="15" fill="rgb(241,228,46)" fg:x="926" fg:w="2"/><text x="21.1035%" y="783.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (2 samples, 0.05%)</title><rect x="20.9835%" y="757" width="0.0453%" height="15" fill="rgb(223,209,38)" fg:x="926" fg:w="2"/><text x="21.1035%" y="767.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.05%)</title><rect x="20.9835%" y="741" width="0.0453%" height="15" fill="rgb(236,164,45)" fg:x="926" fg:w="2"/><text x="21.1035%" y="751.50"></text></g><g><title>tokio::loom::std::thread::yield_now (9 samples, 0.20%)</title><rect x="21.0288%" y="773" width="0.2039%" height="15" fill="rgb(231,15,5)" fg:x="928" fg:w="9"/><text x="21.1488%" y="783.50"></text></g><g><title>core::hint::spin_loop (9 samples, 0.20%)</title><rect x="21.0288%" y="757" width="0.2039%" height="15" fill="rgb(252,35,15)" fg:x="928" fg:w="9"/><text x="21.1488%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (9 samples, 0.20%)</title><rect x="21.0288%" y="741" width="0.2039%" height="15" fill="rgb(248,181,18)" fg:x="928" fg:w="9"/><text x="21.1488%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (1 samples, 0.02%)</title><rect x="21.2327%" y="757" width="0.0227%" height="15" fill="rgb(233,39,42)" fg:x="937" fg:w="1"/><text x="21.3527%" y="767.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="21.2327%" y="741" width="0.0227%" height="15" fill="rgb(238,110,33)" fg:x="937" fg:w="1"/><text x="21.3527%" y="751.50"></text></g><g><title>std::sync::poison::Flag::done (1 samples, 0.02%)</title><rect x="21.2327%" y="725" width="0.0227%" height="15" fill="rgb(233,195,10)" fg:x="937" fg:w="1"/><text x="21.3527%" y="735.50"></text></g><g><title>std::thread::panicking (1 samples, 0.02%)</title><rect x="21.2327%" y="709" width="0.0227%" height="15" fill="rgb(254,105,3)" fg:x="937" fg:w="1"/><text x="21.3527%" y="719.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.02%)</title><rect x="21.2327%" y="693" width="0.0227%" height="15" fill="rgb(221,225,9)" fg:x="937" fg:w="1"/><text x="21.3527%" y="703.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.02%)</title><rect x="21.2327%" y="677" width="0.0227%" height="15" fill="rgb(224,227,45)" fg:x="937" fg:w="1"/><text x="21.3527%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.02%)</title><rect x="21.2327%" y="661" width="0.0227%" height="15" fill="rgb(229,198,43)" fg:x="937" fg:w="1"/><text x="21.3527%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="21.2327%" y="645" width="0.0227%" height="15" fill="rgb(206,209,35)" fg:x="937" fg:w="1"/><text x="21.3527%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.02%)</title><rect x="21.2554%" y="693" width="0.0227%" height="15" fill="rgb(245,195,53)" fg:x="938" fg:w="1"/><text x="21.3754%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="21.2554%" y="677" width="0.0227%" height="15" fill="rgb(240,92,26)" fg:x="938" fg:w="1"/><text x="21.3754%" y="687.50"></text></g><g><title>std::sys::unix::futex::futex_wait (3 samples, 0.07%)</title><rect x="21.2780%" y="693" width="0.0680%" height="15" fill="rgb(207,40,23)" fg:x="939" fg:w="3"/><text x="21.3980%" y="703.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (7 samples, 0.16%)</title><rect x="21.2327%" y="773" width="0.1586%" height="15" fill="rgb(223,111,35)" fg:x="937" fg:w="7"/><text x="21.3527%" y="783.50"></text></g><g><title>std::sync::condvar::Condvar::wait (6 samples, 0.14%)</title><rect x="21.2554%" y="757" width="0.1360%" height="15" fill="rgb(229,147,28)" fg:x="938" fg:w="6"/><text x="21.3754%" y="767.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (6 samples, 0.14%)</title><rect x="21.2554%" y="741" width="0.1360%" height="15" fill="rgb(211,29,28)" fg:x="938" fg:w="6"/><text x="21.3754%" y="751.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (6 samples, 0.14%)</title><rect x="21.2554%" y="725" width="0.1360%" height="15" fill="rgb(228,72,33)" fg:x="938" fg:w="6"/><text x="21.3754%" y="735.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (6 samples, 0.14%)</title><rect x="21.2554%" y="709" width="0.1360%" height="15" fill="rgb(205,214,31)" fg:x="938" fg:w="6"/><text x="21.3754%" y="719.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (2 samples, 0.05%)</title><rect x="21.3460%" y="693" width="0.0453%" height="15" fill="rgb(224,111,15)" fg:x="942" fg:w="2"/><text x="21.4660%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.02%)</title><rect x="21.3687%" y="677" width="0.0227%" height="15" fill="rgb(253,21,26)" fg:x="943" fg:w="1"/><text x="21.4887%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.02%)</title><rect x="21.3687%" y="661" width="0.0227%" height="15" fill="rgb(245,139,43)" fg:x="943" fg:w="1"/><text x="21.4887%" y="671.50"></text></g><g><title>tokio::runtime::driver::IoStack::park (1 samples, 0.02%)</title><rect x="21.3913%" y="725" width="0.0227%" height="15" fill="rgb(252,170,7)" fg:x="944" fg:w="1"/><text x="21.5113%" y="735.50"></text></g><g><title>tokio::runtime::park::ParkThread::park (1 samples, 0.02%)</title><rect x="21.3913%" y="709" width="0.0227%" height="15" fill="rgb(231,118,14)" fg:x="944" fg:w="1"/><text x="21.5113%" y="719.50"></text></g><g><title>tokio::runtime::park::Inner::park (1 samples, 0.02%)</title><rect x="21.3913%" y="693" width="0.0227%" height="15" fill="rgb(238,83,0)" fg:x="944" fg:w="1"/><text x="21.5113%" y="703.50"></text></g><g><title>std::sync::condvar::Condvar::wait (1 samples, 0.02%)</title><rect x="21.3913%" y="677" width="0.0227%" height="15" fill="rgb(221,39,39)" fg:x="944" fg:w="1"/><text x="21.5113%" y="687.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (1 samples, 0.02%)</title><rect x="21.3913%" y="661" width="0.0227%" height="15" fill="rgb(222,119,46)" fg:x="944" fg:w="1"/><text x="21.5113%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (1 samples, 0.02%)</title><rect x="21.3913%" y="645" width="0.0227%" height="15" fill="rgb(222,165,49)" fg:x="944" fg:w="1"/><text x="21.5113%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (1 samples, 0.02%)</title><rect x="21.3913%" y="629" width="0.0227%" height="15" fill="rgb(219,113,52)" fg:x="944" fg:w="1"/><text x="21.5113%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (1 samples, 0.02%)</title><rect x="21.3913%" y="613" width="0.0227%" height="15" fill="rgb(214,7,15)" fg:x="944" fg:w="1"/><text x="21.5113%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.02%)</title><rect x="21.3913%" y="597" width="0.0227%" height="15" fill="rgb(235,32,4)" fg:x="944" fg:w="1"/><text x="21.5113%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.02%)</title><rect x="21.3913%" y="581" width="0.0227%" height="15" fill="rgb(238,90,54)" fg:x="944" fg:w="1"/><text x="21.5113%" y="591.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="21.4140%" y="693" width="0.0227%" height="15" fill="rgb(213,208,19)" fg:x="945" fg:w="1"/><text x="21.5340%" y="703.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="21.4140%" y="677" width="0.0227%" height="15" fill="rgb(233,156,4)" fg:x="945" fg:w="1"/><text x="21.5340%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1 samples, 0.02%)</title><rect x="21.4140%" y="661" width="0.0227%" height="15" fill="rgb(207,194,5)" fg:x="945" fg:w="1"/><text x="21.5340%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (1 samples, 0.02%)</title><rect x="21.4140%" y="645" width="0.0227%" height="15" fill="rgb(206,111,30)" fg:x="945" fg:w="1"/><text x="21.5340%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.02%)</title><rect x="21.4140%" y="629" width="0.0227%" height="15" fill="rgb(243,70,54)" fg:x="945" fg:w="1"/><text x="21.5340%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.02%)</title><rect x="21.4140%" y="613" width="0.0227%" height="15" fill="rgb(242,28,8)" fg:x="945" fg:w="1"/><text x="21.5340%" y="623.50"></text></g><g><title>tokio::runtime::park::Inner::park_timeout (1 samples, 0.02%)</title><rect x="21.4367%" y="693" width="0.0227%" height="15" fill="rgb(219,106,18)" fg:x="946" fg:w="1"/><text x="21.5567%" y="703.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (1 samples, 0.02%)</title><rect x="21.4367%" y="677" width="0.0227%" height="15" fill="rgb(244,222,10)" fg:x="946" fg:w="1"/><text x="21.5567%" y="687.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (1 samples, 0.02%)</title><rect x="21.4367%" y="661" width="0.0227%" height="15" fill="rgb(236,179,52)" fg:x="946" fg:w="1"/><text x="21.5567%" y="671.50"></text></g><g><title>core::task::wake::Waker::wake (1 samples, 0.02%)</title><rect x="21.4593%" y="661" width="0.0227%" height="15" fill="rgb(213,23,39)" fg:x="947" fg:w="1"/><text x="21.5793%" y="671.50"></text></g><g><title>tokio::runtime::park::wake (1 samples, 0.02%)</title><rect x="21.4593%" y="645" width="0.0227%" height="15" fill="rgb(238,48,10)" fg:x="947" fg:w="1"/><text x="21.5793%" y="655.50"></text></g><g><title>tokio::runtime::park::Inner::from_raw (1 samples, 0.02%)</title><rect x="21.4593%" y="629" width="0.0227%" height="15" fill="rgb(251,196,23)" fg:x="947" fg:w="1"/><text x="21.5793%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::from_raw (1 samples, 0.02%)</title><rect x="21.4593%" y="613" width="0.0227%" height="15" fill="rgb(250,152,24)" fg:x="947" fg:w="1"/><text x="21.5793%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::byte_sub (1 samples, 0.02%)</title><rect x="21.4593%" y="597" width="0.0227%" height="15" fill="rgb(209,150,17)" fg:x="947" fg:w="1"/><text x="21.5793%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub (1 samples, 0.02%)</title><rect x="21.4593%" y="581" width="0.0227%" height="15" fill="rgb(234,202,34)" fg:x="947" fg:w="1"/><text x="21.5793%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.02%)</title><rect x="21.4593%" y="565" width="0.0227%" height="15" fill="rgb(253,148,53)" fg:x="947" fg:w="1"/><text x="21.5793%" y="575.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (2 samples, 0.05%)</title><rect x="21.4593%" y="677" width="0.0453%" height="15" fill="rgb(218,129,16)" fg:x="947" fg:w="2"/><text x="21.5793%" y="687.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll_at (1 samples, 0.02%)</title><rect x="21.4820%" y="661" width="0.0227%" height="15" fill="rgb(216,85,19)" fg:x="948" fg:w="1"/><text x="21.6020%" y="671.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.02%)</title><rect x="21.4820%" y="645" width="0.0227%" height="15" fill="rgb(235,228,7)" fg:x="948" fg:w="1"/><text x="21.6020%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (28 samples, 0.63%)</title><rect x="20.9155%" y="805" width="0.6345%" height="15" fill="rgb(245,175,0)" fg:x="923" fg:w="28"/><text x="21.0355%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (28 samples, 0.63%)</title><rect x="20.9155%" y="789" width="0.6345%" height="15" fill="rgb(208,168,36)" fg:x="923" fg:w="28"/><text x="21.0355%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (7 samples, 0.16%)</title><rect x="21.3913%" y="773" width="0.1586%" height="15" fill="rgb(246,171,24)" fg:x="944" fg:w="7"/><text x="21.5113%" y="783.50"></text></g><g><title>tokio::runtime::driver::Driver::park (7 samples, 0.16%)</title><rect x="21.3913%" y="757" width="0.1586%" height="15" fill="rgb(215,142,24)" fg:x="944" fg:w="7"/><text x="21.5113%" y="767.50"></text></g><g><title>tokio::runtime::driver::TimeDriver::park (7 samples, 0.16%)</title><rect x="21.3913%" y="741" width="0.1586%" height="15" fill="rgb(250,187,7)" fg:x="944" fg:w="7"/><text x="21.5113%" y="751.50"></text></g><g><title>tokio::runtime::time::Driver::park (6 samples, 0.14%)</title><rect x="21.4140%" y="725" width="0.1360%" height="15" fill="rgb(228,66,33)" fg:x="945" fg:w="6"/><text x="21.5340%" y="735.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (6 samples, 0.14%)</title><rect x="21.4140%" y="709" width="0.1360%" height="15" fill="rgb(234,215,21)" fg:x="945" fg:w="6"/><text x="21.5340%" y="719.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (4 samples, 0.09%)</title><rect x="21.4593%" y="693" width="0.0906%" height="15" fill="rgb(222,191,20)" fg:x="947" fg:w="4"/><text x="21.5793%" y="703.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::now (2 samples, 0.05%)</title><rect x="21.5046%" y="677" width="0.0453%" height="15" fill="rgb(245,79,54)" fg:x="949" fg:w="2"/><text x="21.6246%" y="687.50"></text></g><g><title>tokio::time::clock::Clock::now (1 samples, 0.02%)</title><rect x="21.5273%" y="661" width="0.0227%" height="15" fill="rgb(240,10,37)" fg:x="950" fg:w="1"/><text x="21.6473%" y="671.50"></text></g><g><title>tokio::time::clock::now (1 samples, 0.02%)</title><rect x="21.5273%" y="645" width="0.0227%" height="15" fill="rgb(214,192,32)" fg:x="950" fg:w="1"/><text x="21.6473%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.02%)</title><rect x="21.5273%" y="629" width="0.0227%" height="15" fill="rgb(209,36,54)" fg:x="950" fg:w="1"/><text x="21.6473%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::is_stealable (1 samples, 0.02%)</title><rect x="21.5500%" y="805" width="0.0227%" height="15" fill="rgb(220,10,11)" fg:x="951" fg:w="1"/><text x="21.6700%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Inner&lt;T&gt;::is_empty (1 samples, 0.02%)</title><rect x="21.5500%" y="789" width="0.0227%" height="15" fill="rgb(221,106,17)" fg:x="951" fg:w="1"/><text x="21.6700%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Inner&lt;T&gt;::len (1 samples, 0.02%)</title><rect x="21.5500%" y="773" width="0.0227%" height="15" fill="rgb(251,142,44)" fg:x="951" fg:w="1"/><text x="21.6700%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (1 samples, 0.02%)</title><rect x="21.5500%" y="757" width="0.0227%" height="15" fill="rgb(238,13,15)" fg:x="951" fg:w="1"/><text x="21.6700%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="21.5500%" y="741" width="0.0227%" height="15" fill="rgb(208,107,27)" fg:x="951" fg:w="1"/><text x="21.6700%" y="751.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (31 samples, 0.70%)</title><rect x="20.9155%" y="821" width="0.7025%" height="15" fill="rgb(205,136,37)" fg:x="923" fg:w="31"/><text x="21.0355%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::wake_deferred_tasks (2 samples, 0.05%)</title><rect x="21.5726%" y="805" width="0.0453%" height="15" fill="rgb(250,205,27)" fg:x="952" fg:w="2"/><text x="21.6926%" y="815.50"></text></g><g><title>tokio::runtime::context::with_defer (2 samples, 0.05%)</title><rect x="21.5726%" y="789" width="0.0453%" height="15" fill="rgb(210,80,43)" fg:x="952" fg:w="2"/><text x="21.6926%" y="799.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="21.5726%" y="773" width="0.0453%" height="15" fill="rgb(247,160,36)" fg:x="952" fg:w="2"/><text x="21.6926%" y="783.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.05%)</title><rect x="21.5726%" y="757" width="0.0453%" height="15" fill="rgb(234,13,49)" fg:x="952" fg:w="2"/><text x="21.6926%" y="767.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (2 samples, 0.05%)</title><rect x="21.5726%" y="741" width="0.0453%" height="15" fill="rgb(234,122,0)" fg:x="952" fg:w="2"/><text x="21.6926%" y="751.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (2 samples, 0.05%)</title><rect x="21.5726%" y="725" width="0.0453%" height="15" fill="rgb(207,146,38)" fg:x="952" fg:w="2"/><text x="21.6926%" y="735.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (2 samples, 0.05%)</title><rect x="21.5726%" y="709" width="0.0453%" height="15" fill="rgb(207,177,25)" fg:x="952" fg:w="2"/><text x="21.6926%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.05%)</title><rect x="21.5726%" y="693" width="0.0453%" height="15" fill="rgb(211,178,42)" fg:x="952" fg:w="2"/><text x="21.6926%" y="703.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.05%)</title><rect x="21.6179%" y="805" width="0.0453%" height="15" fill="rgb(230,69,54)" fg:x="954" fg:w="2"/><text x="21.7379%" y="815.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (2 samples, 0.05%)</title><rect x="21.6179%" y="789" width="0.0453%" height="15" fill="rgb(214,135,41)" fg:x="954" fg:w="2"/><text x="21.7379%" y="799.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.05%)</title><rect x="21.6179%" y="773" width="0.0453%" height="15" fill="rgb(237,67,25)" fg:x="954" fg:w="2"/><text x="21.7379%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (2 samples, 0.05%)</title><rect x="21.7086%" y="725" width="0.0453%" height="15" fill="rgb(222,189,50)" fg:x="958" fg:w="2"/><text x="21.8286%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.05%)</title><rect x="21.7086%" y="709" width="0.0453%" height="15" fill="rgb(245,148,34)" fg:x="958" fg:w="2"/><text x="21.8286%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::maintenance (7 samples, 0.16%)</title><rect x="21.6179%" y="821" width="0.1586%" height="15" fill="rgb(222,29,6)" fg:x="954" fg:w="7"/><text x="21.7379%" y="831.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::is_closed (5 samples, 0.11%)</title><rect x="21.6633%" y="805" width="0.1133%" height="15" fill="rgb(221,189,43)" fg:x="956" fg:w="5"/><text x="21.7833%" y="815.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (5 samples, 0.11%)</title><rect x="21.6633%" y="789" width="0.1133%" height="15" fill="rgb(207,36,27)" fg:x="956" fg:w="5"/><text x="21.7833%" y="799.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (5 samples, 0.11%)</title><rect x="21.6633%" y="773" width="0.1133%" height="15" fill="rgb(217,90,24)" fg:x="956" fg:w="5"/><text x="21.7833%" y="783.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (5 samples, 0.11%)</title><rect x="21.6633%" y="757" width="0.1133%" height="15" fill="rgb(224,66,35)" fg:x="956" fg:w="5"/><text x="21.7833%" y="767.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (5 samples, 0.11%)</title><rect x="21.6633%" y="741" width="0.1133%" height="15" fill="rgb(221,13,50)" fg:x="956" fg:w="5"/><text x="21.7833%" y="751.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (1 samples, 0.02%)</title><rect x="21.7539%" y="725" width="0.0227%" height="15" fill="rgb(236,68,49)" fg:x="960" fg:w="1"/><text x="21.8739%" y="735.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (1 samples, 0.02%)</title><rect x="21.7539%" y="709" width="0.0227%" height="15" fill="rgb(229,146,28)" fg:x="960" fg:w="1"/><text x="21.8739%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.02%)</title><rect x="21.7539%" y="693" width="0.0227%" height="15" fill="rgb(225,31,38)" fg:x="960" fg:w="1"/><text x="21.8739%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="21.7539%" y="677" width="0.0227%" height="15" fill="rgb(250,208,3)" fg:x="960" fg:w="1"/><text x="21.8739%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_parked (1 samples, 0.02%)</title><rect x="21.7766%" y="821" width="0.0227%" height="15" fill="rgb(246,54,23)" fg:x="961" fg:w="1"/><text x="21.8966%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::is_parked (1 samples, 0.02%)</title><rect x="21.7766%" y="805" width="0.0227%" height="15" fill="rgb(243,76,11)" fg:x="961" fg:w="1"/><text x="21.8966%" y="815.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (1 samples, 0.02%)</title><rect x="21.7766%" y="789" width="0.0227%" height="15" fill="rgb(245,21,50)" fg:x="961" fg:w="1"/><text x="21.8966%" y="799.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (1 samples, 0.02%)</title><rect x="21.7766%" y="773" width="0.0227%" height="15" fill="rgb(228,9,43)" fg:x="961" fg:w="1"/><text x="21.8966%" y="783.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (1 samples, 0.02%)</title><rect x="21.7766%" y="757" width="0.0227%" height="15" fill="rgb(208,100,47)" fg:x="961" fg:w="1"/><text x="21.8966%" y="767.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (1 samples, 0.02%)</title><rect x="21.7992%" y="805" width="0.0227%" height="15" fill="rgb(232,26,8)" fg:x="962" fg:w="1"/><text x="21.9192%" y="815.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="21.7992%" y="789" width="0.0227%" height="15" fill="rgb(216,166,38)" fg:x="962" fg:w="1"/><text x="21.9192%" y="799.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="21.7992%" y="773" width="0.0227%" height="15" fill="rgb(251,202,51)" fg:x="962" fg:w="1"/><text x="21.9192%" y="783.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1 samples, 0.02%)</title><rect x="21.7992%" y="757" width="0.0227%" height="15" fill="rgb(254,216,34)" fg:x="962" fg:w="1"/><text x="21.9192%" y="767.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (1 samples, 0.02%)</title><rect x="21.7992%" y="741" width="0.0227%" height="15" fill="rgb(251,32,27)" fg:x="962" fg:w="1"/><text x="21.9192%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.02%)</title><rect x="21.7992%" y="725" width="0.0227%" height="15" fill="rgb(208,127,28)" fg:x="962" fg:w="1"/><text x="21.9192%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.02%)</title><rect x="21.7992%" y="709" width="0.0227%" height="15" fill="rgb(224,137,22)" fg:x="962" fg:w="1"/><text x="21.9192%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (41 samples, 0.93%)</title><rect x="20.9155%" y="837" width="0.9291%" height="15" fill="rgb(254,70,32)" fg:x="923" fg:w="41"/><text x="21.0355%" y="847.50">t..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_parked (2 samples, 0.05%)</title><rect x="21.7992%" y="821" width="0.0453%" height="15" fill="rgb(229,75,37)" fg:x="962" fg:w="2"/><text x="21.9192%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (1 samples, 0.02%)</title><rect x="21.8219%" y="805" width="0.0227%" height="15" fill="rgb(252,64,23)" fg:x="963" fg:w="1"/><text x="21.9419%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (2 samples, 0.05%)</title><rect x="22.0032%" y="773" width="0.0453%" height="15" fill="rgb(232,162,48)" fg:x="971" fg:w="2"/><text x="22.1232%" y="783.50"></text></g><g><title>core::mem::replace (2 samples, 0.05%)</title><rect x="22.0032%" y="757" width="0.0453%" height="15" fill="rgb(246,160,12)" fg:x="971" fg:w="2"/><text x="22.1232%" y="767.50"></text></g><g><title>core::ptr::read (2 samples, 0.05%)</title><rect x="22.0032%" y="741" width="0.0453%" height="15" fill="rgb(247,166,0)" fg:x="971" fg:w="2"/><text x="22.1232%" y="751.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (2 samples, 0.05%)</title><rect x="22.1165%" y="661" width="0.0453%" height="15" fill="rgb(249,219,21)" fg:x="976" fg:w="2"/><text x="22.2365%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (2 samples, 0.05%)</title><rect x="22.1165%" y="645" width="0.0453%" height="15" fill="rgb(205,209,3)" fg:x="976" fg:w="2"/><text x="22.2365%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (2 samples, 0.05%)</title><rect x="22.1165%" y="629" width="0.0453%" height="15" fill="rgb(243,44,1)" fg:x="976" fg:w="2"/><text x="22.2365%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_swap (2 samples, 0.05%)</title><rect x="22.1165%" y="613" width="0.0453%" height="15" fill="rgb(206,159,16)" fg:x="976" fg:w="2"/><text x="22.2365%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.02%)</title><rect x="22.1618%" y="613" width="0.0227%" height="15" fill="rgb(244,77,30)" fg:x="978" fg:w="1"/><text x="22.2818%" y="623.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="22.1618%" y="597" width="0.0227%" height="15" fill="rgb(218,69,12)" fg:x="978" fg:w="1"/><text x="22.2818%" y="607.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (2 samples, 0.05%)</title><rect x="22.1845%" y="613" width="0.0453%" height="15" fill="rgb(212,87,7)" fg:x="979" fg:w="2"/><text x="22.3045%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.02%)</title><rect x="22.2071%" y="597" width="0.0227%" height="15" fill="rgb(245,114,25)" fg:x="980" fg:w="1"/><text x="22.3271%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.02%)</title><rect x="22.2071%" y="581" width="0.0227%" height="15" fill="rgb(210,61,42)" fg:x="980" fg:w="1"/><text x="22.3271%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (10 samples, 0.23%)</title><rect x="22.0485%" y="725" width="0.2266%" height="15" fill="rgb(211,52,33)" fg:x="973" fg:w="10"/><text x="22.1685%" y="735.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (10 samples, 0.23%)</title><rect x="22.0485%" y="709" width="0.2266%" height="15" fill="rgb(234,58,33)" fg:x="973" fg:w="10"/><text x="22.1685%" y="719.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (10 samples, 0.23%)</title><rect x="22.0485%" y="693" width="0.2266%" height="15" fill="rgb(220,115,36)" fg:x="973" fg:w="10"/><text x="22.1685%" y="703.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::{{closure}} (7 samples, 0.16%)</title><rect x="22.1165%" y="677" width="0.1586%" height="15" fill="rgb(243,153,54)" fg:x="976" fg:w="7"/><text x="22.2365%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (5 samples, 0.11%)</title><rect x="22.1618%" y="661" width="0.1133%" height="15" fill="rgb(251,47,18)" fg:x="978" fg:w="5"/><text x="22.2818%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked (5 samples, 0.11%)</title><rect x="22.1618%" y="645" width="0.1133%" height="15" fill="rgb(242,102,42)" fg:x="978" fg:w="5"/><text x="22.2818%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (5 samples, 0.11%)</title><rect x="22.1618%" y="629" width="0.1133%" height="15" fill="rgb(234,31,38)" fg:x="978" fg:w="5"/><text x="22.2818%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::State::unpark_one (2 samples, 0.05%)</title><rect x="22.2298%" y="613" width="0.0453%" height="15" fill="rgb(221,117,51)" fg:x="981" fg:w="2"/><text x="22.3498%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (2 samples, 0.05%)</title><rect x="22.2298%" y="597" width="0.0453%" height="15" fill="rgb(212,20,18)" fg:x="981" fg:w="2"/><text x="22.3498%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_add (2 samples, 0.05%)</title><rect x="22.2298%" y="581" width="0.0453%" height="15" fill="rgb(245,133,36)" fg:x="981" fg:w="2"/><text x="22.3498%" y="591.50"></text></g><g><title>flate2::crc::CrcReader&lt;R&gt;::new (1 samples, 0.02%)</title><rect x="22.7510%" y="309" width="0.0227%" height="15" fill="rgb(212,6,19)" fg:x="1004" fg:w="1"/><text x="22.8710%" y="319.50"></text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStream::new::{{closure}} (2 samples, 0.05%)</title><rect x="22.7510%" y="421" width="0.0453%" height="15" fill="rgb(218,1,36)" fg:x="1004" fg:w="2"/><text x="22.8710%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.05%)</title><rect x="22.7510%" y="405" width="0.0453%" height="15" fill="rgb(246,84,54)" fg:x="1004" fg:w="2"/><text x="22.8710%" y="415.50"></text></g><g><title>dads_gzip_thing::enc::GzEncoderAsync::new::{{closure}} (2 samples, 0.05%)</title><rect x="22.7510%" y="389" width="0.0453%" height="15" fill="rgb(242,110,6)" fg:x="1004" fg:w="2"/><text x="22.8710%" y="399.50"></text></g><g><title>flate2::gz::read::GzEncoder&lt;R&gt;::new (2 samples, 0.05%)</title><rect x="22.7510%" y="373" width="0.0453%" height="15" fill="rgb(214,47,5)" fg:x="1004" fg:w="2"/><text x="22.8710%" y="383.50"></text></g><g><title>flate2::gz::GzBuilder::read (2 samples, 0.05%)</title><rect x="22.7510%" y="357" width="0.0453%" height="15" fill="rgb(218,159,25)" fg:x="1004" fg:w="2"/><text x="22.8710%" y="367.50"></text></g><g><title>flate2::gz::GzBuilder::buf_read (2 samples, 0.05%)</title><rect x="22.7510%" y="341" width="0.0453%" height="15" fill="rgb(215,211,28)" fg:x="1004" fg:w="2"/><text x="22.8710%" y="351.50"></text></g><g><title>flate2::gz::bufread::gz_encoder (2 samples, 0.05%)</title><rect x="22.7510%" y="325" width="0.0453%" height="15" fill="rgb(238,59,32)" fg:x="1004" fg:w="2"/><text x="22.8710%" y="335.50"></text></g><g><title>flate2::deflate::bufread::DeflateEncoder&lt;R&gt;::new (1 samples, 0.02%)</title><rect x="22.7736%" y="309" width="0.0227%" height="15" fill="rgb(226,82,3)" fg:x="1005" fg:w="1"/><text x="22.8936%" y="319.50"></text></g><g><title>flate2::mem::Compress::new (1 samples, 0.02%)</title><rect x="22.7736%" y="293" width="0.0227%" height="15" fill="rgb(240,164,32)" fg:x="1005" fg:w="1"/><text x="22.8936%" y="303.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::make (1 samples, 0.02%)</title><rect x="22.7736%" y="277" width="0.0227%" height="15" fill="rgb(232,46,7)" fg:x="1005" fg:w="1"/><text x="22.8936%" y="287.50"></text></g><g><title>miniz_oxide::deflate::core::CompressorOxide::set_format_and_level (1 samples, 0.02%)</title><rect x="22.7736%" y="261" width="0.0227%" height="15" fill="rgb(229,129,53)" fg:x="1005" fg:w="1"/><text x="22.8936%" y="271.50"></text></g><g><title>miniz_oxide::deflate::core::create_comp_flags_from_zip_params (1 samples, 0.02%)</title><rect x="22.7736%" y="245" width="0.0227%" height="15" fill="rgb(234,188,29)" fg:x="1005" fg:w="1"/><text x="22.8936%" y="255.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="22.7963%" y="293" width="0.0227%" height="15" fill="rgb(246,141,4)" fg:x="1006" fg:w="1"/><text x="22.9163%" y="303.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::try_read_output (1 samples, 0.02%)</title><rect x="22.7963%" y="277" width="0.0227%" height="15" fill="rgb(229,23,39)" fg:x="1006" fg:w="1"/><text x="22.9163%" y="287.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (1 samples, 0.02%)</title><rect x="22.7963%" y="261" width="0.0227%" height="15" fill="rgb(206,12,3)" fg:x="1006" fg:w="1"/><text x="22.9163%" y="271.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (1 samples, 0.02%)</title><rect x="22.7963%" y="245" width="0.0227%" height="15" fill="rgb(252,226,20)" fg:x="1006" fg:w="1"/><text x="22.9163%" y="255.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (2 samples, 0.05%)</title><rect x="22.7963%" y="341" width="0.0453%" height="15" fill="rgb(216,123,35)" fg:x="1006" fg:w="2"/><text x="22.9163%" y="351.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (2 samples, 0.05%)</title><rect x="22.7963%" y="325" width="0.0453%" height="15" fill="rgb(212,68,40)" fg:x="1006" fg:w="2"/><text x="22.9163%" y="335.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (2 samples, 0.05%)</title><rect x="22.7963%" y="309" width="0.0453%" height="15" fill="rgb(254,125,32)" fg:x="1006" fg:w="2"/><text x="22.9163%" y="319.50"></text></g><g><title>tokio::io::blocking::Buf::copy_from (1 samples, 0.02%)</title><rect x="22.8189%" y="293" width="0.0227%" height="15" fill="rgb(253,97,22)" fg:x="1007" fg:w="1"/><text x="22.9389%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="22.8189%" y="277" width="0.0227%" height="15" fill="rgb(241,101,14)" fg:x="1007" fg:w="1"/><text x="22.9389%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="22.8189%" y="261" width="0.0227%" height="15" fill="rgb(238,103,29)" fg:x="1007" fg:w="1"/><text x="22.9389%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.02%)</title><rect x="22.8189%" y="245" width="0.0227%" height="15" fill="rgb(233,195,47)" fg:x="1007" fg:w="1"/><text x="22.9389%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="22.8189%" y="229" width="0.0227%" height="15" fill="rgb(246,218,30)" fg:x="1007" fg:w="1"/><text x="22.9389%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="22.8189%" y="213" width="0.0227%" height="15" fill="rgb(219,145,47)" fg:x="1007" fg:w="1"/><text x="22.9389%" y="223.50"></text></g><g><title>flate2::gz::read::GzEncoder&lt;R&gt;::new (2 samples, 0.05%)</title><rect x="22.8416%" y="341" width="0.0453%" height="15" fill="rgb(243,12,26)" fg:x="1008" fg:w="2"/><text x="22.9616%" y="351.50"></text></g><g><title>flate2::gz::GzBuilder::read (2 samples, 0.05%)</title><rect x="22.8416%" y="325" width="0.0453%" height="15" fill="rgb(214,87,16)" fg:x="1008" fg:w="2"/><text x="22.9616%" y="335.50"></text></g><g><title>flate2::gz::GzBuilder::buf_read (2 samples, 0.05%)</title><rect x="22.8416%" y="309" width="0.0453%" height="15" fill="rgb(208,99,42)" fg:x="1008" fg:w="2"/><text x="22.9616%" y="319.50"></text></g><g><title>flate2::gz::bufread::gz_encoder (2 samples, 0.05%)</title><rect x="22.8416%" y="293" width="0.0453%" height="15" fill="rgb(253,99,2)" fg:x="1008" fg:w="2"/><text x="22.9616%" y="303.50"></text></g><g><title>flate2::deflate::bufread::DeflateEncoder&lt;R&gt;::new (2 samples, 0.05%)</title><rect x="22.8416%" y="277" width="0.0453%" height="15" fill="rgb(220,168,23)" fg:x="1008" fg:w="2"/><text x="22.9616%" y="287.50"></text></g><g><title>flate2::mem::Compress::new (1 samples, 0.02%)</title><rect x="22.8643%" y="261" width="0.0227%" height="15" fill="rgb(242,38,24)" fg:x="1009" fg:w="1"/><text x="22.9843%" y="271.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::make (1 samples, 0.02%)</title><rect x="22.8643%" y="245" width="0.0227%" height="15" fill="rgb(225,182,9)" fg:x="1009" fg:w="1"/><text x="22.9843%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (1 samples, 0.02%)</title><rect x="22.8643%" y="229" width="0.0227%" height="15" fill="rgb(243,178,37)" fg:x="1009" fg:w="1"/><text x="22.9843%" y="239.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.02%)</title><rect x="22.8643%" y="213" width="0.0227%" height="15" fill="rgb(232,139,19)" fg:x="1009" fg:w="1"/><text x="22.9843%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="22.8643%" y="197" width="0.0227%" height="15" fill="rgb(225,201,24)" fg:x="1009" fg:w="1"/><text x="22.9843%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="22.8643%" y="181" width="0.0227%" height="15" fill="rgb(221,47,46)" fg:x="1009" fg:w="1"/><text x="22.9843%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="22.8643%" y="165" width="0.0227%" height="15" fill="rgb(249,23,13)" fg:x="1009" fg:w="1"/><text x="22.9843%" y="175.50"></text></g><g><title>__rust_probestack (1 samples, 0.02%)</title><rect x="22.8643%" y="149" width="0.0227%" height="15" fill="rgb(219,9,5)" fg:x="1009" fg:w="1"/><text x="22.9843%" y="159.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::get (2 samples, 0.05%)</title><rect x="22.9096%" y="117" width="0.0453%" height="15" fill="rgb(254,171,16)" fg:x="1011" fg:w="2"/><text x="23.0296%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.05%)</title><rect x="22.9096%" y="101" width="0.0453%" height="15" fill="rgb(230,171,20)" fg:x="1011" fg:w="2"/><text x="23.0296%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.05%)</title><rect x="22.9096%" y="85" width="0.0453%" height="15" fill="rgb(210,71,41)" fg:x="1011" fg:w="2"/><text x="23.0296%" y="95.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (3 samples, 0.07%)</title><rect x="22.9549%" y="101" width="0.0680%" height="15" fill="rgb(206,173,20)" fg:x="1013" fg:w="3"/><text x="23.0749%" y="111.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::BufRead&gt;::consume (8 samples, 0.18%)</title><rect x="22.9096%" y="197" width="0.1813%" height="15" fill="rgb(233,88,34)" fg:x="1011" fg:w="8"/><text x="23.0296%" y="207.50"></text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (8 samples, 0.18%)</title><rect x="22.9096%" y="181" width="0.1813%" height="15" fill="rgb(223,209,46)" fg:x="1011" fg:w="8"/><text x="23.0296%" y="191.50"></text></g><g><title>crc32fast::Hasher::update (8 samples, 0.18%)</title><rect x="22.9096%" y="165" width="0.1813%" height="15" fill="rgb(250,43,18)" fg:x="1011" fg:w="8"/><text x="23.0296%" y="175.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (8 samples, 0.18%)</title><rect x="22.9096%" y="149" width="0.1813%" height="15" fill="rgb(208,13,10)" fg:x="1011" fg:w="8"/><text x="23.0296%" y="159.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (8 samples, 0.18%)</title><rect x="22.9096%" y="133" width="0.1813%" height="15" fill="rgb(212,200,36)" fg:x="1011" fg:w="8"/><text x="23.0296%" y="143.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (6 samples, 0.14%)</title><rect x="22.9549%" y="117" width="0.1360%" height="15" fill="rgb(225,90,30)" fg:x="1013" fg:w="6"/><text x="23.0749%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_xor_si128 (3 samples, 0.07%)</title><rect x="23.0229%" y="101" width="0.0680%" height="15" fill="rgb(236,182,39)" fg:x="1016" fg:w="3"/><text x="23.1429%" y="111.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (58 samples, 1.31%)</title><rect x="23.0909%" y="197" width="1.3143%" height="15" fill="rgb(212,144,35)" fg:x="1019" fg:w="58"/><text x="23.2109%" y="207.50">&lt;f..</text></g><g><title>&lt;flate2::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (58 samples, 1.31%)</title><rect x="23.0909%" y="181" width="1.3143%" height="15" fill="rgb(228,63,44)" fg:x="1019" fg:w="58"/><text x="23.2109%" y="191.50">&lt;f..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for alloc::collections::vec_deque::VecDeque&lt;u8,A&gt;&gt;::read (58 samples, 1.31%)</title><rect x="23.0909%" y="165" width="1.3143%" height="15" fill="rgb(228,109,6)" fg:x="1019" fg:w="58"/><text x="23.2109%" y="175.50">st..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::drain::Drain&lt;u8&gt;&gt; (58 samples, 1.31%)</title><rect x="23.0909%" y="149" width="1.3143%" height="15" fill="rgb(238,117,24)" fg:x="1019" fg:w="58"/><text x="23.2109%" y="159.50">co..</text></g><g><title>&lt;alloc::collections::vec_deque::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 1.31%)</title><rect x="23.0909%" y="133" width="1.3143%" height="15" fill="rgb(242,26,26)" fg:x="1019" fg:w="58"/><text x="23.2109%" y="143.50">&lt;a..</text></g><g><title>&lt;alloc::collections::vec_deque::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 1.31%)</title><rect x="23.0909%" y="117" width="1.3143%" height="15" fill="rgb(221,92,48)" fg:x="1019" fg:w="58"/><text x="23.2109%" y="127.50">&lt;a..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (17 samples, 0.39%)</title><rect x="24.0199%" y="101" width="0.3852%" height="15" fill="rgb(209,209,32)" fg:x="1060" fg:w="17"/><text x="24.1399%" y="111.50"></text></g><g><title>miniz_oxide::deflate::core::DictOxide::find_match (800 samples, 18.13%)</title><rect x="35.1688%" y="85" width="18.1283%" height="15" fill="rgb(221,70,22)" fg:x="1552" fg:w="800"/><text x="35.2888%" y="95.50">miniz_oxide::deflate::core::DictOxide::find_match</text></g><g><title>miniz_oxide::deflate::core::BitBuffer::flush (19 samples, 0.43%)</title><rect x="53.2971%" y="37" width="0.4305%" height="15" fill="rgb(248,145,5)" fg:x="2352" fg:w="19"/><text x="53.4171%" y="47.50"></text></g><g><title>miniz_oxide::deflate::core::flush_block (67 samples, 1.52%)</title><rect x="53.2971%" y="85" width="1.5182%" height="15" fill="rgb(226,116,26)" fg:x="2352" fg:w="67"/><text x="53.4171%" y="95.50">min..</text></g><g><title>miniz_oxide::deflate::core::compress_block (67 samples, 1.52%)</title><rect x="53.2971%" y="69" width="1.5182%" height="15" fill="rgb(244,5,17)" fg:x="2352" fg:w="67"/><text x="53.4171%" y="79.50">min..</text></g><g><title>miniz_oxide::deflate::core::compress_lz_codes (67 samples, 1.52%)</title><rect x="53.2971%" y="53" width="1.5182%" height="15" fill="rgb(252,159,33)" fg:x="2352" fg:w="67"/><text x="53.4171%" y="63.50">min..</text></g><g><title>miniz_oxide::deflate::core::BitBuffer::put_fast (48 samples, 1.09%)</title><rect x="53.7276%" y="37" width="1.0877%" height="15" fill="rgb(206,71,0)" fg:x="2371" fg:w="48"/><text x="53.8476%" y="47.50">m..</text></g><g><title>miniz_oxide::deflate::core::record_literal (518 samples, 11.74%)</title><rect x="54.8153%" y="85" width="11.7380%" height="15" fill="rgb(233,118,54)" fg:x="2419" fg:w="518"/><text x="54.9353%" y="95.50">miniz_oxide::deflate::core::record_lite..</text></g><g><title>miniz_oxide::deflate::core::LZOxide::consume_flag (518 samples, 11.74%)</title><rect x="54.8153%" y="69" width="11.7380%" height="15" fill="rgb(234,83,48)" fg:x="2419" fg:w="518"/><text x="54.9353%" y="79.50">miniz_oxide::deflate::core::LZOxide::co..</text></g><g><title>miniz_oxide::deflate::core::LZOxide::plant_flag (518 samples, 11.74%)</title><rect x="54.8153%" y="53" width="11.7380%" height="15" fill="rgb(228,3,54)" fg:x="2419" fg:w="518"/><text x="54.9353%" y="63.50">miniz_oxide::deflate::core::LZOxide::pl..</text></g><g><title>miniz_oxide::deflate::core::LZOxide::consume_flag (9 samples, 0.20%)</title><rect x="67.1425%" y="69" width="0.2039%" height="15" fill="rgb(226,155,13)" fg:x="2963" fg:w="9"/><text x="67.2625%" y="79.50"></text></g><g><title>miniz_oxide::deflate::core::compress_normal (1,904 samples, 43.15%)</title><rect x="24.4052%" y="101" width="43.1453%" height="15" fill="rgb(241,28,37)" fg:x="1077" fg:w="1904"/><text x="24.5252%" y="111.50">miniz_oxide::deflate::core::compress_normal</text></g><g><title>miniz_oxide::deflate::core::record_match (44 samples, 1.00%)</title><rect x="66.5534%" y="85" width="0.9971%" height="15" fill="rgb(233,93,10)" fg:x="2937" fg:w="44"/><text x="66.6734%" y="95.50">m..</text></g><g><title>miniz_oxide::deflate::core::LZOxide::write_code (9 samples, 0.20%)</title><rect x="67.3465%" y="69" width="0.2039%" height="15" fill="rgb(225,113,19)" fg:x="2972" fg:w="9"/><text x="67.4665%" y="79.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::calculate_minimum_redundancy (1 samples, 0.02%)</title><rect x="67.5731%" y="37" width="0.0227%" height="15" fill="rgb(241,2,18)" fg:x="2982" fg:w="1"/><text x="67.6931%" y="47.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::start_dynamic_block (4 samples, 0.09%)</title><rect x="67.5504%" y="69" width="0.0906%" height="15" fill="rgb(228,207,21)" fg:x="2981" fg:w="4"/><text x="67.6704%" y="79.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::optimize_table (4 samples, 0.09%)</title><rect x="67.5504%" y="53" width="0.0906%" height="15" fill="rgb(213,211,35)" fg:x="2981" fg:w="4"/><text x="67.6704%" y="63.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::radix_sort_symbols (2 samples, 0.05%)</title><rect x="67.5957%" y="37" width="0.0453%" height="15" fill="rgb(209,83,10)" fg:x="2983" fg:w="2"/><text x="67.7157%" y="47.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateEncoder&lt;R&gt; as std::io::Read&gt;::read (2,062 samples, 46.73%)</title><rect x="22.8869%" y="229" width="46.7256%" height="15" fill="rgb(209,164,1)" fg:x="1010" fg:w="2062"/><text x="23.0069%" y="239.50">&lt;flate2::deflate::bufread::DeflateEncoder&lt;R&gt; as std::io::Read&gt;::read</text></g><g><title>flate2::zio::read (2,062 samples, 46.73%)</title><rect x="22.8869%" y="213" width="46.7256%" height="15" fill="rgb(213,184,43)" fg:x="1010" fg:w="2062"/><text x="23.0069%" y="223.50">flate2::zio::read</text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run (1,995 samples, 45.21%)</title><rect x="24.4052%" y="197" width="45.2073%" height="15" fill="rgb(231,61,34)" fg:x="1077" fg:w="1995"/><text x="24.5252%" y="207.50">&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run</text></g><g><title>flate2::mem::Compress::compress (1,995 samples, 45.21%)</title><rect x="24.4052%" y="181" width="45.2073%" height="15" fill="rgb(235,75,3)" fg:x="1077" fg:w="1995"/><text x="24.5252%" y="191.50">flate2::mem::Compress::compress</text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::compress (1,995 samples, 45.21%)</title><rect x="24.4052%" y="165" width="45.2073%" height="15" fill="rgb(220,106,47)" fg:x="1077" fg:w="1995"/><text x="24.5252%" y="175.50">&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::compress</text></g><g><title>miniz_oxide::deflate::stream::deflate (1,995 samples, 45.21%)</title><rect x="24.4052%" y="149" width="45.2073%" height="15" fill="rgb(210,196,33)" fg:x="1077" fg:w="1995"/><text x="24.5252%" y="159.50">miniz_oxide::deflate::stream::deflate</text></g><g><title>miniz_oxide::deflate::core::compress (1,995 samples, 45.21%)</title><rect x="24.4052%" y="133" width="45.2073%" height="15" fill="rgb(229,154,42)" fg:x="1077" fg:w="1995"/><text x="24.5252%" y="143.50">miniz_oxide::deflate::core::compress</text></g><g><title>miniz_oxide::deflate::core::compress_inner (1,995 samples, 45.21%)</title><rect x="24.4052%" y="117" width="45.2073%" height="15" fill="rgb(228,114,26)" fg:x="1077" fg:w="1995"/><text x="24.5252%" y="127.50">miniz_oxide::deflate::core::compress_inner</text></g><g><title>miniz_oxide::deflate::core::flush_block (91 samples, 2.06%)</title><rect x="67.5504%" y="101" width="2.0621%" height="15" fill="rgb(208,144,1)" fg:x="2981" fg:w="91"/><text x="67.6704%" y="111.50">miniz..</text></g><g><title>miniz_oxide::deflate::core::compress_block (91 samples, 2.06%)</title><rect x="67.5504%" y="85" width="2.0621%" height="15" fill="rgb(239,112,37)" fg:x="2981" fg:w="91"/><text x="67.6704%" y="95.50">miniz..</text></g><g><title>miniz_oxide::deflate::core::compress_lz_codes (87 samples, 1.97%)</title><rect x="67.6411%" y="69" width="1.9714%" height="15" fill="rgb(210,96,50)" fg:x="2985" fg:w="87"/><text x="67.7611%" y="79.50">mini..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,067 samples, 46.84%)</title><rect x="22.7963%" y="405" width="46.8389%" height="15" fill="rgb(222,178,2)" fg:x="1006" fg:w="2067"/><text x="22.9163%" y="415.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStream::flush::{{closure}} (2,067 samples, 46.84%)</title><rect x="22.7963%" y="389" width="46.8389%" height="15" fill="rgb(226,74,18)" fg:x="1006" fg:w="2067"/><text x="22.9163%" y="399.50">dads_gzip_thing::gzip::JsonLinesWriteStream::flush::{{closure}}</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,067 samples, 46.84%)</title><rect x="22.7963%" y="373" width="46.8389%" height="15" fill="rgb(225,67,54)" fg:x="1006" fg:w="2067"/><text x="22.9163%" y="383.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>dads_gzip_thing::enc::GzEncoderAsync::flush::{{closure}} (2,067 samples, 46.84%)</title><rect x="22.7963%" y="357" width="46.8389%" height="15" fill="rgb(251,92,32)" fg:x="1006" fg:w="2067"/><text x="22.9163%" y="367.50">dads_gzip_thing::enc::GzEncoderAsync::flush::{{closure}}</text></g><g><title>std::io::Read::read_to_end (2,063 samples, 46.75%)</title><rect x="22.8869%" y="341" width="46.7482%" height="15" fill="rgb(228,149,22)" fg:x="1010" fg:w="2063"/><text x="23.0069%" y="351.50">std::io::Read::read_to_end</text></g><g><title>std::io::default_read_to_end (2,063 samples, 46.75%)</title><rect x="22.8869%" y="325" width="46.7482%" height="15" fill="rgb(243,54,13)" fg:x="1010" fg:w="2063"/><text x="23.0069%" y="335.50">std::io::default_read_to_end</text></g><g><title>std::io::Read::read_buf (2,063 samples, 46.75%)</title><rect x="22.8869%" y="309" width="46.7482%" height="15" fill="rgb(243,180,28)" fg:x="1010" fg:w="2063"/><text x="23.0069%" y="319.50">std::io::Read::read_buf</text></g><g><title>std::io::default_read_buf (2,063 samples, 46.75%)</title><rect x="22.8869%" y="293" width="46.7482%" height="15" fill="rgb(208,167,24)" fg:x="1010" fg:w="2063"/><text x="23.0069%" y="303.50">std::io::default_read_buf</text></g><g><title>std::io::Read::read_buf::{{closure}} (2,063 samples, 46.75%)</title><rect x="22.8869%" y="277" width="46.7482%" height="15" fill="rgb(245,73,45)" fg:x="1010" fg:w="2063"/><text x="23.0069%" y="287.50">std::io::Read::read_buf::{{closure}}</text></g><g><title>&lt;flate2::gz::read::GzEncoder&lt;R&gt; as std::io::Read&gt;::read (2,063 samples, 46.75%)</title><rect x="22.8869%" y="261" width="46.7482%" height="15" fill="rgb(237,203,48)" fg:x="1010" fg:w="2063"/><text x="23.0069%" y="271.50">&lt;flate2::gz::read::GzEncoder&lt;R&gt; as std::io::Read&gt;::read</text></g><g><title>&lt;flate2::gz::bufread::GzEncoder&lt;R&gt; as std::io::Read&gt;::read (2,063 samples, 46.75%)</title><rect x="22.8869%" y="245" width="46.7482%" height="15" fill="rgb(211,197,16)" fg:x="1010" fg:w="2063"/><text x="23.0069%" y="255.50">&lt;flate2::gz::bufread::GzEncoder&lt;R&gt; as std::io::Read&gt;::read</text></g><g><title>flate2::gz::bufread::GzEncoder&lt;R&gt;::read_footer (1 samples, 0.02%)</title><rect x="69.6125%" y="229" width="0.0227%" height="15" fill="rgb(243,99,51)" fg:x="3072" fg:w="1"/><text x="69.7325%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (1 samples, 0.02%)</title><rect x="69.6352%" y="197" width="0.0227%" height="15" fill="rgb(215,123,29)" fg:x="3073" fg:w="1"/><text x="69.7552%" y="207.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect x="69.6352%" y="181" width="0.0227%" height="15" fill="rgb(239,186,37)" fg:x="3073" fg:w="1"/><text x="69.7552%" y="191.50"></text></g><g><title>&lt;dads_gzip_thing::enc::GzEncoderAsync as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="69.6352%" y="373" width="0.0453%" height="15" fill="rgb(252,136,39)" fg:x="3073" fg:w="2"/><text x="69.7552%" y="383.50"></text></g><g><title>std::thread::scoped::scope (2 samples, 0.05%)</title><rect x="69.6352%" y="357" width="0.0453%" height="15" fill="rgb(223,213,32)" fg:x="3073" fg:w="2"/><text x="69.7552%" y="367.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.05%)</title><rect x="69.6352%" y="341" width="0.0453%" height="15" fill="rgb(233,115,5)" fg:x="3073" fg:w="2"/><text x="69.7552%" y="351.50"></text></g><g><title>std::panicking::try (2 samples, 0.05%)</title><rect x="69.6352%" y="325" width="0.0453%" height="15" fill="rgb(207,226,44)" fg:x="3073" fg:w="2"/><text x="69.7552%" y="335.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.05%)</title><rect x="69.6352%" y="309" width="0.0453%" height="15" fill="rgb(208,126,0)" fg:x="3073" fg:w="2"/><text x="69.7552%" y="319.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.05%)</title><rect x="69.6352%" y="293" width="0.0453%" height="15" fill="rgb(244,66,21)" fg:x="3073" fg:w="2"/><text x="69.7552%" y="303.50"></text></g><g><title>std::thread::scoped::scope::{{closure}} (2 samples, 0.05%)</title><rect x="69.6352%" y="277" width="0.0453%" height="15" fill="rgb(222,97,12)" fg:x="3073" fg:w="2"/><text x="69.7552%" y="287.50"></text></g><g><title>&lt;dads_gzip_thing::enc::GzEncoderAsync as core::ops::drop::Drop&gt;::drop::{{closure}} (2 samples, 0.05%)</title><rect x="69.6352%" y="261" width="0.0453%" height="15" fill="rgb(219,213,19)" fg:x="3073" fg:w="2"/><text x="69.7552%" y="271.50"></text></g><g><title>std::thread::scoped::Scope::spawn (2 samples, 0.05%)</title><rect x="69.6352%" y="245" width="0.0453%" height="15" fill="rgb(252,169,30)" fg:x="3073" fg:w="2"/><text x="69.7552%" y="255.50"></text></g><g><title>std::thread::scoped::&lt;impl std::thread::Builder&gt;::spawn_scoped (2 samples, 0.05%)</title><rect x="69.6352%" y="229" width="0.0453%" height="15" fill="rgb(206,32,51)" fg:x="3073" fg:w="2"/><text x="69.7552%" y="239.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (2 samples, 0.05%)</title><rect x="69.6352%" y="213" width="0.0453%" height="15" fill="rgb(250,172,42)" fg:x="3073" fg:w="2"/><text x="69.7552%" y="223.50"></text></g><g><title>std::thread::Thread::new (1 samples, 0.02%)</title><rect x="69.6578%" y="197" width="0.0227%" height="15" fill="rgb(209,34,43)" fg:x="3074" fg:w="1"/><text x="69.7778%" y="207.50"></text></g><g><title>std::thread::ThreadId::new (1 samples, 0.02%)</title><rect x="69.6578%" y="181" width="0.0227%" height="15" fill="rgb(223,11,35)" fg:x="3074" fg:w="1"/><text x="69.7778%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (1 samples, 0.02%)</title><rect x="69.6578%" y="165" width="0.0227%" height="15" fill="rgb(251,219,26)" fg:x="3074" fg:w="1"/><text x="69.7778%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (1 samples, 0.02%)</title><rect x="69.6578%" y="149" width="0.0227%" height="15" fill="rgb(231,119,3)" fg:x="3074" fg:w="1"/><text x="69.7778%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::gz::read::GzEncoder&lt;alloc::collections::vec_deque::VecDeque&lt;u8&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="69.6805%" y="373" width="0.0227%" height="15" fill="rgb(216,97,11)" fg:x="3075" fg:w="1"/><text x="69.8005%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::gz::bufread::GzEncoder&lt;flate2::bufreader::BufReader&lt;alloc::collections::vec_deque::VecDeque&lt;u8&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="69.6805%" y="357" width="0.0227%" height="15" fill="rgb(223,59,9)" fg:x="3075" fg:w="1"/><text x="69.8005%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::deflate::bufread::DeflateEncoder&lt;flate2::crc::CrcReader&lt;flate2::bufreader::BufReader&lt;alloc::collections::vec_deque::VecDeque&lt;u8&gt;&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="69.6805%" y="341" width="0.0227%" height="15" fill="rgb(233,93,31)" fg:x="3075" fg:w="1"/><text x="69.8005%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::crc::CrcReader&lt;flate2::bufreader::BufReader&lt;alloc::collections::vec_deque::VecDeque&lt;u8&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="69.6805%" y="325" width="0.0227%" height="15" fill="rgb(239,81,33)" fg:x="3075" fg:w="1"/><text x="69.8005%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::bufreader::BufReader&lt;alloc::collections::vec_deque::VecDeque&lt;u8&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="69.6805%" y="309" width="0.0227%" height="15" fill="rgb(213,120,34)" fg:x="3075" fg:w="1"/><text x="69.8005%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;u8&gt;&gt; (1 samples, 0.02%)</title><rect x="69.6805%" y="293" width="0.0227%" height="15" fill="rgb(243,49,53)" fg:x="3075" fg:w="1"/><text x="69.8005%" y="303.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="69.6805%" y="277" width="0.0227%" height="15" fill="rgb(247,216,33)" fg:x="3075" fg:w="1"/><text x="69.8005%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::as_mut_slices (1 samples, 0.02%)</title><rect x="69.6805%" y="261" width="0.0227%" height="15" fill="rgb(226,26,14)" fg:x="3075" fg:w="1"/><text x="69.8005%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.02%)</title><rect x="69.7031%" y="325" width="0.0227%" height="15" fill="rgb(215,49,53)" fg:x="3076" fg:w="1"/><text x="69.8231%" y="335.50"></text></g><g><title>core::mem::drop (1 samples, 0.02%)</title><rect x="69.7031%" y="309" width="0.0227%" height="15" fill="rgb(245,162,40)" fg:x="3076" fg:w="1"/><text x="69.8231%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;std::fs::File&gt;&gt; (1 samples, 0.02%)</title><rect x="69.7031%" y="293" width="0.0227%" height="15" fill="rgb(229,68,17)" fg:x="3076" fg:w="1"/><text x="69.8231%" y="303.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="69.7031%" y="277" width="0.0227%" height="15" fill="rgb(213,182,10)" fg:x="3076" fg:w="1"/><text x="69.8231%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.02%)</title><rect x="69.7031%" y="261" width="0.0227%" height="15" fill="rgb(245,125,30)" fg:x="3076" fg:w="1"/><text x="69.8231%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.02%)</title><rect x="69.7031%" y="245" width="0.0227%" height="15" fill="rgb(232,202,2)" fg:x="3076" fg:w="1"/><text x="69.8231%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::fs::File&gt;&gt; (2 samples, 0.05%)</title><rect x="69.7031%" y="357" width="0.0453%" height="15" fill="rgb(237,140,51)" fg:x="3076" fg:w="2"/><text x="69.8231%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="69.7031%" y="341" width="0.0453%" height="15" fill="rgb(236,157,25)" fg:x="3076" fg:w="2"/><text x="69.8231%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.02%)</title><rect x="69.7258%" y="325" width="0.0227%" height="15" fill="rgb(219,209,0)" fg:x="3077" fg:w="1"/><text x="69.8458%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.02%)</title><rect x="69.7258%" y="309" width="0.0227%" height="15" fill="rgb(240,116,54)" fg:x="3077" fg:w="1"/><text x="69.8458%" y="319.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,075 samples, 47.02%)</title><rect x="22.7510%" y="437" width="47.0202%" height="15" fill="rgb(216,10,36)" fg:x="1004" fg:w="2075"/><text x="22.8710%" y="447.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::close_least_recently_used::{{closure}} (2,073 samples, 46.97%)</title><rect x="22.7963%" y="421" width="46.9748%" height="15" fill="rgb(222,72,44)" fg:x="1006" fg:w="2073"/><text x="22.9163%" y="431.50">dads_gzip_thing::gzip::JsonLinesWriteStreamPool::close_least_recently_used::{{closure}}</text></g><g><title>core::ptr::drop_in_place&lt;dads_gzip_thing::gzip::JsonLinesWriteStream&gt; (6 samples, 0.14%)</title><rect x="69.6352%" y="405" width="0.1360%" height="15" fill="rgb(232,159,9)" fg:x="3073" fg:w="6"/><text x="69.7552%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;dads_gzip_thing::enc::GzEncoderAsync&gt; (6 samples, 0.14%)</title><rect x="69.6352%" y="389" width="0.1360%" height="15" fill="rgb(210,39,32)" fg:x="3073" fg:w="6"/><text x="69.7552%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::fs::file::File&gt; (3 samples, 0.07%)</title><rect x="69.7031%" y="373" width="0.0680%" height="15" fill="rgb(216,194,45)" fg:x="3076" fg:w="3"/><text x="69.8231%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mutex::Mutex&lt;tokio::fs::file::Inner&gt;&gt; (1 samples, 0.02%)</title><rect x="69.7485%" y="357" width="0.0227%" height="15" fill="rgb(218,18,35)" fg:x="3078" fg:w="1"/><text x="69.8685%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;tokio::fs::file::Inner&gt;&gt; (1 samples, 0.02%)</title><rect x="69.7485%" y="341" width="0.0227%" height="15" fill="rgb(207,83,51)" fg:x="3078" fg:w="1"/><text x="69.8685%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::fs::file::Inner&gt; (1 samples, 0.02%)</title><rect x="69.7485%" y="325" width="0.0227%" height="15" fill="rgb(225,63,43)" fg:x="3078" fg:w="1"/><text x="69.8685%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::fs::file::State&gt; (1 samples, 0.02%)</title><rect x="69.7485%" y="309" width="0.0227%" height="15" fill="rgb(207,57,36)" fg:x="3078" fg:w="1"/><text x="69.8685%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::join::JoinHandle&lt;(tokio::fs::file::Operation,tokio::io::blocking::Buf)&gt;&gt; (1 samples, 0.02%)</title><rect x="69.7485%" y="293" width="0.0227%" height="15" fill="rgb(216,99,33)" fg:x="3078" fg:w="1"/><text x="69.8685%" y="303.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="69.7485%" y="277" width="0.0227%" height="15" fill="rgb(225,42,16)" fg:x="3078" fg:w="1"/><text x="69.8685%" y="287.50"></text></g><g><title>tokio::runtime::task::state::State::drop_join_handle_fast (1 samples, 0.02%)</title><rect x="69.7485%" y="261" width="0.0227%" height="15" fill="rgb(220,201,45)" fg:x="3078" fg:w="1"/><text x="69.8685%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (1 samples, 0.02%)</title><rect x="69.7485%" y="245" width="0.0227%" height="15" fill="rgb(225,33,4)" fg:x="3078" fg:w="1"/><text x="69.8685%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.02%)</title><rect x="69.7485%" y="229" width="0.0227%" height="15" fill="rgb(224,33,50)" fg:x="3078" fg:w="1"/><text x="69.8685%" y="239.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,077 samples, 47.07%)</title><rect x="22.7510%" y="469" width="47.0655%" height="15" fill="rgb(246,198,51)" fg:x="1004" fg:w="2077"/><text x="22.8710%" y="479.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::insert::{{closure}} (2,077 samples, 47.07%)</title><rect x="22.7510%" y="453" width="47.0655%" height="15" fill="rgb(205,22,4)" fg:x="1004" fg:w="2077"/><text x="22.8710%" y="463.50">dads_gzip_thing::gzip::JsonLinesWriteStreamPool::insert::{{closure}}</text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::get_id_or_generate (2 samples, 0.05%)</title><rect x="69.7711%" y="437" width="0.0453%" height="15" fill="rgb(206,3,8)" fg:x="3079" fg:w="2"/><text x="69.8911%" y="447.50"></text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::get_id (2 samples, 0.05%)</title><rect x="69.7711%" y="421" width="0.0453%" height="15" fill="rgb(251,23,15)" fg:x="3079" fg:w="2"/><text x="69.8911%" y="431.50"></text></g><g><title>bimap::hash::BiHashMap&lt;L,R,LS,RS&gt;::get_by_left (2 samples, 0.05%)</title><rect x="69.7711%" y="405" width="0.0453%" height="15" fill="rgb(252,88,28)" fg:x="3079" fg:w="2"/><text x="69.8911%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.05%)</title><rect x="69.7711%" y="389" width="0.0453%" height="15" fill="rgb(212,127,14)" fg:x="3079" fg:w="2"/><text x="69.8911%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.05%)</title><rect x="69.7711%" y="373" width="0.0453%" height="15" fill="rgb(247,145,37)" fg:x="3079" fg:w="2"/><text x="69.8911%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.05%)</title><rect x="69.7711%" y="357" width="0.0453%" height="15" fill="rgb(209,117,53)" fg:x="3079" fg:w="2"/><text x="69.8911%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.05%)</title><rect x="69.7711%" y="341" width="0.0453%" height="15" fill="rgb(212,90,42)" fg:x="3079" fg:w="2"/><text x="69.8911%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.05%)</title><rect x="69.7711%" y="325" width="0.0453%" height="15" fill="rgb(218,164,37)" fg:x="3079" fg:w="2"/><text x="69.8911%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.05%)</title><rect x="69.7711%" y="309" width="0.0453%" height="15" fill="rgb(246,65,34)" fg:x="3079" fg:w="2"/><text x="69.8911%" y="319.50"></text></g><g><title>&lt;bimap::mem::Wrapper&lt;T&gt; as core::hash::Hash&gt;::hash (2 samples, 0.05%)</title><rect x="69.7711%" y="293" width="0.0453%" height="15" fill="rgb(231,100,33)" fg:x="3079" fg:w="2"/><text x="69.8911%" y="303.50"></text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (2 samples, 0.05%)</title><rect x="69.7711%" y="277" width="0.0453%" height="15" fill="rgb(228,126,14)" fg:x="3079" fg:w="2"/><text x="69.8911%" y="287.50"></text></g><g><title>&lt;std::path::Path as core::hash::Hash&gt;::hash (2 samples, 0.05%)</title><rect x="69.7711%" y="261" width="0.0453%" height="15" fill="rgb(215,173,21)" fg:x="3079" fg:w="2"/><text x="69.8911%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="69.7711%" y="245" width="0.0453%" height="15" fill="rgb(210,6,40)" fg:x="3079" fg:w="2"/><text x="69.8911%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="69.7711%" y="229" width="0.0453%" height="15" fill="rgb(212,48,18)" fg:x="3079" fg:w="2"/><text x="69.8911%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="69.7711%" y="213" width="0.0453%" height="15" fill="rgb(230,214,11)" fg:x="3079" fg:w="2"/><text x="69.8911%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.05%)</title><rect x="69.7711%" y="197" width="0.0453%" height="15" fill="rgb(254,105,39)" fg:x="3079" fg:w="2"/><text x="69.8911%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.05%)</title><rect x="69.7711%" y="181" width="0.0453%" height="15" fill="rgb(245,158,5)" fg:x="3079" fg:w="2"/><text x="69.8911%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.02%)</title><rect x="69.8165%" y="373" width="0.0227%" height="15" fill="rgb(249,208,11)" fg:x="3081" fg:w="1"/><text x="69.9365%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="69.8165%" y="357" width="0.0227%" height="15" fill="rgb(210,39,28)" fg:x="3081" fg:w="1"/><text x="69.9365%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.02%)</title><rect x="69.8165%" y="341" width="0.0227%" height="15" fill="rgb(211,56,53)" fg:x="3081" fg:w="1"/><text x="69.9365%" y="351.50"></text></g><g><title>&lt;bimap::mem::Wrapper&lt;T&gt; as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="69.8165%" y="325" width="0.0227%" height="15" fill="rgb(226,201,30)" fg:x="3081" fg:w="1"/><text x="69.9365%" y="335.50"></text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="69.8165%" y="309" width="0.0227%" height="15" fill="rgb(239,101,34)" fg:x="3081" fg:w="1"/><text x="69.9365%" y="319.50"></text></g><g><title>&lt;std::path::Path as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="69.8165%" y="293" width="0.0227%" height="15" fill="rgb(226,209,5)" fg:x="3081" fg:w="1"/><text x="69.9365%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.02%)</title><rect x="69.8165%" y="277" width="0.0227%" height="15" fill="rgb(250,105,47)" fg:x="3081" fg:w="1"/><text x="69.9365%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.02%)</title><rect x="69.8165%" y="261" width="0.0227%" height="15" fill="rgb(230,72,3)" fg:x="3081" fg:w="1"/><text x="69.9365%" y="271.50"></text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::get_id_or_generate (3 samples, 0.07%)</title><rect x="69.8165%" y="469" width="0.0680%" height="15" fill="rgb(232,218,39)" fg:x="3081" fg:w="3"/><text x="69.9365%" y="479.50"></text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::get_id (3 samples, 0.07%)</title><rect x="69.8165%" y="453" width="0.0680%" height="15" fill="rgb(248,166,6)" fg:x="3081" fg:w="3"/><text x="69.9365%" y="463.50"></text></g><g><title>bimap::hash::BiHashMap&lt;L,R,LS,RS&gt;::get_by_left (3 samples, 0.07%)</title><rect x="69.8165%" y="437" width="0.0680%" height="15" fill="rgb(247,89,20)" fg:x="3081" fg:w="3"/><text x="69.9365%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3 samples, 0.07%)</title><rect x="69.8165%" y="421" width="0.0680%" height="15" fill="rgb(248,130,54)" fg:x="3081" fg:w="3"/><text x="69.9365%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3 samples, 0.07%)</title><rect x="69.8165%" y="405" width="0.0680%" height="15" fill="rgb(234,196,4)" fg:x="3081" fg:w="3"/><text x="69.9365%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.07%)</title><rect x="69.8165%" y="389" width="0.0680%" height="15" fill="rgb(250,143,31)" fg:x="3081" fg:w="3"/><text x="69.9365%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.05%)</title><rect x="69.8391%" y="373" width="0.0453%" height="15" fill="rgb(211,110,34)" fg:x="3082" fg:w="2"/><text x="69.9591%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.05%)</title><rect x="69.8391%" y="357" width="0.0453%" height="15" fill="rgb(215,124,48)" fg:x="3082" fg:w="2"/><text x="69.9591%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.05%)</title><rect x="69.8391%" y="341" width="0.0453%" height="15" fill="rgb(216,46,13)" fg:x="3082" fg:w="2"/><text x="69.9591%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.05%)</title><rect x="69.8391%" y="325" width="0.0453%" height="15" fill="rgb(205,184,25)" fg:x="3082" fg:w="2"/><text x="69.9591%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.05%)</title><rect x="69.8391%" y="309" width="0.0453%" height="15" fill="rgb(228,1,10)" fg:x="3082" fg:w="2"/><text x="69.9591%" y="319.50"></text></g><g><title>&lt;bimap::mem::Wrapper&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.05%)</title><rect x="69.8391%" y="293" width="0.0453%" height="15" fill="rgb(213,116,27)" fg:x="3082" fg:w="2"/><text x="69.9591%" y="303.50"></text></g><g><title>&lt;std::path::PathBuf as core::cmp::PartialEq&gt;::eq (2 samples, 0.05%)</title><rect x="69.8391%" y="277" width="0.0453%" height="15" fill="rgb(241,95,50)" fg:x="3082" fg:w="2"/><text x="69.9591%" y="287.50"></text></g><g><title>std::path::Path::components (1 samples, 0.02%)</title><rect x="69.8618%" y="261" width="0.0227%" height="15" fill="rgb(238,48,32)" fg:x="3083" fg:w="1"/><text x="69.9818%" y="271.50"></text></g><g><title>std::path::has_physical_root (1 samples, 0.02%)</title><rect x="69.8618%" y="245" width="0.0227%" height="15" fill="rgb(235,113,49)" fg:x="3083" fg:w="1"/><text x="69.9818%" y="255.50"></text></g><g><title>std::sys::unix::path::is_sep_byte (1 samples, 0.02%)</title><rect x="69.8618%" y="229" width="0.0227%" height="15" fill="rgb(205,127,43)" fg:x="3083" fg:w="1"/><text x="69.9818%" y="239.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,083 samples, 47.20%)</title><rect x="22.7510%" y="501" width="47.2015%" height="15" fill="rgb(250,162,2)" fg:x="1004" fg:w="2083"/><text x="22.8710%" y="511.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::get_or_insert::{{closure}} (2,083 samples, 47.20%)</title><rect x="22.7510%" y="485" width="47.2015%" height="15" fill="rgb(220,13,41)" fg:x="1004" fg:w="2083"/><text x="22.8710%" y="495.50">dads_gzip_thing::gzip::JsonLinesWriteStreamPool::get_or_insert::{{closure}}</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (3 samples, 0.07%)</title><rect x="69.8844%" y="469" width="0.0680%" height="15" fill="rgb(249,221,25)" fg:x="3084" fg:w="3"/><text x="70.0044%" y="479.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.07%)</title><rect x="69.8844%" y="453" width="0.0680%" height="15" fill="rgb(215,208,19)" fg:x="3084" fg:w="3"/><text x="70.0044%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.07%)</title><rect x="69.8844%" y="437" width="0.0680%" height="15" fill="rgb(236,175,2)" fg:x="3084" fg:w="3"/><text x="70.0044%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (3 samples, 0.07%)</title><rect x="69.8844%" y="421" width="0.0680%" height="15" fill="rgb(241,52,2)" fg:x="3084" fg:w="3"/><text x="70.0044%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.11%)</title><rect x="69.9524%" y="501" width="0.1133%" height="15" fill="rgb(248,140,14)" fg:x="3087" fg:w="5"/><text x="70.0724%" y="511.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (5 samples, 0.11%)</title><rect x="69.9524%" y="485" width="0.1133%" height="15" fill="rgb(253,22,42)" fg:x="3087" fg:w="5"/><text x="70.0724%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (5 samples, 0.11%)</title><rect x="69.9524%" y="469" width="0.1133%" height="15" fill="rgb(234,61,47)" fg:x="3087" fg:w="5"/><text x="70.0724%" y="479.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::remove (2 samples, 0.05%)</title><rect x="70.0657%" y="501" width="0.0453%" height="15" fill="rgb(208,226,15)" fg:x="3092" fg:w="2"/><text x="70.1857%" y="511.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::len (2 samples, 0.05%)</title><rect x="70.0657%" y="485" width="0.0453%" height="15" fill="rgb(217,221,4)" fg:x="3092" fg:w="2"/><text x="70.1857%" y="495.50"></text></g><g><title>alloc::collections::vec_deque::count (2 samples, 0.05%)</title><rect x="70.0657%" y="469" width="0.0453%" height="15" fill="rgb(212,174,34)" fg:x="3092" fg:w="2"/><text x="70.1857%" y="479.50"></text></g><g><title>bimap::hash::BiHashMap&lt;L,R,LS,RS&gt;::insert (1 samples, 0.02%)</title><rect x="70.1110%" y="485" width="0.0227%" height="15" fill="rgb(253,83,4)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="495.50"></text></g><g><title>bimap::hash::BiHashMap&lt;L,R,LS,RS&gt;::insert_unchecked (1 samples, 0.02%)</title><rect x="70.1110%" y="469" width="0.0227%" height="15" fill="rgb(250,195,49)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.02%)</title><rect x="70.1110%" y="453" width="0.0227%" height="15" fill="rgb(241,192,25)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.02%)</title><rect x="70.1110%" y="437" width="0.0227%" height="15" fill="rgb(208,124,10)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.02%)</title><rect x="70.1110%" y="421" width="0.0227%" height="15" fill="rgb(222,33,0)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="70.1110%" y="405" width="0.0227%" height="15" fill="rgb(234,209,28)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.02%)</title><rect x="70.1110%" y="389" width="0.0227%" height="15" fill="rgb(224,11,23)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.02%)</title><rect x="70.1110%" y="373" width="0.0227%" height="15" fill="rgb(232,99,1)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1 samples, 0.02%)</title><rect x="70.1110%" y="357" width="0.0227%" height="15" fill="rgb(237,95,45)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (1 samples, 0.02%)</title><rect x="70.1110%" y="341" width="0.0227%" height="15" fill="rgb(208,109,11)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="351.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (1 samples, 0.02%)</title><rect x="70.1110%" y="325" width="0.0227%" height="15" fill="rgb(216,190,48)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.02%)</title><rect x="70.1110%" y="309" width="0.0227%" height="15" fill="rgb(251,171,36)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="70.1110%" y="293" width="0.0227%" height="15" fill="rgb(230,62,22)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.02%)</title><rect x="70.1110%" y="277" width="0.0227%" height="15" fill="rgb(225,114,35)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="287.50"></text></g><g><title>&lt;bimap::mem::Ref&lt;T&gt; as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="70.1110%" y="261" width="0.0227%" height="15" fill="rgb(215,118,42)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="271.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="70.1110%" y="245" width="0.0227%" height="15" fill="rgb(243,119,21)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="255.50"></text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="70.1110%" y="229" width="0.0227%" height="15" fill="rgb(252,177,53)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="239.50"></text></g><g><title>&lt;std::path::Path as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="70.1110%" y="213" width="0.0227%" height="15" fill="rgb(237,209,29)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="70.1110%" y="197" width="0.0227%" height="15" fill="rgb(212,65,23)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="70.1110%" y="181" width="0.0227%" height="15" fill="rgb(230,222,46)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="70.1110%" y="165" width="0.0227%" height="15" fill="rgb(215,135,32)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="175.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.02%)</title><rect x="70.1110%" y="149" width="0.0227%" height="15" fill="rgb(246,101,22)" fg:x="3094" fg:w="1"/><text x="70.2310%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="70.1337%" y="373" width="0.0227%" height="15" fill="rgb(206,107,13)" fg:x="3095" fg:w="1"/><text x="70.2537%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="70.1337%" y="357" width="0.0227%" height="15" fill="rgb(250,100,44)" fg:x="3095" fg:w="1"/><text x="70.2537%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.02%)</title><rect x="70.1337%" y="341" width="0.0227%" height="15" fill="rgb(231,147,38)" fg:x="3095" fg:w="1"/><text x="70.2537%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.02%)</title><rect x="70.1337%" y="325" width="0.0227%" height="15" fill="rgb(229,8,40)" fg:x="3095" fg:w="1"/><text x="70.2537%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.02%)</title><rect x="70.1337%" y="309" width="0.0227%" height="15" fill="rgb(221,135,30)" fg:x="3095" fg:w="1"/><text x="70.2537%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="70.1790%" y="309" width="0.0227%" height="15" fill="rgb(249,193,18)" fg:x="3097" fg:w="1"/><text x="70.2990%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="70.1790%" y="293" width="0.0227%" height="15" fill="rgb(209,133,39)" fg:x="3097" fg:w="1"/><text x="70.2990%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="70.1790%" y="277" width="0.0227%" height="15" fill="rgb(232,100,14)" fg:x="3097" fg:w="1"/><text x="70.2990%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.02%)</title><rect x="70.1790%" y="261" width="0.0227%" height="15" fill="rgb(224,185,1)" fg:x="3097" fg:w="1"/><text x="70.2990%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.02%)</title><rect x="70.2017%" y="309" width="0.0227%" height="15" fill="rgb(223,139,8)" fg:x="3098" fg:w="1"/><text x="70.3217%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.02%)</title><rect x="70.2017%" y="293" width="0.0227%" height="15" fill="rgb(232,213,38)" fg:x="3098" fg:w="1"/><text x="70.3217%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.18%)</title><rect x="70.1337%" y="405" width="0.1813%" height="15" fill="rgb(207,94,22)" fg:x="3095" fg:w="8"/><text x="70.2537%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.18%)</title><rect x="70.1337%" y="389" width="0.1813%" height="15" fill="rgb(219,183,54)" fg:x="3095" fg:w="8"/><text x="70.2537%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.16%)</title><rect x="70.1564%" y="373" width="0.1586%" height="15" fill="rgb(216,185,54)" fg:x="3096" fg:w="7"/><text x="70.2764%" y="383.50"></text></g><g><title>&lt;bimap::mem::Wrapper&lt;T&gt; as core::hash::Hash&gt;::hash (7 samples, 0.16%)</title><rect x="70.1564%" y="357" width="0.1586%" height="15" fill="rgb(254,217,39)" fg:x="3096" fg:w="7"/><text x="70.2764%" y="367.50"></text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (6 samples, 0.14%)</title><rect x="70.1790%" y="341" width="0.1360%" height="15" fill="rgb(240,178,23)" fg:x="3097" fg:w="6"/><text x="70.2990%" y="351.50"></text></g><g><title>&lt;std::path::Path as core::hash::Hash&gt;::hash (6 samples, 0.14%)</title><rect x="70.1790%" y="325" width="0.1360%" height="15" fill="rgb(218,11,47)" fg:x="3097" fg:w="6"/><text x="70.2990%" y="335.50"></text></g><g><title>std::sys::unix::path::is_sep_byte (4 samples, 0.09%)</title><rect x="70.2243%" y="309" width="0.0906%" height="15" fill="rgb(218,51,51)" fg:x="3099" fg:w="4"/><text x="70.3443%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.02%)</title><rect x="70.3150%" y="357" width="0.0227%" height="15" fill="rgb(238,126,27)" fg:x="3103" fg:w="1"/><text x="70.4350%" y="367.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.02%)</title><rect x="70.3150%" y="341" width="0.0227%" height="15" fill="rgb(249,202,22)" fg:x="3103" fg:w="1"/><text x="70.4350%" y="351.50"></text></g><g><title>&lt;bimap::mem::Wrapper&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="70.3150%" y="325" width="0.0227%" height="15" fill="rgb(254,195,49)" fg:x="3103" fg:w="1"/><text x="70.4350%" y="335.50"></text></g><g><title>&lt;std::path::PathBuf as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="70.3150%" y="309" width="0.0227%" height="15" fill="rgb(208,123,14)" fg:x="3103" fg:w="1"/><text x="70.4350%" y="319.50"></text></g><g><title>std::path::Path::components (1 samples, 0.02%)</title><rect x="70.3150%" y="293" width="0.0227%" height="15" fill="rgb(224,200,8)" fg:x="3103" fg:w="1"/><text x="70.4350%" y="303.50"></text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::write_line::{{closure}} (2,105 samples, 47.70%)</title><rect x="22.6603%" y="517" width="47.7000%" height="15" fill="rgb(217,61,36)" fg:x="1000" fg:w="2105"/><text x="22.7803%" y="527.50">dads_gzip_thing::gzip::JsonLinesWriteStreamPool::write_line::{{closure}}</text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::get_id_or_generate (11 samples, 0.25%)</title><rect x="70.1110%" y="501" width="0.2493%" height="15" fill="rgb(206,35,45)" fg:x="3094" fg:w="11"/><text x="70.2310%" y="511.50"></text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::get_id (10 samples, 0.23%)</title><rect x="70.1337%" y="485" width="0.2266%" height="15" fill="rgb(217,65,33)" fg:x="3095" fg:w="10"/><text x="70.2537%" y="495.50"></text></g><g><title>bimap::hash::BiHashMap&lt;L,R,LS,RS&gt;::get_by_left (10 samples, 0.23%)</title><rect x="70.1337%" y="469" width="0.2266%" height="15" fill="rgb(222,158,48)" fg:x="3095" fg:w="10"/><text x="70.2537%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (10 samples, 0.23%)</title><rect x="70.1337%" y="453" width="0.2266%" height="15" fill="rgb(254,2,54)" fg:x="3095" fg:w="10"/><text x="70.2537%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (10 samples, 0.23%)</title><rect x="70.1337%" y="437" width="0.2266%" height="15" fill="rgb(250,143,38)" fg:x="3095" fg:w="10"/><text x="70.2537%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (10 samples, 0.23%)</title><rect x="70.1337%" y="421" width="0.2266%" height="15" fill="rgb(248,25,0)" fg:x="3095" fg:w="10"/><text x="70.2537%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.05%)</title><rect x="70.3150%" y="405" width="0.0453%" height="15" fill="rgb(206,152,27)" fg:x="3103" fg:w="2"/><text x="70.4350%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.05%)</title><rect x="70.3150%" y="389" width="0.0453%" height="15" fill="rgb(240,77,30)" fg:x="3103" fg:w="2"/><text x="70.4350%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.05%)</title><rect x="70.3150%" y="373" width="0.0453%" height="15" fill="rgb(231,5,3)" fg:x="3103" fg:w="2"/><text x="70.4350%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.02%)</title><rect x="70.3376%" y="357" width="0.0227%" height="15" fill="rgb(207,226,32)" fg:x="3104" fg:w="1"/><text x="70.4576%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.02%)</title><rect x="70.3376%" y="341" width="0.0227%" height="15" fill="rgb(222,207,47)" fg:x="3104" fg:w="1"/><text x="70.4576%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="70.3376%" y="325" width="0.0227%" height="15" fill="rgb(229,115,45)" fg:x="3104" fg:w="1"/><text x="70.4576%" y="335.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (1 samples, 0.02%)</title><rect x="70.3603%" y="469" width="0.0227%" height="15" fill="rgb(224,191,6)" fg:x="3105" fg:w="1"/><text x="70.4803%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt; (2 samples, 0.05%)</title><rect x="70.4509%" y="437" width="0.0453%" height="15" fill="rgb(230,227,24)" fg:x="3109" fg:w="2"/><text x="70.5709%" y="447.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="70.4509%" y="421" width="0.0453%" height="15" fill="rgb(228,80,19)" fg:x="3109" fg:w="2"/><text x="70.5709%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (2 samples, 0.05%)</title><rect x="70.4509%" y="405" width="0.0453%" height="15" fill="rgb(247,229,0)" fg:x="3109" fg:w="2"/><text x="70.5709%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (2 samples, 0.05%)</title><rect x="70.4509%" y="389" width="0.0453%" height="15" fill="rgb(237,194,15)" fg:x="3109" fg:w="2"/><text x="70.5709%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,116 samples, 47.95%)</title><rect x="22.6603%" y="533" width="47.9492%" height="15" fill="rgb(219,203,20)" fg:x="1000" fg:w="2116"/><text x="22.7803%" y="543.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::lock::{{closure}} (11 samples, 0.25%)</title><rect x="70.3603%" y="517" width="0.2493%" height="15" fill="rgb(234,128,8)" fg:x="3105" fg:w="11"/><text x="70.4803%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11 samples, 0.25%)</title><rect x="70.3603%" y="501" width="0.2493%" height="15" fill="rgb(248,202,8)" fg:x="3105" fg:w="11"/><text x="70.4803%" y="511.50"></text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::acquire::{{closure}} (11 samples, 0.25%)</title><rect x="70.3603%" y="485" width="0.2493%" height="15" fill="rgb(206,104,37)" fg:x="3105" fg:w="11"/><text x="70.4803%" y="495.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (10 samples, 0.23%)</title><rect x="70.3830%" y="469" width="0.2266%" height="15" fill="rgb(223,8,27)" fg:x="3106" fg:w="10"/><text x="70.5030%" y="479.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire (10 samples, 0.23%)</title><rect x="70.3830%" y="453" width="0.2266%" height="15" fill="rgb(216,217,28)" fg:x="3106" fg:w="10"/><text x="70.5030%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (5 samples, 0.11%)</title><rect x="70.4963%" y="437" width="0.1133%" height="15" fill="rgb(249,199,1)" fg:x="3111" fg:w="5"/><text x="70.6163%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (5 samples, 0.11%)</title><rect x="70.4963%" y="421" width="0.1133%" height="15" fill="rgb(240,85,17)" fg:x="3111" fg:w="5"/><text x="70.6163%" y="431.50"></text></g><g><title>tokio::sync::batch_semaphore::Waiter::assign_permits (4 samples, 0.09%)</title><rect x="70.6096%" y="485" width="0.0906%" height="15" fill="rgb(206,108,45)" fg:x="3116" fg:w="4"/><text x="70.7296%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (4 samples, 0.09%)</title><rect x="70.6096%" y="469" width="0.0906%" height="15" fill="rgb(245,210,41)" fg:x="3116" fg:w="4"/><text x="70.7296%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (4 samples, 0.09%)</title><rect x="70.6096%" y="453" width="0.0906%" height="15" fill="rgb(206,13,37)" fg:x="3116" fg:w="4"/><text x="70.7296%" y="463.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (5 samples, 0.11%)</title><rect x="70.6096%" y="501" width="0.1133%" height="15" fill="rgb(250,61,18)" fg:x="3116" fg:w="5"/><text x="70.7296%" y="511.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (1 samples, 0.02%)</title><rect x="70.7002%" y="485" width="0.0227%" height="15" fill="rgb(235,172,48)" fg:x="3120" fg:w="1"/><text x="70.8202%" y="495.50"></text></g><g><title>core::task::wake::Waker::wake (1 samples, 0.02%)</title><rect x="70.7002%" y="469" width="0.0227%" height="15" fill="rgb(249,201,17)" fg:x="3120" fg:w="1"/><text x="70.8202%" y="479.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.02%)</title><rect x="70.7002%" y="453" width="0.0227%" height="15" fill="rgb(219,208,6)" fg:x="3120" fg:w="1"/><text x="70.8202%" y="463.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (1 samples, 0.02%)</title><rect x="70.7002%" y="437" width="0.0227%" height="15" fill="rgb(248,31,23)" fg:x="3120" fg:w="1"/><text x="70.8202%" y="447.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (1 samples, 0.02%)</title><rect x="70.7002%" y="421" width="0.0227%" height="15" fill="rgb(245,15,42)" fg:x="3120" fg:w="1"/><text x="70.8202%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (1 samples, 0.02%)</title><rect x="70.7002%" y="405" width="0.0227%" height="15" fill="rgb(222,217,39)" fg:x="3120" fg:w="1"/><text x="70.8202%" y="415.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (1 samples, 0.02%)</title><rect x="70.7002%" y="389" width="0.0227%" height="15" fill="rgb(210,219,27)" fg:x="3120" fg:w="1"/><text x="70.8202%" y="399.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="70.7002%" y="373" width="0.0227%" height="15" fill="rgb(252,166,36)" fg:x="3120" fg:w="1"/><text x="70.8202%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mutex::MutexGuard&lt;alloc::collections::vec_deque::VecDeque&lt;dads_gzip_thing::Line&gt;&gt;&gt; (6 samples, 0.14%)</title><rect x="70.6096%" y="533" width="0.1360%" height="15" fill="rgb(245,132,34)" fg:x="3116" fg:w="6"/><text x="70.7296%" y="543.50"></text></g><g><title>&lt;tokio::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.14%)</title><rect x="70.6096%" y="517" width="0.1360%" height="15" fill="rgb(236,54,3)" fg:x="3116" fg:w="6"/><text x="70.7296%" y="527.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (1 samples, 0.02%)</title><rect x="70.7229%" y="501" width="0.0227%" height="15" fill="rgb(241,173,43)" fg:x="3121" fg:w="1"/><text x="70.8429%" y="511.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="70.7229%" y="485" width="0.0227%" height="15" fill="rgb(215,190,9)" fg:x="3121" fg:w="1"/><text x="70.8429%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="70.7229%" y="469" width="0.0227%" height="15" fill="rgb(242,101,16)" fg:x="3121" fg:w="1"/><text x="70.8429%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1 samples, 0.02%)</title><rect x="70.7229%" y="453" width="0.0227%" height="15" fill="rgb(223,190,21)" fg:x="3121" fg:w="1"/><text x="70.8429%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (1 samples, 0.02%)</title><rect x="70.7229%" y="437" width="0.0227%" height="15" fill="rgb(215,228,25)" fg:x="3121" fg:w="1"/><text x="70.8429%" y="447.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (3 samples, 0.07%)</title><rect x="70.7455%" y="501" width="0.0680%" height="15" fill="rgb(225,36,22)" fg:x="3122" fg:w="3"/><text x="70.8655%" y="511.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (3 samples, 0.07%)</title><rect x="70.7455%" y="485" width="0.0680%" height="15" fill="rgb(251,106,46)" fg:x="3122" fg:w="3"/><text x="70.8655%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (3 samples, 0.07%)</title><rect x="70.7455%" y="469" width="0.0680%" height="15" fill="rgb(208,90,1)" fg:x="3122" fg:w="3"/><text x="70.8655%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (3 samples, 0.07%)</title><rect x="70.7455%" y="453" width="0.0680%" height="15" fill="rgb(243,10,4)" fg:x="3122" fg:w="3"/><text x="70.8655%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (3 samples, 0.07%)</title><rect x="70.7455%" y="437" width="0.0680%" height="15" fill="rgb(212,137,27)" fg:x="3122" fg:w="3"/><text x="70.8655%" y="447.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="70.8135%" y="469" width="0.0227%" height="15" fill="rgb(231,220,49)" fg:x="3125" fg:w="1"/><text x="70.9335%" y="479.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.02%)</title><rect x="70.8135%" y="453" width="0.0227%" height="15" fill="rgb(237,96,20)" fg:x="3125" fg:w="1"/><text x="70.9335%" y="463.50"></text></g><g><title>std::thread::panicking (1 samples, 0.02%)</title><rect x="70.8135%" y="437" width="0.0227%" height="15" fill="rgb(239,229,30)" fg:x="3125" fg:w="1"/><text x="70.9335%" y="447.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.02%)</title><rect x="70.8135%" y="421" width="0.0227%" height="15" fill="rgb(219,65,33)" fg:x="3125" fg:w="1"/><text x="70.9335%" y="431.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.02%)</title><rect x="70.8135%" y="405" width="0.0227%" height="15" fill="rgb(243,134,7)" fg:x="3125" fg:w="1"/><text x="70.9335%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.02%)</title><rect x="70.8135%" y="389" width="0.0227%" height="15" fill="rgb(216,177,54)" fg:x="3125" fg:w="1"/><text x="70.9335%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="70.8135%" y="373" width="0.0227%" height="15" fill="rgb(211,160,20)" fg:x="3125" fg:w="1"/><text x="70.9335%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (5 samples, 0.11%)</title><rect x="70.8362%" y="437" width="0.1133%" height="15" fill="rgb(239,85,39)" fg:x="3126" fg:w="5"/><text x="70.9562%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (5 samples, 0.11%)</title><rect x="70.8362%" y="421" width="0.1133%" height="15" fill="rgb(232,125,22)" fg:x="3126" fg:w="5"/><text x="70.9562%" y="431.50"></text></g><g><title>dads_gzip_thing::output_lines::{{closure}} (2,132 samples, 48.31%)</title><rect x="22.6603%" y="549" width="48.3118%" height="15" fill="rgb(244,57,34)" fg:x="1000" fg:w="2132"/><text x="22.7803%" y="559.50">dads_gzip_thing::output_lines::{{closure}}</text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::try_recv (10 samples, 0.23%)</title><rect x="70.7455%" y="533" width="0.2266%" height="15" fill="rgb(214,203,32)" fg:x="3122" fg:w="10"/><text x="70.8655%" y="543.50"></text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (10 samples, 0.23%)</title><rect x="70.7455%" y="517" width="0.2266%" height="15" fill="rgb(207,58,43)" fg:x="3122" fg:w="10"/><text x="70.8655%" y="527.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (7 samples, 0.16%)</title><rect x="70.8135%" y="501" width="0.1586%" height="15" fill="rgb(215,193,15)" fg:x="3125" fg:w="7"/><text x="70.9335%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (7 samples, 0.16%)</title><rect x="70.8135%" y="485" width="0.1586%" height="15" fill="rgb(232,15,44)" fg:x="3125" fg:w="7"/><text x="70.9335%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (6 samples, 0.14%)</title><rect x="70.8362%" y="469" width="0.1360%" height="15" fill="rgb(212,3,48)" fg:x="3126" fg:w="6"/><text x="70.9562%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (6 samples, 0.14%)</title><rect x="70.8362%" y="453" width="0.1360%" height="15" fill="rgb(218,128,7)" fg:x="3126" fg:w="6"/><text x="70.9562%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (1 samples, 0.02%)</title><rect x="70.9495%" y="437" width="0.0227%" height="15" fill="rgb(226,216,39)" fg:x="3131" fg:w="1"/><text x="71.0695%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (1 samples, 0.02%)</title><rect x="70.9495%" y="421" width="0.0227%" height="15" fill="rgb(243,47,51)" fg:x="3131" fg:w="1"/><text x="71.0695%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.02%)</title><rect x="70.9495%" y="405" width="0.0227%" height="15" fill="rgb(241,183,40)" fg:x="3131" fg:w="1"/><text x="71.0695%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="70.9495%" y="389" width="0.0227%" height="15" fill="rgb(231,217,32)" fg:x="3131" fg:w="1"/><text x="71.0695%" y="399.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (34 samples, 0.77%)</title><rect x="71.5613%" y="469" width="0.7705%" height="15" fill="rgb(229,61,38)" fg:x="3158" fg:w="34"/><text x="71.6813%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt; (138 samples, 3.13%)</title><rect x="73.8047%" y="437" width="3.1271%" height="15" fill="rgb(225,210,5)" fg:x="3257" fg:w="138"/><text x="73.9247%" y="447.50">core::ptr..</text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (138 samples, 3.13%)</title><rect x="73.8047%" y="421" width="3.1271%" height="15" fill="rgb(231,79,45)" fg:x="3257" fg:w="138"/><text x="73.9247%" y="431.50">&lt;std::syn..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (138 samples, 3.13%)</title><rect x="73.8047%" y="405" width="3.1271%" height="15" fill="rgb(224,100,7)" fg:x="3257" fg:w="138"/><text x="73.9247%" y="415.50">std::sys_..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (138 samples, 3.13%)</title><rect x="73.8047%" y="389" width="3.1271%" height="15" fill="rgb(241,198,18)" fg:x="3257" fg:w="138"/><text x="73.9247%" y="399.50">std::sys:..</text></g><g><title>core::sync::atomic::AtomicU32::swap (138 samples, 3.13%)</title><rect x="73.8047%" y="373" width="3.1271%" height="15" fill="rgb(252,97,53)" fg:x="3257" fg:w="138"/><text x="73.9247%" y="383.50">core::syn..</text></g><g><title>core::sync::atomic::atomic_swap (138 samples, 3.13%)</title><rect x="73.8047%" y="357" width="3.1271%" height="15" fill="rgb(220,88,7)" fg:x="3257" fg:w="138"/><text x="73.9247%" y="367.50">core::syn..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (24 samples, 0.54%)</title><rect x="76.9318%" y="437" width="0.5438%" height="15" fill="rgb(213,176,14)" fg:x="3395" fg:w="24"/><text x="77.0518%" y="447.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire::{{closure}} (24 samples, 0.54%)</title><rect x="76.9318%" y="421" width="0.5438%" height="15" fill="rgb(246,73,7)" fg:x="3395" fg:w="24"/><text x="77.0518%" y="431.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (24 samples, 0.54%)</title><rect x="76.9318%" y="405" width="0.5438%" height="15" fill="rgb(245,64,36)" fg:x="3395" fg:w="24"/><text x="77.0518%" y="415.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (24 samples, 0.54%)</title><rect x="76.9318%" y="389" width="0.5438%" height="15" fill="rgb(245,80,10)" fg:x="3395" fg:w="24"/><text x="77.0518%" y="399.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (24 samples, 0.54%)</title><rect x="76.9318%" y="373" width="0.5438%" height="15" fill="rgb(232,107,50)" fg:x="3395" fg:w="24"/><text x="77.0518%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (16 samples, 0.36%)</title><rect x="77.1131%" y="357" width="0.3626%" height="15" fill="rgb(253,3,0)" fg:x="3403" fg:w="16"/><text x="77.2331%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_add (16 samples, 0.36%)</title><rect x="77.1131%" y="341" width="0.3626%" height="15" fill="rgb(212,99,53)" fg:x="3403" fg:w="16"/><text x="77.2331%" y="351.50"></text></g><g><title>std::sync::poison::Flag::done (9 samples, 0.20%)</title><rect x="77.4756%" y="373" width="0.2039%" height="15" fill="rgb(249,111,54)" fg:x="3419" fg:w="9"/><text x="77.5956%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (9 samples, 0.20%)</title><rect x="77.4756%" y="357" width="0.2039%" height="15" fill="rgb(249,55,30)" fg:x="3419" fg:w="9"/><text x="77.5956%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_store (9 samples, 0.20%)</title><rect x="77.4756%" y="341" width="0.2039%" height="15" fill="rgb(237,47,42)" fg:x="3419" fg:w="9"/><text x="77.5956%" y="351.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (33 samples, 0.75%)</title><rect x="77.4756%" y="437" width="0.7478%" height="15" fill="rgb(211,20,18)" fg:x="3419" fg:w="33"/><text x="77.5956%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt;&gt; (33 samples, 0.75%)</title><rect x="77.4756%" y="421" width="0.7478%" height="15" fill="rgb(231,203,46)" fg:x="3419" fg:w="33"/><text x="77.5956%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt; (33 samples, 0.75%)</title><rect x="77.4756%" y="405" width="0.7478%" height="15" fill="rgb(237,142,3)" fg:x="3419" fg:w="33"/><text x="77.5956%" y="415.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.75%)</title><rect x="77.4756%" y="389" width="0.7478%" height="15" fill="rgb(241,107,1)" fg:x="3419" fg:w="33"/><text x="77.5956%" y="399.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (24 samples, 0.54%)</title><rect x="77.6796%" y="373" width="0.5438%" height="15" fill="rgb(229,83,13)" fg:x="3428" fg:w="24"/><text x="77.7996%" y="383.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (24 samples, 0.54%)</title><rect x="77.6796%" y="357" width="0.5438%" height="15" fill="rgb(241,91,40)" fg:x="3428" fg:w="24"/><text x="77.7996%" y="367.50"></text></g><g><title>tokio::sync::batch_semaphore::Waiter::assign_permits (60 samples, 1.36%)</title><rect x="78.2234%" y="437" width="1.3596%" height="15" fill="rgb(225,3,45)" fg:x="3452" fg:w="60"/><text x="78.3434%" y="447.50">to..</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (60 samples, 1.36%)</title><rect x="78.2234%" y="421" width="1.3596%" height="15" fill="rgb(244,223,14)" fg:x="3452" fg:w="60"/><text x="78.3434%" y="431.50">co..</text></g><g><title>core::sync::atomic::atomic_compare_exchange (60 samples, 1.36%)</title><rect x="78.2234%" y="405" width="1.3596%" height="15" fill="rgb(224,124,37)" fg:x="3452" fg:w="60"/><text x="78.3434%" y="415.50">co..</text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (322 samples, 7.30%)</title><rect x="72.3317%" y="469" width="7.2966%" height="15" fill="rgb(251,171,30)" fg:x="3192" fg:w="322"/><text x="72.4517%" y="479.50">&lt;tokio::sync::batch_sem..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire (322 samples, 7.30%)</title><rect x="72.3317%" y="453" width="7.2966%" height="15" fill="rgb(236,46,54)" fg:x="3192" fg:w="322"/><text x="72.4517%" y="463.50">tokio::sync::batch_sema..</text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (2 samples, 0.05%)</title><rect x="79.5831%" y="437" width="0.0453%" height="15" fill="rgb(245,213,5)" fg:x="3512" fg:w="2"/><text x="79.7031%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::batch_semaphore::Acquire&gt; (4 samples, 0.09%)</title><rect x="79.6284%" y="469" width="0.0906%" height="15" fill="rgb(230,144,27)" fg:x="3514" fg:w="4"/><text x="79.7484%" y="479.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect x="79.6510%" y="453" width="0.0680%" height="15" fill="rgb(220,86,6)" fg:x="3515" fg:w="3"/><text x="79.7710%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (385 samples, 8.72%)</title><rect x="71.1081%" y="533" width="8.7242%" height="15" fill="rgb(240,20,13)" fg:x="3138" fg:w="385"/><text x="71.2281%" y="543.50">&lt;core::future::from_generato..</text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::lock::{{closure}} (370 samples, 8.38%)</title><rect x="71.4480%" y="517" width="8.3843%" height="15" fill="rgb(217,89,34)" fg:x="3153" fg:w="370"/><text x="71.5680%" y="527.50">tokio::sync::mutex::Mutex&lt;T..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (370 samples, 8.38%)</title><rect x="71.4480%" y="501" width="8.3843%" height="15" fill="rgb(229,13,5)" fg:x="3153" fg:w="370"/><text x="71.5680%" y="511.50">&lt;core::future::from_generat..</text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::acquire::{{closure}} (370 samples, 8.38%)</title><rect x="71.4480%" y="485" width="8.3843%" height="15" fill="rgb(244,67,35)" fg:x="3153" fg:w="370"/><text x="71.5680%" y="495.50">tokio::sync::mutex::Mutex&lt;T..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (5 samples, 0.11%)</title><rect x="79.7190%" y="469" width="0.1133%" height="15" fill="rgb(221,40,2)" fg:x="3518" fg:w="5"/><text x="79.8390%" y="479.50"></text></g><g><title>tokio::sync::batch_semaphore::Acquire::new (4 samples, 0.09%)</title><rect x="79.7417%" y="453" width="0.0906%" height="15" fill="rgb(237,157,21)" fg:x="3519" fg:w="4"/><text x="79.8617%" y="463.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_back (9 samples, 0.20%)</title><rect x="79.8323%" y="533" width="0.2039%" height="15" fill="rgb(222,94,11)" fg:x="3523" fg:w="9"/><text x="79.9523%" y="543.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (5 samples, 0.11%)</title><rect x="79.9230%" y="517" width="0.1133%" height="15" fill="rgb(249,113,6)" fg:x="3527" fg:w="5"/><text x="80.0430%" y="527.50"></text></g><g><title>core::ptr::read (5 samples, 0.11%)</title><rect x="79.9230%" y="501" width="0.1133%" height="15" fill="rgb(238,137,36)" fg:x="3527" fg:w="5"/><text x="80.0430%" y="511.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (5 samples, 0.11%)</title><rect x="79.9230%" y="485" width="0.1133%" height="15" fill="rgb(210,102,26)" fg:x="3527" fg:w="5"/><text x="80.0430%" y="495.50"></text></g><g><title>core::mem::drop (35 samples, 0.79%)</title><rect x="80.0363%" y="533" width="0.7931%" height="15" fill="rgb(218,30,30)" fg:x="3532" fg:w="35"/><text x="80.1563%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mutex::MutexGuard&lt;alloc::collections::vec_deque::VecDeque&lt;alloc::string::String&gt;&gt;&gt; (35 samples, 0.79%)</title><rect x="80.0363%" y="517" width="0.7931%" height="15" fill="rgb(214,67,26)" fg:x="3532" fg:w="35"/><text x="80.1563%" y="527.50"></text></g><g><title>&lt;tokio::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.79%)</title><rect x="80.0363%" y="501" width="0.7931%" height="15" fill="rgb(251,9,53)" fg:x="3532" fg:w="35"/><text x="80.1563%" y="511.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (35 samples, 0.79%)</title><rect x="80.0363%" y="485" width="0.7931%" height="15" fill="rgb(228,204,25)" fg:x="3532" fg:w="35"/><text x="80.1563%" y="495.50"></text></g><g><title>tokio::sync::batch_semaphore::Waiter::assign_permits (35 samples, 0.79%)</title><rect x="80.0363%" y="469" width="0.7931%" height="15" fill="rgb(207,153,8)" fg:x="3532" fg:w="35"/><text x="80.1563%" y="479.50"></text></g><g><title>core::mem::drop (21 samples, 0.48%)</title><rect x="80.8294%" y="485" width="0.4759%" height="15" fill="rgb(242,9,16)" fg:x="3567" fg:w="21"/><text x="80.9494%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt; (21 samples, 0.48%)</title><rect x="80.8294%" y="469" width="0.4759%" height="15" fill="rgb(217,211,10)" fg:x="3567" fg:w="21"/><text x="80.9494%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.48%)</title><rect x="80.8294%" y="453" width="0.4759%" height="15" fill="rgb(219,228,52)" fg:x="3567" fg:w="21"/><text x="80.9494%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (21 samples, 0.48%)</title><rect x="80.8294%" y="437" width="0.4759%" height="15" fill="rgb(231,92,29)" fg:x="3567" fg:w="21"/><text x="80.9494%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (21 samples, 0.48%)</title><rect x="80.8294%" y="421" width="0.4759%" height="15" fill="rgb(232,8,23)" fg:x="3567" fg:w="21"/><text x="80.9494%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (21 samples, 0.48%)</title><rect x="80.8294%" y="405" width="0.4759%" height="15" fill="rgb(216,211,34)" fg:x="3567" fg:w="21"/><text x="80.9494%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_swap (21 samples, 0.48%)</title><rect x="80.8294%" y="389" width="0.4759%" height="15" fill="rgb(236,151,0)" fg:x="3567" fg:w="21"/><text x="80.9494%" y="399.50"></text></g><g><title>tokio::sync::batch_semaphore::Waiter::assign_permits (30 samples, 0.68%)</title><rect x="81.3052%" y="485" width="0.6798%" height="15" fill="rgb(209,168,3)" fg:x="3588" fg:w="30"/><text x="81.4252%" y="495.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (16 samples, 0.36%)</title><rect x="82.0077%" y="421" width="0.3626%" height="15" fill="rgb(208,129,28)" fg:x="3619" fg:w="16"/><text x="82.1277%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (16 samples, 0.36%)</title><rect x="82.0077%" y="405" width="0.3626%" height="15" fill="rgb(229,78,22)" fg:x="3619" fg:w="16"/><text x="82.1277%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (16 samples, 0.36%)</title><rect x="82.0077%" y="389" width="0.3626%" height="15" fill="rgb(228,187,13)" fg:x="3619" fg:w="16"/><text x="82.1277%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (16 samples, 0.36%)</title><rect x="82.0077%" y="373" width="0.3626%" height="15" fill="rgb(240,119,24)" fg:x="3619" fg:w="16"/><text x="82.1277%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.07%)</title><rect x="83.2993%" y="357" width="0.0680%" height="15" fill="rgb(209,194,42)" fg:x="3676" fg:w="3"/><text x="83.4193%" y="367.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.07%)</title><rect x="83.2993%" y="341" width="0.0680%" height="15" fill="rgb(247,200,46)" fg:x="3676" fg:w="3"/><text x="83.4193%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::CURRENT::FOO::__getit (1 samples, 0.02%)</title><rect x="83.3447%" y="325" width="0.0227%" height="15" fill="rgb(218,76,16)" fg:x="3678" fg:w="1"/><text x="83.4647%" y="335.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (8 samples, 0.18%)</title><rect x="83.5486%" y="341" width="0.1813%" height="15" fill="rgb(225,21,48)" fg:x="3687" fg:w="8"/><text x="83.6686%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (8 samples, 0.18%)</title><rect x="83.5486%" y="325" width="0.1813%" height="15" fill="rgb(239,223,50)" fg:x="3687" fg:w="8"/><text x="83.6686%" y="335.50"></text></g><g><title>core::cell::BorrowRefMut::new (8 samples, 0.18%)</title><rect x="83.5486%" y="309" width="0.1813%" height="15" fill="rgb(244,45,21)" fg:x="3687" fg:w="8"/><text x="83.6686%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (56 samples, 1.27%)</title><rect x="82.6649%" y="405" width="1.2690%" height="15" fill="rgb(232,33,43)" fg:x="3648" fg:w="56"/><text x="82.7849%" y="415.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (54 samples, 1.22%)</title><rect x="82.7102%" y="389" width="1.2237%" height="15" fill="rgb(209,8,3)" fg:x="3650" fg:w="54"/><text x="82.8302%" y="399.50">to..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (50 samples, 1.13%)</title><rect x="82.8008%" y="373" width="1.1330%" height="15" fill="rgb(214,25,53)" fg:x="3654" fg:w="50"/><text x="82.9208%" y="383.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::{{closure}} (25 samples, 0.57%)</title><rect x="83.3673%" y="357" width="0.5665%" height="15" fill="rgb(254,186,54)" fg:x="3679" fg:w="25"/><text x="83.4873%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (9 samples, 0.20%)</title><rect x="83.7299%" y="341" width="0.2039%" height="15" fill="rgb(208,174,49)" fg:x="3695" fg:w="9"/><text x="83.8499%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked (3 samples, 0.07%)</title><rect x="83.8659%" y="325" width="0.0680%" height="15" fill="rgb(233,191,51)" fg:x="3701" fg:w="3"/><text x="83.9859%" y="335.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::from_raw (1 samples, 0.02%)</title><rect x="83.9338%" y="389" width="0.0227%" height="15" fill="rgb(222,134,10)" fg:x="3704" fg:w="1"/><text x="84.0538%" y="399.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::from_raw (1 samples, 0.02%)</title><rect x="83.9338%" y="373" width="0.0227%" height="15" fill="rgb(230,226,20)" fg:x="3704" fg:w="1"/><text x="84.0538%" y="383.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (71 samples, 1.61%)</title><rect x="82.3703%" y="421" width="1.6089%" height="15" fill="rgb(251,111,25)" fg:x="3635" fg:w="71"/><text x="82.4903%" y="431.50">tok..</text></g><g><title>tokio::runtime::task::raw::schedule (2 samples, 0.05%)</title><rect x="83.9338%" y="405" width="0.0453%" height="15" fill="rgb(224,40,46)" fg:x="3704" fg:w="2"/><text x="84.0538%" y="415.50"></text></g><g><title>tokio::runtime::task::core::Header::get_scheduler (1 samples, 0.02%)</title><rect x="83.9565%" y="389" width="0.0227%" height="15" fill="rgb(236,108,47)" fg:x="3705" fg:w="1"/><text x="84.0765%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (9 samples, 0.20%)</title><rect x="83.9792%" y="389" width="0.2039%" height="15" fill="rgb(234,93,0)" fg:x="3706" fg:w="9"/><text x="84.0992%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (9 samples, 0.20%)</title><rect x="83.9792%" y="373" width="0.2039%" height="15" fill="rgb(224,213,32)" fg:x="3706" fg:w="9"/><text x="84.0992%" y="383.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (164 samples, 3.72%)</title><rect x="80.8294%" y="501" width="3.7163%" height="15" fill="rgb(251,11,48)" fg:x="3567" fg:w="164"/><text x="80.9494%" y="511.50">tokio::sync..</text></g><g><title>tokio::util::wake_list::WakeList::wake_all (113 samples, 2.56%)</title><rect x="81.9850%" y="485" width="2.5606%" height="15" fill="rgb(236,173,5)" fg:x="3618" fg:w="113"/><text x="82.1050%" y="495.50">tokio::..</text></g><g><title>core::task::wake::Waker::wake (113 samples, 2.56%)</title><rect x="81.9850%" y="469" width="2.5606%" height="15" fill="rgb(230,95,12)" fg:x="3618" fg:w="113"/><text x="82.1050%" y="479.50">core::t..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (112 samples, 2.54%)</title><rect x="82.0077%" y="453" width="2.5380%" height="15" fill="rgb(232,209,1)" fg:x="3619" fg:w="112"/><text x="82.1277%" y="463.50">tokio:..</text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (112 samples, 2.54%)</title><rect x="82.0077%" y="437" width="2.5380%" height="15" fill="rgb(232,6,1)" fg:x="3619" fg:w="112"/><text x="82.1277%" y="447.50">tokio:..</text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (25 samples, 0.57%)</title><rect x="83.9792%" y="421" width="0.5665%" height="15" fill="rgb(210,224,50)" fg:x="3706" fg:w="25"/><text x="84.0992%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (25 samples, 0.57%)</title><rect x="83.9792%" y="405" width="0.5665%" height="15" fill="rgb(228,127,35)" fg:x="3706" fg:w="25"/><text x="84.0992%" y="415.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val::{{closure}} (16 samples, 0.36%)</title><rect x="84.1831%" y="389" width="0.3626%" height="15" fill="rgb(245,102,45)" fg:x="3715" fg:w="16"/><text x="84.3031%" y="399.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::ref_inc (16 samples, 0.36%)</title><rect x="84.1831%" y="373" width="0.3626%" height="15" fill="rgb(214,1,49)" fg:x="3715" fg:w="16"/><text x="84.3031%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mutex::MutexGuard&lt;alloc::collections::vec_deque::VecDeque&lt;alloc::string::String&gt;&gt;&gt; (181 samples, 4.10%)</title><rect x="80.8294%" y="533" width="4.1015%" height="15" fill="rgb(226,163,40)" fg:x="3567" fg:w="181"/><text x="80.9494%" y="543.50">core::ptr::d..</text></g><g><title>&lt;tokio::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (181 samples, 4.10%)</title><rect x="80.8294%" y="517" width="4.1015%" height="15" fill="rgb(239,212,28)" fg:x="3567" fg:w="181"/><text x="80.9494%" y="527.50">&lt;tokio::sync..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (17 samples, 0.39%)</title><rect x="84.5457%" y="501" width="0.3852%" height="15" fill="rgb(220,20,13)" fg:x="3731" fg:w="17"/><text x="84.6657%" y="511.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (17 samples, 0.39%)</title><rect x="84.5457%" y="485" width="0.3852%" height="15" fill="rgb(210,164,35)" fg:x="3731" fg:w="17"/><text x="84.6657%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (17 samples, 0.39%)</title><rect x="84.5457%" y="469" width="0.3852%" height="15" fill="rgb(248,109,41)" fg:x="3731" fg:w="17"/><text x="84.6657%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (17 samples, 0.39%)</title><rect x="84.5457%" y="453" width="0.3852%" height="15" fill="rgb(238,23,50)" fg:x="3731" fg:w="17"/><text x="84.6657%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (17 samples, 0.39%)</title><rect x="84.5457%" y="437" width="0.3852%" height="15" fill="rgb(211,48,49)" fg:x="3731" fg:w="17"/><text x="84.6657%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (17 samples, 0.39%)</title><rect x="84.5457%" y="421" width="0.3852%" height="15" fill="rgb(223,36,21)" fg:x="3731" fg:w="17"/><text x="84.6657%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (17 samples, 0.39%)</title><rect x="84.5457%" y="405" width="0.3852%" height="15" fill="rgb(207,123,46)" fg:x="3731" fg:w="17"/><text x="84.6657%" y="415.50"></text></g><g><title>tokio::sync::batch_semaphore::Waiter::assign_permits (27 samples, 0.61%)</title><rect x="84.9309%" y="485" width="0.6118%" height="15" fill="rgb(240,218,32)" fg:x="3748" fg:w="27"/><text x="85.0509%" y="495.50"></text></g><g><title>core::cmp::min (27 samples, 0.61%)</title><rect x="84.9309%" y="469" width="0.6118%" height="15" fill="rgb(252,5,43)" fg:x="3748" fg:w="27"/><text x="85.0509%" y="479.50"></text></g><g><title>core::cmp::Ord::min (27 samples, 0.61%)</title><rect x="84.9309%" y="453" width="0.6118%" height="15" fill="rgb(252,84,19)" fg:x="3748" fg:w="27"/><text x="85.0509%" y="463.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (2 samples, 0.05%)</title><rect x="85.5427%" y="421" width="0.0453%" height="15" fill="rgb(243,152,39)" fg:x="3775" fg:w="2"/><text x="85.6627%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (2 samples, 0.05%)</title><rect x="85.5427%" y="405" width="0.0453%" height="15" fill="rgb(234,160,15)" fg:x="3775" fg:w="2"/><text x="85.6627%" y="415.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (2 samples, 0.05%)</title><rect x="85.5427%" y="389" width="0.0453%" height="15" fill="rgb(237,34,20)" fg:x="3775" fg:w="2"/><text x="85.6627%" y="399.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="85.5427%" y="373" width="0.0453%" height="15" fill="rgb(229,97,13)" fg:x="3775" fg:w="2"/><text x="85.6627%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="85.5427%" y="357" width="0.0453%" height="15" fill="rgb(234,71,50)" fg:x="3775" fg:w="2"/><text x="85.6627%" y="367.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.05%)</title><rect x="85.5427%" y="341" width="0.0453%" height="15" fill="rgb(253,155,4)" fg:x="3775" fg:w="2"/><text x="85.6627%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::CURRENT::FOO::__getit (2 samples, 0.05%)</title><rect x="85.5427%" y="325" width="0.0453%" height="15" fill="rgb(222,185,37)" fg:x="3775" fg:w="2"/><text x="85.6627%" y="335.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (35 samples, 0.79%)</title><rect x="84.9309%" y="501" width="0.7931%" height="15" fill="rgb(251,177,13)" fg:x="3748" fg:w="35"/><text x="85.0509%" y="511.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (8 samples, 0.18%)</title><rect x="85.5427%" y="485" width="0.1813%" height="15" fill="rgb(250,179,40)" fg:x="3775" fg:w="8"/><text x="85.6627%" y="495.50"></text></g><g><title>core::task::wake::Waker::wake (8 samples, 0.18%)</title><rect x="85.5427%" y="469" width="0.1813%" height="15" fill="rgb(242,44,2)" fg:x="3775" fg:w="8"/><text x="85.6627%" y="479.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (8 samples, 0.18%)</title><rect x="85.5427%" y="453" width="0.1813%" height="15" fill="rgb(216,177,13)" fg:x="3775" fg:w="8"/><text x="85.6627%" y="463.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (8 samples, 0.18%)</title><rect x="85.5427%" y="437" width="0.1813%" height="15" fill="rgb(216,106,43)" fg:x="3775" fg:w="8"/><text x="85.6627%" y="447.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (6 samples, 0.14%)</title><rect x="85.5880%" y="421" width="0.1360%" height="15" fill="rgb(216,183,2)" fg:x="3777" fg:w="6"/><text x="85.7080%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (6 samples, 0.14%)</title><rect x="85.5880%" y="405" width="0.1360%" height="15" fill="rgb(249,75,3)" fg:x="3777" fg:w="6"/><text x="85.7080%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (6 samples, 0.14%)</title><rect x="85.5880%" y="389" width="0.1360%" height="15" fill="rgb(219,67,39)" fg:x="3777" fg:w="6"/><text x="85.7080%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (6 samples, 0.14%)</title><rect x="85.5880%" y="373" width="0.1360%" height="15" fill="rgb(253,228,2)" fg:x="3777" fg:w="6"/><text x="85.7080%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mutex::MutexGuard&lt;alloc::collections::vec_deque::VecDeque&lt;dads_gzip_thing::Line&gt;&gt;&gt; (54 samples, 1.22%)</title><rect x="84.9309%" y="533" width="1.2237%" height="15" fill="rgb(235,138,27)" fg:x="3748" fg:w="54"/><text x="85.0509%" y="543.50">co..</text></g><g><title>&lt;tokio::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 1.22%)</title><rect x="84.9309%" y="517" width="1.2237%" height="15" fill="rgb(236,97,51)" fg:x="3748" fg:w="54"/><text x="85.0509%" y="527.50">&lt;t..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (19 samples, 0.43%)</title><rect x="85.7240%" y="501" width="0.4305%" height="15" fill="rgb(240,80,30)" fg:x="3783" fg:w="19"/><text x="85.8440%" y="511.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (10 samples, 0.23%)</title><rect x="85.9279%" y="485" width="0.2266%" height="15" fill="rgb(230,178,19)" fg:x="3792" fg:w="10"/><text x="86.0479%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (10 samples, 0.23%)</title><rect x="85.9279%" y="469" width="0.2266%" height="15" fill="rgb(210,190,27)" fg:x="3792" fg:w="10"/><text x="86.0479%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (10 samples, 0.23%)</title><rect x="85.9279%" y="453" width="0.2266%" height="15" fill="rgb(222,107,31)" fg:x="3792" fg:w="10"/><text x="86.0479%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (10 samples, 0.23%)</title><rect x="85.9279%" y="437" width="0.2266%" height="15" fill="rgb(216,127,34)" fg:x="3792" fg:w="10"/><text x="86.0479%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (10 samples, 0.23%)</title><rect x="85.9279%" y="421" width="0.2266%" height="15" fill="rgb(234,116,52)" fg:x="3792" fg:w="10"/><text x="86.0479%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (10 samples, 0.23%)</title><rect x="85.9279%" y="405" width="0.2266%" height="15" fill="rgb(222,124,15)" fg:x="3792" fg:w="10"/><text x="86.0479%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="86.1772%" y="421" width="0.0227%" height="15" fill="rgb(231,179,28)" fg:x="3803" fg:w="1"/><text x="86.2972%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="86.1772%" y="405" width="0.0227%" height="15" fill="rgb(226,93,45)" fg:x="3803" fg:w="1"/><text x="86.2972%" y="415.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.02%)</title><rect x="86.1772%" y="389" width="0.0227%" height="15" fill="rgb(215,8,51)" fg:x="3803" fg:w="1"/><text x="86.2972%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="86.1772%" y="373" width="0.0227%" height="15" fill="rgb(223,106,5)" fg:x="3803" fg:w="1"/><text x="86.2972%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="86.1772%" y="357" width="0.0227%" height="15" fill="rgb(250,191,5)" fg:x="3803" fg:w="1"/><text x="86.2972%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.02%)</title><rect x="86.1772%" y="341" width="0.0227%" height="15" fill="rgb(242,132,44)" fg:x="3803" fg:w="1"/><text x="86.2972%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="86.1772%" y="325" width="0.0227%" height="15" fill="rgb(251,152,29)" fg:x="3803" fg:w="1"/><text x="86.2972%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="86.1772%" y="309" width="0.0227%" height="15" fill="rgb(218,179,5)" fg:x="3803" fg:w="1"/><text x="86.2972%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (1 samples, 0.02%)</title><rect x="86.1999%" y="405" width="0.0227%" height="15" fill="rgb(227,67,19)" fg:x="3804" fg:w="1"/><text x="86.3199%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (1 samples, 0.02%)</title><rect x="86.1999%" y="389" width="0.0227%" height="15" fill="rgb(233,119,31)" fg:x="3804" fg:w="1"/><text x="86.3199%" y="399.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.02%)</title><rect x="86.1999%" y="373" width="0.0227%" height="15" fill="rgb(241,120,22)" fg:x="3804" fg:w="1"/><text x="86.3199%" y="383.50"></text></g><g><title>chrono::format::write_hundreds (2 samples, 0.05%)</title><rect x="86.2225%" y="405" width="0.0453%" height="15" fill="rgb(224,102,30)" fg:x="3805" fg:w="2"/><text x="86.3425%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (2 samples, 0.05%)</title><rect x="86.2225%" y="389" width="0.0453%" height="15" fill="rgb(210,164,37)" fg:x="3805" fg:w="2"/><text x="86.3425%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (2 samples, 0.05%)</title><rect x="86.2225%" y="373" width="0.0453%" height="15" fill="rgb(226,191,16)" fg:x="3805" fg:w="2"/><text x="86.3425%" y="383.50"></text></g><g><title>alloc::string::String::push (2 samples, 0.05%)</title><rect x="86.2225%" y="357" width="0.0453%" height="15" fill="rgb(214,40,45)" fg:x="3805" fg:w="2"/><text x="86.3425%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="86.2452%" y="341" width="0.0227%" height="15" fill="rgb(244,29,26)" fg:x="3806" fg:w="1"/><text x="86.3652%" y="351.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="86.2452%" y="325" width="0.0227%" height="15" fill="rgb(216,16,5)" fg:x="3806" fg:w="1"/><text x="86.3652%" y="335.50"></text></g><g><title>chrono::naive::date::NaiveDate::mdf (1 samples, 0.02%)</title><rect x="86.2678%" y="405" width="0.0227%" height="15" fill="rgb(249,76,35)" fg:x="3807" fg:w="1"/><text x="86.3878%" y="415.50"></text></g><g><title>chrono::naive::internals::Of::to_mdf (1 samples, 0.02%)</title><rect x="86.2678%" y="389" width="0.0227%" height="15" fill="rgb(207,11,44)" fg:x="3807" fg:w="1"/><text x="86.3878%" y="399.50"></text></g><g><title>chrono::naive::internals::Mdf::from_of (1 samples, 0.02%)</title><rect x="86.2678%" y="373" width="0.0227%" height="15" fill="rgb(228,190,49)" fg:x="3807" fg:w="1"/><text x="86.3878%" y="383.50"></text></g><g><title>&lt;chrono::naive::date::NaiveDate as core::fmt::Debug&gt;::fmt (5 samples, 0.11%)</title><rect x="86.1999%" y="421" width="0.1133%" height="15" fill="rgb(214,173,12)" fg:x="3804" fg:w="5"/><text x="86.3199%" y="431.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (1 samples, 0.02%)</title><rect x="86.2905%" y="405" width="0.0227%" height="15" fill="rgb(218,26,35)" fg:x="3808" fg:w="1"/><text x="86.4105%" y="415.50"></text></g><g><title>core::ops::range::RangeBounds::contains (1 samples, 0.02%)</title><rect x="86.2905%" y="389" width="0.0227%" height="15" fill="rgb(220,200,19)" fg:x="3808" fg:w="1"/><text x="86.4105%" y="399.50"></text></g><g><title>alloc::fmt::format (9 samples, 0.20%)</title><rect x="86.1545%" y="517" width="0.2039%" height="15" fill="rgb(239,95,49)" fg:x="3802" fg:w="9"/><text x="86.2745%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (9 samples, 0.20%)</title><rect x="86.1545%" y="501" width="0.2039%" height="15" fill="rgb(235,85,53)" fg:x="3802" fg:w="9"/><text x="86.2745%" y="511.50"></text></g><g><title>alloc::fmt::format::{{closure}} (9 samples, 0.20%)</title><rect x="86.1545%" y="485" width="0.2039%" height="15" fill="rgb(233,133,31)" fg:x="3802" fg:w="9"/><text x="86.2745%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (9 samples, 0.20%)</title><rect x="86.1545%" y="469" width="0.2039%" height="15" fill="rgb(218,25,20)" fg:x="3802" fg:w="9"/><text x="86.2745%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (9 samples, 0.20%)</title><rect x="86.1545%" y="453" width="0.2039%" height="15" fill="rgb(252,210,38)" fg:x="3802" fg:w="9"/><text x="86.2745%" y="463.50"></text></g><g><title>core::fmt::write (9 samples, 0.20%)</title><rect x="86.1545%" y="437" width="0.2039%" height="15" fill="rgb(242,134,21)" fg:x="3802" fg:w="9"/><text x="86.2745%" y="447.50"></text></g><g><title>core::fmt::Formatter::pad (2 samples, 0.05%)</title><rect x="86.3132%" y="421" width="0.0453%" height="15" fill="rgb(213,28,48)" fg:x="3809" fg:w="2"/><text x="86.4332%" y="431.50"></text></g><g><title>&lt;dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::LineInfo&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (4 samples, 0.09%)</title><rect x="86.4718%" y="341" width="0.0906%" height="15" fill="rgb(250,196,2)" fg:x="3816" fg:w="4"/><text x="86.5918%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (4 samples, 0.09%)</title><rect x="86.4718%" y="325" width="0.0906%" height="15" fill="rgb(227,5,17)" fg:x="3816" fg:w="4"/><text x="86.5918%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.09%)</title><rect x="86.4718%" y="309" width="0.0906%" height="15" fill="rgb(221,226,24)" fg:x="3816" fg:w="4"/><text x="86.5918%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4 samples, 0.09%)</title><rect x="86.4718%" y="293" width="0.0906%" height="15" fill="rgb(211,5,48)" fg:x="3816" fg:w="4"/><text x="86.5918%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4 samples, 0.09%)</title><rect x="86.4718%" y="277" width="0.0906%" height="15" fill="rgb(219,150,6)" fg:x="3816" fg:w="4"/><text x="86.5918%" y="287.50"></text></g><g><title>serde::de::MapAccess::next_key (19 samples, 0.43%)</title><rect x="86.4718%" y="437" width="0.4305%" height="15" fill="rgb(251,46,16)" fg:x="3816" fg:w="19"/><text x="86.5918%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (19 samples, 0.43%)</title><rect x="86.4718%" y="421" width="0.4305%" height="15" fill="rgb(220,204,40)" fg:x="3816" fg:w="19"/><text x="86.5918%" y="431.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (19 samples, 0.43%)</title><rect x="86.4718%" y="405" width="0.4305%" height="15" fill="rgb(211,85,2)" fg:x="3816" fg:w="19"/><text x="86.5918%" y="415.50"></text></g><g><title>&lt;dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::LineInfo&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (19 samples, 0.43%)</title><rect x="86.4718%" y="389" width="0.4305%" height="15" fill="rgb(229,17,7)" fg:x="3816" fg:w="19"/><text x="86.5918%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (19 samples, 0.43%)</title><rect x="86.4718%" y="373" width="0.4305%" height="15" fill="rgb(239,72,28)" fg:x="3816" fg:w="19"/><text x="86.5918%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19 samples, 0.43%)</title><rect x="86.4718%" y="357" width="0.4305%" height="15" fill="rgb(230,47,54)" fg:x="3816" fg:w="19"/><text x="86.5918%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (15 samples, 0.34%)</title><rect x="86.5624%" y="341" width="0.3399%" height="15" fill="rgb(214,50,8)" fg:x="3820" fg:w="15"/><text x="86.6824%" y="351.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (14 samples, 0.32%)</title><rect x="86.5851%" y="325" width="0.3172%" height="15" fill="rgb(216,198,43)" fg:x="3821" fg:w="14"/><text x="86.7051%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (4 samples, 0.09%)</title><rect x="86.8117%" y="309" width="0.0906%" height="15" fill="rgb(234,20,35)" fg:x="3831" fg:w="4"/><text x="86.9317%" y="319.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.07%)</title><rect x="86.9023%" y="325" width="0.0680%" height="15" fill="rgb(254,45,19)" fg:x="3835" fg:w="3"/><text x="87.0223%" y="335.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (2 samples, 0.05%)</title><rect x="86.9250%" y="309" width="0.0453%" height="15" fill="rgb(219,14,44)" fg:x="3836" fg:w="2"/><text x="87.0450%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (1 samples, 0.02%)</title><rect x="86.9477%" y="293" width="0.0227%" height="15" fill="rgb(217,220,26)" fg:x="3837" fg:w="1"/><text x="87.0677%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.02%)</title><rect x="86.9703%" y="261" width="0.0227%" height="15" fill="rgb(213,158,28)" fg:x="3838" fg:w="1"/><text x="87.0903%" y="271.50"></text></g><g><title>chrono::format::parsed::Parsed::set_hour (1 samples, 0.02%)</title><rect x="86.9930%" y="261" width="0.0227%" height="15" fill="rgb(252,51,52)" fg:x="3839" fg:w="1"/><text x="87.1130%" y="271.50"></text></g><g><title>chrono::format::parsed::Parsed::set_second (1 samples, 0.02%)</title><rect x="87.0156%" y="261" width="0.0227%" height="15" fill="rgb(246,89,16)" fg:x="3840" fg:w="1"/><text x="87.1356%" y="271.50"></text></g><g><title>chrono::format::parsed::set_if_consistent (1 samples, 0.02%)</title><rect x="87.0156%" y="245" width="0.0227%" height="15" fill="rgb(216,158,49)" fg:x="3840" fg:w="1"/><text x="87.1356%" y="255.50"></text></g><g><title>chrono::format::parse::parse (4 samples, 0.09%)</title><rect x="86.9703%" y="309" width="0.0906%" height="15" fill="rgb(236,107,19)" fg:x="3838" fg:w="4"/><text x="87.0903%" y="319.50"></text></g><g><title>chrono::format::parse::parse_internal (4 samples, 0.09%)</title><rect x="86.9703%" y="293" width="0.0906%" height="15" fill="rgb(228,185,30)" fg:x="3838" fg:w="4"/><text x="87.0903%" y="303.50"></text></g><g><title>chrono::format::parse::parse_rfc3339 (4 samples, 0.09%)</title><rect x="86.9703%" y="277" width="0.0906%" height="15" fill="rgb(246,134,8)" fg:x="3838" fg:w="4"/><text x="87.0903%" y="287.50"></text></g><g><title>chrono::format::scan::number (1 samples, 0.02%)</title><rect x="87.0383%" y="261" width="0.0227%" height="15" fill="rgb(214,143,50)" fg:x="3841" fg:w="1"/><text x="87.1583%" y="271.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (1 samples, 0.02%)</title><rect x="87.0383%" y="245" width="0.0227%" height="15" fill="rgb(228,75,8)" fg:x="3841" fg:w="1"/><text x="87.1583%" y="255.50"></text></g><g><title>core::ops::range::RangeBounds::contains (1 samples, 0.02%)</title><rect x="87.0383%" y="229" width="0.0227%" height="15" fill="rgb(207,175,4)" fg:x="3841" fg:w="1"/><text x="87.1583%" y="239.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date::{{closure}} (1 samples, 0.02%)</title><rect x="87.0836%" y="261" width="0.0227%" height="15" fill="rgb(205,108,24)" fg:x="3843" fg:w="1"/><text x="87.2036%" y="271.50"></text></g><g><title>&lt;chrono::naive::date::NaiveDate as chrono::traits::Datelike&gt;::iso_week (1 samples, 0.02%)</title><rect x="87.0836%" y="245" width="0.0227%" height="15" fill="rgb(244,120,49)" fg:x="3843" fg:w="1"/><text x="87.2036%" y="255.50"></text></g><g><title>chrono::naive::isoweek::iso_week_from_yof (1 samples, 0.02%)</title><rect x="87.0836%" y="229" width="0.0227%" height="15" fill="rgb(223,47,38)" fg:x="3843" fg:w="1"/><text x="87.2036%" y="239.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_datetime_with_offset (4 samples, 0.09%)</title><rect x="87.0836%" y="293" width="0.0906%" height="15" fill="rgb(229,179,11)" fg:x="3843" fg:w="4"/><text x="87.2036%" y="303.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_date (4 samples, 0.09%)</title><rect x="87.0836%" y="277" width="0.0906%" height="15" fill="rgb(231,122,1)" fg:x="3843" fg:w="4"/><text x="87.2036%" y="287.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (3 samples, 0.07%)</title><rect x="87.1063%" y="261" width="0.0680%" height="15" fill="rgb(245,119,9)" fg:x="3844" fg:w="3"/><text x="87.2263%" y="271.50"></text></g><g><title>chrono::naive::internals::YearFlags::from_year (3 samples, 0.07%)</title><rect x="87.1063%" y="245" width="0.0680%" height="15" fill="rgb(241,163,25)" fg:x="3844" fg:w="3"/><text x="87.2263%" y="255.50"></text></g><g><title>num_integer::mod_floor (3 samples, 0.07%)</title><rect x="87.1063%" y="229" width="0.0680%" height="15" fill="rgb(217,214,3)" fg:x="3844" fg:w="3"/><text x="87.2263%" y="239.50"></text></g><g><title>&lt;i32 as num_integer::Integer&gt;::mod_floor (3 samples, 0.07%)</title><rect x="87.1063%" y="213" width="0.0680%" height="15" fill="rgb(240,86,28)" fg:x="3844" fg:w="3"/><text x="87.2263%" y="223.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_of (1 samples, 0.02%)</title><rect x="87.1743%" y="261" width="0.0227%" height="15" fill="rgb(215,47,9)" fg:x="3847" fg:w="1"/><text x="87.2943%" y="271.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (1 samples, 0.02%)</title><rect x="87.1743%" y="245" width="0.0227%" height="15" fill="rgb(252,25,45)" fg:x="3847" fg:w="1"/><text x="87.2943%" y="255.50"></text></g><g><title>core::ops::range::RangeBounds::contains (1 samples, 0.02%)</title><rect x="87.1743%" y="229" width="0.0227%" height="15" fill="rgb(251,164,9)" fg:x="3847" fg:w="1"/><text x="87.2943%" y="239.50"></text></g><g><title>chrono::naive::internals::cycle_to_yo (1 samples, 0.02%)</title><rect x="87.1969%" y="261" width="0.0227%" height="15" fill="rgb(233,194,0)" fg:x="3848" fg:w="1"/><text x="87.3169%" y="271.50"></text></g><g><title>chrono::naive::date::NaiveDate::checked_sub_signed (3 samples, 0.07%)</title><rect x="87.1743%" y="277" width="0.0680%" height="15" fill="rgb(249,111,24)" fg:x="3847" fg:w="3"/><text x="87.2943%" y="287.50"></text></g><g><title>time::duration::Duration::num_days (1 samples, 0.02%)</title><rect x="87.2196%" y="261" width="0.0227%" height="15" fill="rgb(250,223,3)" fg:x="3849" fg:w="1"/><text x="87.3396%" y="271.50"></text></g><g><title>&lt;&lt;dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::LineInfo&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map::__DeserializeWith as serde::de::Deserialize&gt;::deserialize (16 samples, 0.36%)</title><rect x="86.9023%" y="389" width="0.3626%" height="15" fill="rgb(236,178,37)" fg:x="3835" fg:w="16"/><text x="87.0223%" y="399.50"></text></g><g><title>dads_gzip_thing::parse_timestamp (16 samples, 0.36%)</title><rect x="86.9023%" y="373" width="0.3626%" height="15" fill="rgb(241,158,50)" fg:x="3835" fg:w="16"/><text x="87.0223%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (16 samples, 0.36%)</title><rect x="86.9023%" y="357" width="0.3626%" height="15" fill="rgb(213,121,41)" fg:x="3835" fg:w="16"/><text x="87.0223%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (16 samples, 0.36%)</title><rect x="86.9023%" y="341" width="0.3626%" height="15" fill="rgb(240,92,3)" fg:x="3835" fg:w="16"/><text x="87.0223%" y="351.50"></text></g><g><title>chrono::datetime::DateTime&lt;chrono::offset::fixed::FixedOffset&gt;::parse_from_rfc3339 (13 samples, 0.29%)</title><rect x="86.9703%" y="325" width="0.2946%" height="15" fill="rgb(205,123,3)" fg:x="3838" fg:w="13"/><text x="87.0903%" y="335.50"></text></g><g><title>chrono::format::parsed::Parsed::to_datetime (9 samples, 0.20%)</title><rect x="87.0610%" y="309" width="0.2039%" height="15" fill="rgb(205,97,47)" fg:x="3842" fg:w="9"/><text x="87.1810%" y="319.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_signed (4 samples, 0.09%)</title><rect x="87.1743%" y="293" width="0.0906%" height="15" fill="rgb(247,152,14)" fg:x="3847" fg:w="4"/><text x="87.2943%" y="303.50"></text></g><g><title>chrono::naive::time::NaiveTime::overflowing_sub_signed (1 samples, 0.02%)</title><rect x="87.2422%" y="277" width="0.0227%" height="15" fill="rgb(248,195,53)" fg:x="3850" fg:w="1"/><text x="87.3622%" y="287.50"></text></g><g><title>chrono::naive::time::NaiveTime::overflowing_add_signed (1 samples, 0.02%)</title><rect x="87.2422%" y="261" width="0.0227%" height="15" fill="rgb(226,201,16)" fg:x="3850" fg:w="1"/><text x="87.3622%" y="271.50"></text></g><g><title>&lt;time::duration::Duration as core::ops::arith::Sub&gt;::sub (1 samples, 0.02%)</title><rect x="87.2422%" y="245" width="0.0227%" height="15" fill="rgb(205,98,0)" fg:x="3850" fg:w="1"/><text x="87.3622%" y="255.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (119 samples, 2.70%)</title><rect x="87.6501%" y="341" width="2.6966%" height="15" fill="rgb(214,191,48)" fg:x="3868" fg:w="119"/><text x="87.7701%" y="351.50">&lt;serde_..</text></g><g><title>serde_json::read::ignore_escape (1 samples, 0.02%)</title><rect x="90.3240%" y="325" width="0.0227%" height="15" fill="rgb(237,112,39)" fg:x="3986" fg:w="1"/><text x="90.4440%" y="335.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::decode_hex_escape (1 samples, 0.02%)</title><rect x="90.3240%" y="309" width="0.0227%" height="15" fill="rgb(247,203,27)" fg:x="3986" fg:w="1"/><text x="90.4440%" y="319.50"></text></g><g><title>serde_json::read::decode_hex_val (1 samples, 0.02%)</title><rect x="90.3240%" y="293" width="0.0227%" height="15" fill="rgb(235,124,28)" fg:x="3986" fg:w="1"/><text x="90.4440%" y="303.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::ignore_integer (4 samples, 0.09%)</title><rect x="90.3467%" y="341" width="0.0906%" height="15" fill="rgb(208,207,46)" fg:x="3987" fg:w="4"/><text x="90.4667%" y="351.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (2 samples, 0.05%)</title><rect x="90.3920%" y="325" width="0.0453%" height="15" fill="rgb(234,176,4)" fg:x="3989" fg:w="2"/><text x="90.5120%" y="335.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (2 samples, 0.05%)</title><rect x="90.3920%" y="309" width="0.0453%" height="15" fill="rgb(230,133,28)" fg:x="3989" fg:w="2"/><text x="90.5120%" y="319.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (2 samples, 0.05%)</title><rect x="90.3920%" y="293" width="0.0453%" height="15" fill="rgb(211,137,40)" fg:x="3989" fg:w="2"/><text x="90.5120%" y="303.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (2 samples, 0.05%)</title><rect x="90.3920%" y="277" width="0.0453%" height="15" fill="rgb(254,35,13)" fg:x="3989" fg:w="2"/><text x="90.5120%" y="287.50"></text></g><g><title>&lt;serde::de::ignored_any::IgnoredAny as serde::de::Deserialize&gt;::deserialize (166 samples, 3.76%)</title><rect x="87.2649%" y="389" width="3.7616%" height="15" fill="rgb(225,49,51)" fg:x="3851" fg:w="166"/><text x="87.3849%" y="399.50">&lt;serde::de:..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_ignored_any (166 samples, 3.76%)</title><rect x="87.2649%" y="373" width="3.7616%" height="15" fill="rgb(251,10,15)" fg:x="3851" fg:w="166"/><text x="87.3849%" y="383.50">&lt;&amp;mut serde..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::ignore_value (166 samples, 3.76%)</title><rect x="87.2649%" y="357" width="3.7616%" height="15" fill="rgb(228,207,15)" fg:x="3851" fg:w="166"/><text x="87.3849%" y="367.50">serde_json:..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (26 samples, 0.59%)</title><rect x="90.4373%" y="341" width="0.5892%" height="15" fill="rgb(241,99,19)" fg:x="3991" fg:w="26"/><text x="90.5573%" y="351.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (5 samples, 0.11%)</title><rect x="90.9132%" y="325" width="0.1133%" height="15" fill="rgb(207,104,49)" fg:x="4012" fg:w="5"/><text x="91.0332%" y="335.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (5 samples, 0.11%)</title><rect x="90.9132%" y="309" width="0.1133%" height="15" fill="rgb(234,99,18)" fg:x="4012" fg:w="5"/><text x="91.0332%" y="319.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (5 samples, 0.11%)</title><rect x="90.9132%" y="293" width="0.1133%" height="15" fill="rgb(213,191,49)" fg:x="4012" fg:w="5"/><text x="91.0332%" y="303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (7 samples, 0.16%)</title><rect x="91.1398%" y="245" width="0.1586%" height="15" fill="rgb(210,226,19)" fg:x="4022" fg:w="7"/><text x="91.2598%" y="255.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (5 samples, 0.11%)</title><rect x="91.1851%" y="229" width="0.1133%" height="15" fill="rgb(229,97,18)" fg:x="4024" fg:w="5"/><text x="91.3051%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.02%)</title><rect x="91.2758%" y="213" width="0.0227%" height="15" fill="rgb(211,167,15)" fg:x="4028" fg:w="1"/><text x="91.3958%" y="223.50"></text></g><g><title>serde::de::MapAccess::next_key (9 samples, 0.20%)</title><rect x="91.1172%" y="341" width="0.2039%" height="15" fill="rgb(210,169,34)" fg:x="4021" fg:w="9"/><text x="91.2372%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (9 samples, 0.20%)</title><rect x="91.1172%" y="325" width="0.2039%" height="15" fill="rgb(241,121,31)" fg:x="4021" fg:w="9"/><text x="91.2372%" y="335.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.20%)</title><rect x="91.1172%" y="309" width="0.2039%" height="15" fill="rgb(232,40,11)" fg:x="4021" fg:w="9"/><text x="91.2372%" y="319.50"></text></g><g><title>&lt;dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::Meta&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (9 samples, 0.20%)</title><rect x="91.1172%" y="293" width="0.2039%" height="15" fill="rgb(205,86,26)" fg:x="4021" fg:w="9"/><text x="91.2372%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (9 samples, 0.20%)</title><rect x="91.1172%" y="277" width="0.2039%" height="15" fill="rgb(231,126,28)" fg:x="4021" fg:w="9"/><text x="91.2372%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.20%)</title><rect x="91.1172%" y="261" width="0.2039%" height="15" fill="rgb(219,221,18)" fg:x="4021" fg:w="9"/><text x="91.2372%" y="271.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::eat_char (1 samples, 0.02%)</title><rect x="91.2984%" y="245" width="0.0227%" height="15" fill="rgb(211,40,0)" fg:x="4029" fg:w="1"/><text x="91.4184%" y="255.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::discard (1 samples, 0.02%)</title><rect x="91.2984%" y="229" width="0.0227%" height="15" fill="rgb(239,85,43)" fg:x="4029" fg:w="1"/><text x="91.4184%" y="239.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::discard (1 samples, 0.02%)</title><rect x="91.2984%" y="213" width="0.0227%" height="15" fill="rgb(231,55,21)" fg:x="4029" fg:w="1"/><text x="91.4184%" y="223.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (14 samples, 0.32%)</title><rect x="91.3891%" y="245" width="0.3172%" height="15" fill="rgb(225,184,43)" fg:x="4033" fg:w="14"/><text x="91.5091%" y="255.50"></text></g><g><title>&lt;serde::de::ignored_any::IgnoredAny as serde::de::Deserialize&gt;::deserialize (20 samples, 0.45%)</title><rect x="91.3664%" y="293" width="0.4532%" height="15" fill="rgb(251,158,41)" fg:x="4032" fg:w="20"/><text x="91.4864%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_ignored_any (20 samples, 0.45%)</title><rect x="91.3664%" y="277" width="0.4532%" height="15" fill="rgb(234,159,37)" fg:x="4032" fg:w="20"/><text x="91.4864%" y="287.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::ignore_value (20 samples, 0.45%)</title><rect x="91.3664%" y="261" width="0.4532%" height="15" fill="rgb(216,204,22)" fg:x="4032" fg:w="20"/><text x="91.4864%" y="271.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::ignore_integer (5 samples, 0.11%)</title><rect x="91.7063%" y="245" width="0.1133%" height="15" fill="rgb(214,17,3)" fg:x="4047" fg:w="5"/><text x="91.8263%" y="255.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (1 samples, 0.02%)</title><rect x="91.7970%" y="229" width="0.0227%" height="15" fill="rgb(212,111,17)" fg:x="4051" fg:w="1"/><text x="91.9170%" y="239.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.02%)</title><rect x="91.7970%" y="213" width="0.0227%" height="15" fill="rgb(221,157,24)" fg:x="4051" fg:w="1"/><text x="91.9170%" y="223.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (1 samples, 0.02%)</title><rect x="91.7970%" y="197" width="0.0227%" height="15" fill="rgb(252,16,13)" fg:x="4051" fg:w="1"/><text x="91.9170%" y="207.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.02%)</title><rect x="91.7970%" y="181" width="0.0227%" height="15" fill="rgb(221,62,2)" fg:x="4051" fg:w="1"/><text x="91.9170%" y="191.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.02%)</title><rect x="91.8196%" y="245" width="0.0227%" height="15" fill="rgb(247,87,22)" fg:x="4052" fg:w="1"/><text x="91.9396%" y="255.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.02%)</title><rect x="91.8196%" y="229" width="0.0227%" height="15" fill="rgb(215,73,9)" fg:x="4052" fg:w="1"/><text x="91.9396%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.02%)</title><rect x="91.8196%" y="213" width="0.0227%" height="15" fill="rgb(207,175,33)" fg:x="4052" fg:w="1"/><text x="91.9396%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.02%)</title><rect x="91.8196%" y="197" width="0.0227%" height="15" fill="rgb(243,129,54)" fg:x="4052" fg:w="1"/><text x="91.9396%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="91.8196%" y="181" width="0.0227%" height="15" fill="rgb(227,119,45)" fg:x="4052" fg:w="1"/><text x="91.9396%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="91.8196%" y="165" width="0.0227%" height="15" fill="rgb(205,109,36)" fg:x="4052" fg:w="1"/><text x="91.9396%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="91.8196%" y="149" width="0.0227%" height="15" fill="rgb(205,6,39)" fg:x="4052" fg:w="1"/><text x="91.9396%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.02%)</title><rect x="91.8196%" y="133" width="0.0227%" height="15" fill="rgb(221,32,16)" fg:x="4052" fg:w="1"/><text x="91.9396%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="91.8196%" y="117" width="0.0227%" height="15" fill="rgb(228,144,50)" fg:x="4052" fg:w="1"/><text x="91.9396%" y="127.50"></text></g><g><title>&lt;dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::LineInfo&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (238 samples, 5.39%)</title><rect x="86.4718%" y="453" width="5.3932%" height="15" fill="rgb(229,201,53)" fg:x="3816" fg:w="238"/><text x="86.5918%" y="463.50">&lt;dads_gzip_thing:..</text></g><g><title>serde::de::MapAccess::next_value (219 samples, 4.96%)</title><rect x="86.9023%" y="437" width="4.9626%" height="15" fill="rgb(249,153,27)" fg:x="3835" fg:w="219"/><text x="87.0223%" y="447.50">serde::de::MapA..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (219 samples, 4.96%)</title><rect x="86.9023%" y="421" width="4.9626%" height="15" fill="rgb(227,106,25)" fg:x="3835" fg:w="219"/><text x="87.0223%" y="431.50">&lt;serde_json::de..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (219 samples, 4.96%)</title><rect x="86.9023%" y="405" width="4.9626%" height="15" fill="rgb(230,65,29)" fg:x="3835" fg:w="219"/><text x="87.0223%" y="415.50">&lt;core::marker::..</text></g><g><title>dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::Meta&gt;::deserialize (37 samples, 0.84%)</title><rect x="91.0265%" y="389" width="0.8384%" height="15" fill="rgb(221,57,46)" fg:x="4017" fg:w="37"/><text x="91.1465%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (37 samples, 0.84%)</title><rect x="91.0265%" y="373" width="0.8384%" height="15" fill="rgb(229,161,17)" fg:x="4017" fg:w="37"/><text x="91.1465%" y="383.50"></text></g><g><title>&lt;dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::Meta&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (33 samples, 0.75%)</title><rect x="91.1172%" y="357" width="0.7478%" height="15" fill="rgb(222,213,11)" fg:x="4021" fg:w="33"/><text x="91.2372%" y="367.50"></text></g><g><title>serde::de::MapAccess::next_value (24 samples, 0.54%)</title><rect x="91.3211%" y="341" width="0.5438%" height="15" fill="rgb(235,35,13)" fg:x="4030" fg:w="24"/><text x="91.4411%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (24 samples, 0.54%)</title><rect x="91.3211%" y="325" width="0.5438%" height="15" fill="rgb(233,158,34)" fg:x="4030" fg:w="24"/><text x="91.4411%" y="335.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (22 samples, 0.50%)</title><rect x="91.3664%" y="309" width="0.4985%" height="15" fill="rgb(215,151,48)" fg:x="4032" fg:w="22"/><text x="91.4864%" y="319.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (2 samples, 0.05%)</title><rect x="91.8196%" y="293" width="0.0453%" height="15" fill="rgb(229,84,14)" fg:x="4052" fg:w="2"/><text x="91.9396%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (2 samples, 0.05%)</title><rect x="91.8196%" y="277" width="0.0453%" height="15" fill="rgb(229,68,14)" fg:x="4052" fg:w="2"/><text x="91.9396%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (2 samples, 0.05%)</title><rect x="91.8196%" y="261" width="0.0453%" height="15" fill="rgb(243,106,26)" fg:x="4052" fg:w="2"/><text x="91.9396%" y="271.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect x="91.8423%" y="245" width="0.0227%" height="15" fill="rgb(206,45,38)" fg:x="4053" fg:w="1"/><text x="91.9623%" y="255.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (1 samples, 0.02%)</title><rect x="91.8423%" y="229" width="0.0227%" height="15" fill="rgb(226,6,15)" fg:x="4053" fg:w="1"/><text x="91.9623%" y="239.50"></text></g><g><title>dads_gzip_thing::get_key (253 samples, 5.73%)</title><rect x="86.1545%" y="533" width="5.7331%" height="15" fill="rgb(232,22,54)" fg:x="3802" fg:w="253"/><text x="86.2745%" y="543.50">dads_gzip_thing::g..</text></g><g><title>serde_json::de::from_str (244 samples, 5.53%)</title><rect x="86.3585%" y="517" width="5.5291%" height="15" fill="rgb(229,222,32)" fg:x="3811" fg:w="244"/><text x="86.4785%" y="527.50">serde_json::de::f..</text></g><g><title>serde_json::de::from_trait (244 samples, 5.53%)</title><rect x="86.3585%" y="501" width="5.5291%" height="15" fill="rgb(228,62,29)" fg:x="3811" fg:w="244"/><text x="86.4785%" y="511.50">serde_json::de::f..</text></g><g><title>dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::LineInfo&gt;::deserialize (244 samples, 5.53%)</title><rect x="86.3585%" y="485" width="5.5291%" height="15" fill="rgb(251,103,34)" fg:x="3811" fg:w="244"/><text x="86.4785%" y="495.50">dads_gzip_thing::..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (244 samples, 5.53%)</title><rect x="86.3585%" y="469" width="5.5291%" height="15" fill="rgb(233,12,30)" fg:x="3811" fg:w="244"/><text x="86.4785%" y="479.50">&lt;&amp;mut serde_json:..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.02%)</title><rect x="91.8649%" y="453" width="0.0227%" height="15" fill="rgb(238,52,0)" fg:x="4054" fg:w="1"/><text x="91.9849%" y="463.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.02%)</title><rect x="91.8649%" y="437" width="0.0227%" height="15" fill="rgb(223,98,5)" fg:x="4054" fg:w="1"/><text x="91.9849%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (1 samples, 0.02%)</title><rect x="91.8649%" y="421" width="0.0227%" height="15" fill="rgb(228,75,37)" fg:x="4054" fg:w="1"/><text x="91.9849%" y="431.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.02%)</title><rect x="91.8649%" y="405" width="0.0227%" height="15" fill="rgb(205,115,49)" fg:x="4054" fg:w="1"/><text x="91.9849%" y="415.50"></text></g><g><title>std::path::Path::join (2 samples, 0.05%)</title><rect x="91.8876%" y="517" width="0.0453%" height="15" fill="rgb(250,154,43)" fg:x="4055" fg:w="2"/><text x="92.0076%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.02%)</title><rect x="91.9556%" y="469" width="0.0227%" height="15" fill="rgb(226,43,29)" fg:x="4058" fg:w="1"/><text x="92.0756%" y="479.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect x="91.9556%" y="453" width="0.0227%" height="15" fill="rgb(249,228,39)" fg:x="4058" fg:w="1"/><text x="92.0756%" y="463.50"></text></g><g><title>std::path::rsplit_file_at_dot (1 samples, 0.02%)</title><rect x="91.9556%" y="437" width="0.0227%" height="15" fill="rgb(216,79,43)" fg:x="4058" fg:w="1"/><text x="92.0756%" y="447.50"></text></g><g><title>dads_gzip_thing::output_key_to_path (6 samples, 0.14%)</title><rect x="91.8876%" y="533" width="0.1360%" height="15" fill="rgb(228,95,12)" fg:x="4055" fg:w="6"/><text x="92.0076%" y="543.50"></text></g><g><title>std::path::PathBuf::set_extension (4 samples, 0.09%)</title><rect x="91.9329%" y="517" width="0.0906%" height="15" fill="rgb(249,221,15)" fg:x="4057" fg:w="4"/><text x="92.0529%" y="527.50"></text></g><g><title>std::path::PathBuf::_set_extension (4 samples, 0.09%)</title><rect x="91.9329%" y="501" width="0.0906%" height="15" fill="rgb(233,34,13)" fg:x="4057" fg:w="4"/><text x="92.0529%" y="511.50"></text></g><g><title>std::path::Path::file_stem (3 samples, 0.07%)</title><rect x="91.9556%" y="485" width="0.0680%" height="15" fill="rgb(214,103,39)" fg:x="4058" fg:w="3"/><text x="92.0756%" y="495.50"></text></g><g><title>std::path::Path::file_name (2 samples, 0.05%)</title><rect x="91.9782%" y="469" width="0.0453%" height="15" fill="rgb(251,126,39)" fg:x="4059" fg:w="2"/><text x="92.0982%" y="479.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (2 samples, 0.05%)</title><rect x="91.9782%" y="453" width="0.0453%" height="15" fill="rgb(214,216,36)" fg:x="4059" fg:w="2"/><text x="92.0982%" y="463.50"></text></g><g><title>std::path::Components::parse_next_component_back (1 samples, 0.02%)</title><rect x="92.0009%" y="437" width="0.0227%" height="15" fill="rgb(220,221,8)" fg:x="4060" fg:w="1"/><text x="92.1209%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (1 samples, 0.02%)</title><rect x="92.0009%" y="421" width="0.0227%" height="15" fill="rgb(240,216,3)" fg:x="4060" fg:w="1"/><text x="92.1209%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.02%)</title><rect x="92.0009%" y="405" width="0.0227%" height="15" fill="rgb(232,218,17)" fg:x="4060" fg:w="1"/><text x="92.1209%" y="415.50"></text></g><g><title>core::mem::drop (53 samples, 1.20%)</title><rect x="93.0659%" y="501" width="1.2010%" height="15" fill="rgb(229,163,45)" fg:x="4107" fg:w="53"/><text x="93.1859%" y="511.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;tokio::sync::broadcast::Slot&lt;dads_gzip_thing::TaskBroadcastMessage&gt;&gt;&gt; (53 samples, 1.20%)</title><rect x="93.0659%" y="485" width="1.2010%" height="15" fill="rgb(231,110,42)" fg:x="4107" fg:w="53"/><text x="93.1859%" y="495.50">co..</text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 1.20%)</title><rect x="93.0659%" y="469" width="1.2010%" height="15" fill="rgb(208,170,48)" fg:x="4107" fg:w="53"/><text x="93.1859%" y="479.50">&lt;s..</text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (53 samples, 1.20%)</title><rect x="93.0659%" y="453" width="1.2010%" height="15" fill="rgb(239,116,25)" fg:x="4107" fg:w="53"/><text x="93.1859%" y="463.50">st..</text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (53 samples, 1.20%)</title><rect x="93.0659%" y="437" width="1.2010%" height="15" fill="rgb(219,200,50)" fg:x="4107" fg:w="53"/><text x="93.1859%" y="447.50">st..</text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (53 samples, 1.20%)</title><rect x="93.0659%" y="421" width="1.2010%" height="15" fill="rgb(245,200,0)" fg:x="4107" fg:w="53"/><text x="93.1859%" y="431.50">co..</text></g><g><title>core::sync::atomic::atomic_sub (53 samples, 1.20%)</title><rect x="93.0659%" y="405" width="1.2010%" height="15" fill="rgb(245,119,33)" fg:x="4107" fg:w="53"/><text x="93.1859%" y="415.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::broadcast::Tail&gt;&gt; (69 samples, 1.56%)</title><rect x="94.2669%" y="501" width="1.5636%" height="15" fill="rgb(231,125,12)" fg:x="4160" fg:w="69"/><text x="94.3869%" y="511.50">cor..</text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 1.56%)</title><rect x="94.2669%" y="485" width="1.5636%" height="15" fill="rgb(216,96,41)" fg:x="4160" fg:w="69"/><text x="94.3869%" y="495.50">&lt;st..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (69 samples, 1.56%)</title><rect x="94.2669%" y="469" width="1.5636%" height="15" fill="rgb(248,43,45)" fg:x="4160" fg:w="69"/><text x="94.3869%" y="479.50">std..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (69 samples, 1.56%)</title><rect x="94.2669%" y="453" width="1.5636%" height="15" fill="rgb(217,222,7)" fg:x="4160" fg:w="69"/><text x="94.3869%" y="463.50">std..</text></g><g><title>core::sync::atomic::AtomicU32::swap (69 samples, 1.56%)</title><rect x="94.2669%" y="437" width="1.5636%" height="15" fill="rgb(233,28,6)" fg:x="4160" fg:w="69"/><text x="94.3869%" y="447.50">cor..</text></g><g><title>core::sync::atomic::atomic_swap (69 samples, 1.56%)</title><rect x="94.2669%" y="421" width="1.5636%" height="15" fill="rgb(231,218,15)" fg:x="4160" fg:w="69"/><text x="94.3869%" y="431.50">cor..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (1 samples, 0.02%)</title><rect x="95.8305%" y="501" width="0.0227%" height="15" fill="rgb(226,171,48)" fg:x="4229" fg:w="1"/><text x="95.9505%" y="511.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (1 samples, 0.02%)</title><rect x="95.8305%" y="485" width="0.0227%" height="15" fill="rgb(235,201,9)" fg:x="4229" fg:w="1"/><text x="95.9505%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (1 samples, 0.02%)</title><rect x="95.8305%" y="469" width="0.0227%" height="15" fill="rgb(217,80,15)" fg:x="4229" fg:w="1"/><text x="95.9505%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_contended (1 samples, 0.02%)</title><rect x="95.8305%" y="453" width="0.0227%" height="15" fill="rgb(219,152,8)" fg:x="4229" fg:w="1"/><text x="95.9505%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (1 samples, 0.02%)</title><rect x="95.8305%" y="437" width="0.0227%" height="15" fill="rgb(243,107,38)" fg:x="4229" fg:w="1"/><text x="95.9505%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.02%)</title><rect x="95.8305%" y="421" width="0.0227%" height="15" fill="rgb(231,17,5)" fg:x="4229" fg:w="1"/><text x="95.9505%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (60 samples, 1.36%)</title><rect x="95.8532%" y="437" width="1.3596%" height="15" fill="rgb(209,25,54)" fg:x="4230" fg:w="60"/><text x="95.9732%" y="447.50">co..</text></g><g><title>core::sync::atomic::atomic_compare_exchange (60 samples, 1.36%)</title><rect x="95.8532%" y="421" width="1.3596%" height="15" fill="rgb(219,0,2)" fg:x="4230" fg:w="60"/><text x="95.9732%" y="431.50">co..</text></g><g><title>core::hint::spin_loop (1 samples, 0.02%)</title><rect x="97.2128%" y="405" width="0.0227%" height="15" fill="rgb(246,9,5)" fg:x="4290" fg:w="1"/><text x="97.3328%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.02%)</title><rect x="97.2128%" y="389" width="0.0227%" height="15" fill="rgb(226,159,4)" fg:x="4290" fg:w="1"/><text x="97.3328%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,294 samples, 74.64%)</title><rect x="22.6150%" y="565" width="74.6431%" height="15" fill="rgb(219,175,34)" fg:x="998" fg:w="3294"/><text x="22.7350%" y="575.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>dads_gzip_thing::process_lines::{{closure}} (1,160 samples, 26.29%)</title><rect x="70.9721%" y="549" width="26.2860%" height="15" fill="rgb(236,10,46)" fg:x="3132" fg:w="1160"/><text x="71.0921%" y="559.50">dads_gzip_thing::process_lines::{{closure}}</text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::try_recv (231 samples, 5.23%)</title><rect x="92.0236%" y="533" width="5.2345%" height="15" fill="rgb(240,211,16)" fg:x="4061" fg:w="231"/><text x="92.1436%" y="543.50">tokio::sync::bro..</text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (225 samples, 5.10%)</title><rect x="92.1595%" y="517" width="5.0986%" height="15" fill="rgb(205,3,43)" fg:x="4067" fg:w="225"/><text x="92.2795%" y="527.50">tokio::sync::bro..</text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (62 samples, 1.40%)</title><rect x="95.8532%" y="501" width="1.4049%" height="15" fill="rgb(245,7,22)" fg:x="4230" fg:w="62"/><text x="95.9732%" y="511.50">to..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (62 samples, 1.40%)</title><rect x="95.8532%" y="485" width="1.4049%" height="15" fill="rgb(239,132,32)" fg:x="4230" fg:w="62"/><text x="95.9732%" y="495.50">st..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (62 samples, 1.40%)</title><rect x="95.8532%" y="469" width="1.4049%" height="15" fill="rgb(228,202,34)" fg:x="4230" fg:w="62"/><text x="95.9732%" y="479.50">st..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (62 samples, 1.40%)</title><rect x="95.8532%" y="453" width="1.4049%" height="15" fill="rgb(254,200,22)" fg:x="4230" fg:w="62"/><text x="95.9732%" y="463.50">st..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (2 samples, 0.05%)</title><rect x="97.2128%" y="437" width="0.0453%" height="15" fill="rgb(219,10,39)" fg:x="4290" fg:w="2"/><text x="97.3328%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (2 samples, 0.05%)</title><rect x="97.2128%" y="421" width="0.0453%" height="15" fill="rgb(226,210,39)" fg:x="4290" fg:w="2"/><text x="97.3328%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.02%)</title><rect x="97.2354%" y="405" width="0.0227%" height="15" fill="rgb(208,219,16)" fg:x="4291" fg:w="1"/><text x="97.3554%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="97.2354%" y="389" width="0.0227%" height="15" fill="rgb(216,158,51)" fg:x="4291" fg:w="1"/><text x="97.3554%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::TaskIdGuard&gt; (3 samples, 0.07%)</title><rect x="97.2581%" y="565" width="0.0680%" height="15" fill="rgb(233,14,44)" fg:x="4292" fg:w="3"/><text x="97.3781%" y="575.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="97.2808%" y="549" width="0.0453%" height="15" fill="rgb(237,97,39)" fg:x="4293" fg:w="2"/><text x="97.4008%" y="559.50"></text></g><g><title>tokio::runtime::context::set_current_task_id (2 samples, 0.05%)</title><rect x="97.2808%" y="533" width="0.0453%" height="15" fill="rgb(218,198,43)" fg:x="4293" fg:w="2"/><text x="97.4008%" y="543.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.05%)</title><rect x="97.2808%" y="517" width="0.0453%" height="15" fill="rgb(231,104,20)" fg:x="4293" fg:w="2"/><text x="97.4008%" y="527.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (2 samples, 0.05%)</title><rect x="97.2808%" y="501" width="0.0453%" height="15" fill="rgb(254,36,13)" fg:x="4293" fg:w="2"/><text x="97.4008%" y="511.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (2 samples, 0.05%)</title><rect x="97.2808%" y="485" width="0.0453%" height="15" fill="rgb(248,14,50)" fg:x="4293" fg:w="2"/><text x="97.4008%" y="495.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (3,310 samples, 75.01%)</title><rect x="22.3431%" y="709" width="75.0057%" height="15" fill="rgb(217,107,29)" fg:x="986" fg:w="3310"/><text x="22.4631%" y="719.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (3,310 samples, 75.01%)</title><rect x="22.3431%" y="693" width="75.0057%" height="15" fill="rgb(251,169,33)" fg:x="986" fg:w="3310"/><text x="22.4631%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,310 samples, 75.01%)</title><rect x="22.3431%" y="677" width="75.0057%" height="15" fill="rgb(217,108,32)" fg:x="986" fg:w="3310"/><text x="22.4631%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,310 samples, 75.01%)</title><rect x="22.3431%" y="661" width="75.0057%" height="15" fill="rgb(219,66,42)" fg:x="986" fg:w="3310"/><text x="22.4631%" y="671.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,310 samples, 75.01%)</title><rect x="22.3431%" y="645" width="75.0057%" height="15" fill="rgb(206,180,7)" fg:x="986" fg:w="3310"/><text x="22.4631%" y="655.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (3,310 samples, 75.01%)</title><rect x="22.3431%" y="629" width="75.0057%" height="15" fill="rgb(208,226,31)" fg:x="986" fg:w="3310"/><text x="22.4631%" y="639.50">tokio::runtime::task::harness::poll_future::{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (3,306 samples, 74.92%)</title><rect x="22.4337%" y="613" width="74.9150%" height="15" fill="rgb(218,26,49)" fg:x="990" fg:w="3306"/><text x="22.5537%" y="623.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (3,299 samples, 74.76%)</title><rect x="22.5923%" y="597" width="74.7564%" height="15" fill="rgb(233,197,48)" fg:x="997" fg:w="3299"/><text x="22.7123%" y="607.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (3,299 samples, 74.76%)</title><rect x="22.5923%" y="581" width="74.7564%" height="15" fill="rgb(252,181,51)" fg:x="997" fg:w="3299"/><text x="22.7123%" y="591.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}}</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (1 samples, 0.02%)</title><rect x="97.3261%" y="565" width="0.0227%" height="15" fill="rgb(253,90,19)" fg:x="4295" fg:w="1"/><text x="97.4461%" y="575.50"></text></g><g><title>tokio::runtime::context::set_current_task_id (1 samples, 0.02%)</title><rect x="97.3261%" y="549" width="0.0227%" height="15" fill="rgb(215,171,30)" fg:x="4295" fg:w="1"/><text x="97.4461%" y="559.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="97.3261%" y="533" width="0.0227%" height="15" fill="rgb(214,222,9)" fg:x="4295" fg:w="1"/><text x="97.4461%" y="543.50"></text></g><g><title>tokio::runtime::context::set_current_task_id::{{closure}} (1 samples, 0.02%)</title><rect x="97.3261%" y="517" width="0.0227%" height="15" fill="rgb(223,3,22)" fg:x="4295" fg:w="1"/><text x="97.4461%" y="527.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.02%)</title><rect x="97.3261%" y="501" width="0.0227%" height="15" fill="rgb(225,196,46)" fg:x="4295" fg:w="1"/><text x="97.4461%" y="511.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="97.3261%" y="485" width="0.0227%" height="15" fill="rgb(209,110,37)" fg:x="4295" fg:w="1"/><text x="97.4461%" y="495.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="97.3261%" y="469" width="0.0227%" height="15" fill="rgb(249,89,12)" fg:x="4295" fg:w="1"/><text x="97.4461%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (23 samples, 0.52%)</title><rect x="97.5300%" y="677" width="0.5212%" height="15" fill="rgb(226,27,33)" fg:x="4304" fg:w="23"/><text x="97.6500%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.52%)</title><rect x="97.5300%" y="661" width="0.5212%" height="15" fill="rgb(213,82,22)" fg:x="4304" fg:w="23"/><text x="97.6500%" y="671.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (40 samples, 0.91%)</title><rect x="97.3487%" y="709" width="0.9064%" height="15" fill="rgb(248,140,0)" fg:x="4296" fg:w="40"/><text x="97.4687%" y="719.50">t..</text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (32 samples, 0.73%)</title><rect x="97.5300%" y="693" width="0.7251%" height="15" fill="rgb(228,106,3)" fg:x="4304" fg:w="32"/><text x="97.6500%" y="703.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle::{{closure}} (9 samples, 0.20%)</title><rect x="98.0512%" y="677" width="0.2039%" height="15" fill="rgb(209,23,37)" fg:x="4327" fg:w="9"/><text x="98.1712%" y="687.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::ref_dec (9 samples, 0.20%)</title><rect x="98.0512%" y="661" width="0.2039%" height="15" fill="rgb(241,93,50)" fg:x="4327" fg:w="9"/><text x="98.1712%" y="671.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (48 samples, 1.09%)</title><rect x="98.2552%" y="709" width="1.0877%" height="15" fill="rgb(253,46,43)" fg:x="4336" fg:w="48"/><text x="98.3752%" y="719.50">t..</text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (48 samples, 1.09%)</title><rect x="98.2552%" y="693" width="1.0877%" height="15" fill="rgb(226,206,43)" fg:x="4336" fg:w="48"/><text x="98.3752%" y="703.50">t..</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (24 samples, 0.54%)</title><rect x="98.7990%" y="677" width="0.5438%" height="15" fill="rgb(217,54,7)" fg:x="4360" fg:w="24"/><text x="98.9190%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (24 samples, 0.54%)</title><rect x="98.7990%" y="661" width="0.5438%" height="15" fill="rgb(223,5,52)" fg:x="4360" fg:w="24"/><text x="98.9190%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (3,423 samples, 77.57%)</title><rect x="21.8446%" y="837" width="77.5663%" height="15" fill="rgb(206,52,46)" fg:x="964" fg:w="3423"/><text x="21.9646%" y="847.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::coop::budget (3,423 samples, 77.57%)</title><rect x="21.8446%" y="821" width="77.5663%" height="15" fill="rgb(253,136,11)" fg:x="964" fg:w="3423"/><text x="21.9646%" y="831.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (3,423 samples, 77.57%)</title><rect x="21.8446%" y="805" width="77.5663%" height="15" fill="rgb(208,106,33)" fg:x="964" fg:w="3423"/><text x="21.9646%" y="815.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}} (3,423 samples, 77.57%)</title><rect x="21.8446%" y="789" width="77.5663%" height="15" fill="rgb(206,54,4)" fg:x="964" fg:w="3423"/><text x="21.9646%" y="799.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}}</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (3,414 samples, 77.36%)</title><rect x="22.0485%" y="773" width="77.3623%" height="15" fill="rgb(213,3,15)" fg:x="973" fg:w="3414"/><text x="22.1685%" y="783.50">tokio::runtime::task::LocalNotified&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (3,414 samples, 77.36%)</title><rect x="22.0485%" y="757" width="77.3623%" height="15" fill="rgb(252,211,39)" fg:x="973" fg:w="3414"/><text x="22.1685%" y="767.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3,414 samples, 77.36%)</title><rect x="22.0485%" y="741" width="77.3623%" height="15" fill="rgb(223,6,36)" fg:x="973" fg:w="3414"/><text x="22.1685%" y="751.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (3,404 samples, 77.14%)</title><rect x="22.2751%" y="725" width="77.1357%" height="15" fill="rgb(252,169,45)" fg:x="983" fg:w="3404"/><text x="22.3951%" y="735.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::waker::waker_ref (3 samples, 0.07%)</title><rect x="99.3429%" y="709" width="0.0680%" height="15" fill="rgb(212,48,26)" fg:x="4384" fg:w="3"/><text x="99.4629%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="99.4108%" y="821" width="0.0227%" height="15" fill="rgb(251,102,48)" fg:x="4387" fg:w="1"/><text x="99.5308%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (1 samples, 0.02%)</title><rect x="99.4108%" y="805" width="0.0227%" height="15" fill="rgb(243,208,16)" fg:x="4387" fg:w="1"/><text x="99.5308%" y="815.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="99.4108%" y="789" width="0.0227%" height="15" fill="rgb(219,96,24)" fg:x="4387" fg:w="1"/><text x="99.5308%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.02%)</title><rect x="99.4335%" y="789" width="0.0227%" height="15" fill="rgb(219,33,29)" fg:x="4388" fg:w="1"/><text x="99.5535%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="99.4335%" y="773" width="0.0227%" height="15" fill="rgb(223,176,5)" fg:x="4388" fg:w="1"/><text x="99.5535%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (8 samples, 0.18%)</title><rect x="99.4562%" y="789" width="0.1813%" height="15" fill="rgb(228,140,14)" fg:x="4389" fg:w="8"/><text x="99.5762%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (8 samples, 0.18%)</title><rect x="99.4562%" y="773" width="0.1813%" height="15" fill="rgb(217,179,31)" fg:x="4389" fg:w="8"/><text x="99.5762%" y="783.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (3,486 samples, 78.99%)</title><rect x="20.6662%" y="885" width="78.9939%" height="15" fill="rgb(230,9,30)" fg:x="912" fg:w="3486"/><text x="20.7862%" y="895.50">tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (3,486 samples, 78.99%)</title><rect x="20.6662%" y="869" width="78.9939%" height="15" fill="rgb(230,136,20)" fg:x="912" fg:w="3486"/><text x="20.7862%" y="879.50">tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (3,485 samples, 78.97%)</title><rect x="20.6889%" y="853" width="78.9712%" height="15" fill="rgb(215,210,22)" fg:x="913" fg:w="3485"/><text x="20.8089%" y="863.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::steal_work (11 samples, 0.25%)</title><rect x="99.4108%" y="837" width="0.2493%" height="15" fill="rgb(218,43,5)" fg:x="4387" fg:w="11"/><text x="99.5308%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (10 samples, 0.23%)</title><rect x="99.4335%" y="821" width="0.2266%" height="15" fill="rgb(216,11,5)" fg:x="4388" fg:w="10"/><text x="99.5535%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into2 (10 samples, 0.23%)</title><rect x="99.4335%" y="805" width="0.2266%" height="15" fill="rgb(209,82,29)" fg:x="4388" fg:w="10"/><text x="99.5535%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::unpack (1 samples, 0.02%)</title><rect x="99.6374%" y="789" width="0.0227%" height="15" fill="rgb(244,115,12)" fg:x="4397" fg:w="1"/><text x="99.7574%" y="799.50"></text></g><g><title>tokio::runtime::context::enter_runtime (1 samples, 0.02%)</title><rect x="99.6601%" y="885" width="0.0227%" height="15" fill="rgb(222,82,18)" fg:x="4398" fg:w="1"/><text x="99.7801%" y="895.50"></text></g><g><title>tokio::runtime::context::try_enter_runtime (1 samples, 0.02%)</title><rect x="99.6601%" y="869" width="0.0227%" height="15" fill="rgb(249,227,8)" fg:x="4398" fg:w="1"/><text x="99.7801%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.6601%" y="853" width="0.0227%" height="15" fill="rgb(253,141,45)" fg:x="4398" fg:w="1"/><text x="99.7801%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="99.6601%" y="837" width="0.0227%" height="15" fill="rgb(234,184,4)" fg:x="4398" fg:w="1"/><text x="99.7801%" y="847.50"></text></g><g><title>tokio::runtime::context::try_enter_runtime::{{closure}} (1 samples, 0.02%)</title><rect x="99.6601%" y="821" width="0.0227%" height="15" fill="rgb(218,194,23)" fg:x="4398" fg:w="1"/><text x="99.7801%" y="831.50"></text></g><g><title>tokio::runtime::context::Context::set_current (1 samples, 0.02%)</title><rect x="99.6601%" y="805" width="0.0227%" height="15" fill="rgb(235,66,41)" fg:x="4398" fg:w="1"/><text x="99.7801%" y="815.50"></text></g><g><title>&lt;tokio::runtime::scheduler::Handle as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="99.6601%" y="789" width="0.0227%" height="15" fill="rgb(245,217,1)" fg:x="4398" fg:w="1"/><text x="99.7801%" y="799.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (3,495 samples, 79.20%)</title><rect x="20.5303%" y="981" width="79.1978%" height="15" fill="rgb(229,91,1)" fg:x="906" fg:w="3495"/><text x="20.6503%" y="991.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (3,495 samples, 79.20%)</title><rect x="20.5303%" y="965" width="79.1978%" height="15" fill="rgb(207,101,30)" fg:x="906" fg:w="3495"/><text x="20.6503%" y="975.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (3,495 samples, 79.20%)</title><rect x="20.5303%" y="949" width="79.1978%" height="15" fill="rgb(223,82,49)" fg:x="906" fg:w="3495"/><text x="20.6503%" y="959.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}}</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (3,495 samples, 79.20%)</title><rect x="20.5303%" y="933" width="79.1978%" height="15" fill="rgb(218,167,17)" fg:x="906" fg:w="3495"/><text x="20.6503%" y="943.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (3,492 samples, 79.13%)</title><rect x="20.5982%" y="917" width="79.1298%" height="15" fill="rgb(208,103,14)" fg:x="909" fg:w="3492"/><text x="20.7182%" y="927.50">tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (3,492 samples, 79.13%)</title><rect x="20.5982%" y="901" width="79.1298%" height="15" fill="rgb(238,20,8)" fg:x="909" fg:w="3492"/><text x="20.7182%" y="911.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::util::atomic_cell::AtomicCell&lt;T&gt;::take (2 samples, 0.05%)</title><rect x="99.6828%" y="885" width="0.0453%" height="15" fill="rgb(218,80,54)" fg:x="4399" fg:w="2"/><text x="99.8028%" y="895.50"></text></g><g><title>tokio::util::atomic_cell::AtomicCell&lt;T&gt;::swap (2 samples, 0.05%)</title><rect x="99.6828%" y="869" width="0.0453%" height="15" fill="rgb(240,144,17)" fg:x="4399" fg:w="2"/><text x="99.8028%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::swap (2 samples, 0.05%)</title><rect x="99.6828%" y="853" width="0.0453%" height="15" fill="rgb(245,27,50)" fg:x="4399" fg:w="2"/><text x="99.8028%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_swap (2 samples, 0.05%)</title><rect x="99.6828%" y="837" width="0.0453%" height="15" fill="rgb(251,51,7)" fg:x="4399" fg:w="2"/><text x="99.8028%" y="847.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (3,496 samples, 79.22%)</title><rect x="20.5303%" y="1077" width="79.2205%" height="15" fill="rgb(245,217,29)" fg:x="906" fg:w="3496"/><text x="20.6503%" y="1087.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (3,496 samples, 79.22%)</title><rect x="20.5303%" y="1061" width="79.2205%" height="15" fill="rgb(221,176,29)" fg:x="906" fg:w="3496"/><text x="20.6503%" y="1071.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,496 samples, 79.22%)</title><rect x="20.5303%" y="1045" width="79.2205%" height="15" fill="rgb(212,180,24)" fg:x="906" fg:w="3496"/><text x="20.6503%" y="1055.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,496 samples, 79.22%)</title><rect x="20.5303%" y="1029" width="79.2205%" height="15" fill="rgb(254,24,2)" fg:x="906" fg:w="3496"/><text x="20.6503%" y="1039.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,496 samples, 79.22%)</title><rect x="20.5303%" y="1013" width="79.2205%" height="15" fill="rgb(230,100,2)" fg:x="906" fg:w="3496"/><text x="20.6503%" y="1023.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (3,496 samples, 79.22%)</title><rect x="20.5303%" y="997" width="79.2205%" height="15" fill="rgb(219,142,25)" fg:x="906" fg:w="3496"/><text x="20.6503%" y="1007.50">tokio::runtime::task::harness::poll_future::{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::store_output (1 samples, 0.02%)</title><rect x="99.7281%" y="981" width="0.0227%" height="15" fill="rgb(240,73,43)" fg:x="4401" fg:w="1"/><text x="99.8481%" y="991.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.02%)</title><rect x="99.7734%" y="1045" width="0.0227%" height="15" fill="rgb(214,114,15)" fg:x="4403" fg:w="1"/><text x="99.8934%" y="1055.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.02%)</title><rect x="99.7734%" y="1029" width="0.0227%" height="15" fill="rgb(207,130,4)" fg:x="4403" fg:w="1"/><text x="99.8934%" y="1039.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (3,653 samples, 82.78%)</title><rect x="17.0406%" y="1173" width="82.7782%" height="15" fill="rgb(221,25,40)" fg:x="752" fg:w="3653"/><text x="17.1606%" y="1183.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::blocking::pool::Task::run (3,504 samples, 79.40%)</title><rect x="20.4169%" y="1157" width="79.4018%" height="15" fill="rgb(241,184,7)" fg:x="901" fg:w="3504"/><text x="20.5369%" y="1167.50">tokio::runtime::blocking::pool::Task::run</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (3,504 samples, 79.40%)</title><rect x="20.4169%" y="1141" width="79.4018%" height="15" fill="rgb(235,159,4)" fg:x="901" fg:w="3504"/><text x="20.5369%" y="1151.50">tokio::runtime::task::UnownedTask&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (3,503 samples, 79.38%)</title><rect x="20.4396%" y="1125" width="79.3791%" height="15" fill="rgb(214,87,48)" fg:x="902" fg:w="3503"/><text x="20.5596%" y="1135.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3,502 samples, 79.36%)</title><rect x="20.4623%" y="1109" width="79.3564%" height="15" fill="rgb(246,198,24)" fg:x="903" fg:w="3502"/><text x="20.5823%" y="1119.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (3,500 samples, 79.31%)</title><rect x="20.5076%" y="1093" width="79.3111%" height="15" fill="rgb(209,66,40)" fg:x="905" fg:w="3500"/><text x="20.6276%" y="1103.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (3 samples, 0.07%)</title><rect x="99.7507%" y="1077" width="0.0680%" height="15" fill="rgb(233,147,39)" fg:x="4402" fg:w="3"/><text x="99.8707%" y="1087.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (3 samples, 0.07%)</title><rect x="99.7507%" y="1061" width="0.0680%" height="15" fill="rgb(231,145,52)" fg:x="4402" fg:w="3"/><text x="99.8707%" y="1071.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running::{{closure}} (1 samples, 0.02%)</title><rect x="99.7961%" y="1045" width="0.0227%" height="15" fill="rgb(206,20,26)" fg:x="4404" fg:w="1"/><text x="99.9161%" y="1055.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::unset_notified (1 samples, 0.02%)</title><rect x="99.7961%" y="1029" width="0.0227%" height="15" fill="rgb(238,220,4)" fg:x="4404" fg:w="1"/><text x="99.9161%" y="1039.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_initialize (1 samples, 0.02%)</title><rect x="99.8187%" y="1093" width="0.0227%" height="15" fill="rgb(252,195,42)" fg:x="4405" fg:w="1"/><text x="99.9387%" y="1103.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_register_dtor (1 samples, 0.02%)</title><rect x="99.8187%" y="1077" width="0.0227%" height="15" fill="rgb(209,10,6)" fg:x="4405" fg:w="1"/><text x="99.9387%" y="1087.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (2 samples, 0.05%)</title><rect x="99.8187%" y="1125" width="0.0453%" height="15" fill="rgb(229,3,52)" fg:x="4405" fg:w="2"/><text x="99.9387%" y="1135.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (2 samples, 0.05%)</title><rect x="99.8187%" y="1109" width="0.0453%" height="15" fill="rgb(253,49,37)" fg:x="4405" fg:w="2"/><text x="99.9387%" y="1119.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::initialize (1 samples, 0.02%)</title><rect x="99.8414%" y="1093" width="0.0227%" height="15" fill="rgb(240,103,49)" fg:x="4406" fg:w="1"/><text x="99.9614%" y="1103.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit::{{closure}} (1 samples, 0.02%)</title><rect x="99.8414%" y="1077" width="0.0227%" height="15" fill="rgb(250,182,30)" fg:x="4406" fg:w="1"/><text x="99.9614%" y="1087.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__init (1 samples, 0.02%)</title><rect x="99.8414%" y="1061" width="0.0227%" height="15" fill="rgb(248,8,30)" fg:x="4406" fg:w="1"/><text x="99.9614%" y="1071.50"></text></g><g><title>tokio::util::rand::RngSeed::new (1 samples, 0.02%)</title><rect x="99.8414%" y="1045" width="0.0227%" height="15" fill="rgb(237,120,30)" fg:x="4406" fg:w="1"/><text x="99.9614%" y="1055.50"></text></g><g><title>tokio::loom::std::rand::seed (1 samples, 0.02%)</title><rect x="99.8414%" y="1029" width="0.0227%" height="15" fill="rgb(221,146,34)" fg:x="4406" fg:w="1"/><text x="99.9614%" y="1039.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_add (1 samples, 0.02%)</title><rect x="99.8414%" y="1013" width="0.0227%" height="15" fill="rgb(242,55,13)" fg:x="4406" fg:w="1"/><text x="99.9614%" y="1023.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.02%)</title><rect x="99.8414%" y="997" width="0.0227%" height="15" fill="rgb(242,112,31)" fg:x="4406" fg:w="1"/><text x="99.9614%" y="1007.50"></text></g><g><title>std::panic::catch_unwind (3,704 samples, 83.93%)</title><rect x="15.9529%" y="1285" width="83.9338%" height="15" fill="rgb(249,192,27)" fg:x="704" fg:w="3704"/><text x="16.0729%" y="1295.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,704 samples, 83.93%)</title><rect x="15.9529%" y="1269" width="83.9338%" height="15" fill="rgb(208,204,44)" fg:x="704" fg:w="3704"/><text x="16.0729%" y="1279.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,704 samples, 83.93%)</title><rect x="15.9529%" y="1253" width="83.9338%" height="15" fill="rgb(208,93,54)" fg:x="704" fg:w="3704"/><text x="16.0729%" y="1263.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,704 samples, 83.93%)</title><rect x="15.9529%" y="1237" width="83.9338%" height="15" fill="rgb(242,1,31)" fg:x="704" fg:w="3704"/><text x="16.0729%" y="1247.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (3,704 samples, 83.93%)</title><rect x="15.9529%" y="1221" width="83.9338%" height="15" fill="rgb(241,83,25)" fg:x="704" fg:w="3704"/><text x="16.0729%" y="1231.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,704 samples, 83.93%)</title><rect x="15.9529%" y="1205" width="83.9338%" height="15" fill="rgb(205,169,50)" fg:x="704" fg:w="3704"/><text x="16.0729%" y="1215.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (3,665 samples, 83.05%)</title><rect x="16.8366%" y="1189" width="83.0501%" height="15" fill="rgb(239,186,37)" fg:x="743" fg:w="3665"/><text x="16.9566%" y="1199.50">tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}}</text></g><g><title>tokio::runtime::handle::Handle::enter (3 samples, 0.07%)</title><rect x="99.8187%" y="1173" width="0.0680%" height="15" fill="rgb(205,221,10)" fg:x="4405" fg:w="3"/><text x="99.9387%" y="1183.50"></text></g><g><title>tokio::runtime::context::try_set_current (3 samples, 0.07%)</title><rect x="99.8187%" y="1157" width="0.0680%" height="15" fill="rgb(218,196,15)" fg:x="4405" fg:w="3"/><text x="99.9387%" y="1167.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.07%)</title><rect x="99.8187%" y="1141" width="0.0680%" height="15" fill="rgb(218,196,35)" fg:x="4405" fg:w="3"/><text x="99.9387%" y="1151.50"></text></g><g><title>tokio::runtime::context::try_set_current::{{closure}} (1 samples, 0.02%)</title><rect x="99.8640%" y="1125" width="0.0227%" height="15" fill="rgb(233,63,24)" fg:x="4407" fg:w="1"/><text x="99.9840%" y="1135.50"></text></g><g><title>tokio::runtime::context::Context::set_current (1 samples, 0.02%)</title><rect x="99.8640%" y="1109" width="0.0227%" height="15" fill="rgb(225,8,4)" fg:x="4407" fg:w="1"/><text x="99.9840%" y="1119.50"></text></g><g><title>&lt;tokio::runtime::scheduler::Handle as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="99.8640%" y="1093" width="0.0227%" height="15" fill="rgb(234,105,35)" fg:x="4407" fg:w="1"/><text x="99.9840%" y="1103.50"></text></g><g><title>std::sys::unix::thread::Thread::set_name (1 samples, 0.02%)</title><rect x="99.8867%" y="1285" width="0.0227%" height="15" fill="rgb(236,21,32)" fg:x="4408" fg:w="1"/><text x="100.0067%" y="1295.50"></text></g><g><title>std::sys::unix::thread::truncate_cstr (1 samples, 0.02%)</title><rect x="99.8867%" y="1269" width="0.0227%" height="15" fill="rgb(228,109,6)" fg:x="4408" fg:w="1"/><text x="100.0067%" y="1279.50"></text></g><g><title>alloc::ffi::c_str::CString::from_vec_unchecked (1 samples, 0.02%)</title><rect x="99.8867%" y="1253" width="0.0227%" height="15" fill="rgb(229,215,31)" fg:x="4408" fg:w="1"/><text x="100.0067%" y="1263.50"></text></g><g><title>alloc::ffi::c_str::CString::_from_vec_unchecked (1 samples, 0.02%)</title><rect x="99.8867%" y="1237" width="0.0227%" height="15" fill="rgb(221,52,54)" fg:x="4408" fg:w="1"/><text x="100.0067%" y="1247.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.02%)</title><rect x="99.8867%" y="1221" width="0.0227%" height="15" fill="rgb(252,129,43)" fg:x="4408" fg:w="1"/><text x="100.0067%" y="1231.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3,713 samples, 84.14%)</title><rect x="15.7942%" y="1349" width="84.1378%" height="15" fill="rgb(248,183,27)" fg:x="697" fg:w="3713"/><text x="15.9142%" y="1359.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3,712 samples, 84.12%)</title><rect x="15.8169%" y="1333" width="84.1151%" height="15" fill="rgb(250,0,22)" fg:x="698" fg:w="3712"/><text x="15.9369%" y="1343.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3,708 samples, 84.02%)</title><rect x="15.9075%" y="1317" width="84.0245%" height="15" fill="rgb(213,166,10)" fg:x="702" fg:w="3708"/><text x="16.0275%" y="1327.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (3,708 samples, 84.02%)</title><rect x="15.9075%" y="1301" width="84.0245%" height="15" fill="rgb(207,163,36)" fg:x="702" fg:w="3708"/><text x="16.0275%" y="1311.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::thread::Thread::cname (1 samples, 0.02%)</title><rect x="99.9094%" y="1285" width="0.0227%" height="15" fill="rgb(208,122,22)" fg:x="4409" fg:w="1"/><text x="100.0294%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::stack_overflow::Handler&gt; (1 samples, 0.02%)</title><rect x="99.9320%" y="1349" width="0.0227%" height="15" fill="rgb(207,104,49)" fg:x="4410" fg:w="1"/><text x="100.0520%" y="1359.50"></text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.9320%" y="1333" width="0.0227%" height="15" fill="rgb(248,211,50)" fg:x="4410" fg:w="1"/><text x="100.0520%" y="1343.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (1 samples, 0.02%)</title><rect x="99.9320%" y="1317" width="0.0227%" height="15" fill="rgb(217,13,45)" fg:x="4410" fg:w="1"/><text x="100.0520%" y="1327.50"></text></g><g><title>all (4,413 samples, 100%)</title><rect x="0.0000%" y="1429" width="100.0000%" height="15" fill="rgb(211,216,49)" fg:x="0" fg:w="4413"/><text x="0.1200%" y="1439.50"></text></g><g><title>tokio-runtime-w (3,719 samples, 84.27%)</title><rect x="15.7263%" y="1413" width="84.2737%" height="15" fill="rgb(221,58,53)" fg:x="694" fg:w="3719"/><text x="15.8463%" y="1423.50">tokio-runtime-w</text></g><g><title>__GI___clone3 (3,719 samples, 84.27%)</title><rect x="15.7263%" y="1397" width="84.2737%" height="15" fill="rgb(220,112,41)" fg:x="694" fg:w="3719"/><text x="15.8463%" y="1407.50">__GI___clone3</text></g><g><title>start_thread (3,719 samples, 84.27%)</title><rect x="15.7263%" y="1381" width="84.2737%" height="15" fill="rgb(236,38,28)" fg:x="694" fg:w="3719"/><text x="15.8463%" y="1391.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3,716 samples, 84.21%)</title><rect x="15.7942%" y="1365" width="84.2058%" height="15" fill="rgb(227,195,22)" fg:x="697" fg:w="3716"/><text x="15.9142%" y="1375.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (2 samples, 0.05%)</title><rect x="99.9547%" y="1349" width="0.0453%" height="15" fill="rgb(214,55,33)" fg:x="4411" fg:w="2"/><text x="100.0747%" y="1359.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (2 samples, 0.05%)</title><rect x="99.9547%" y="1333" width="0.0453%" height="15" fill="rgb(248,80,13)" fg:x="4411" fg:w="2"/><text x="100.0747%" y="1343.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.02%)</title><rect x="99.9773%" y="1317" width="0.0227%" height="15" fill="rgb(238,52,6)" fg:x="4412" fg:w="1"/><text x="100.0973%" y="1327.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="99.9773%" y="1301" width="0.0227%" height="15" fill="rgb(224,198,47)" fg:x="4412" fg:w="1"/><text x="100.0973%" y="1311.50"></text></g></svg></svg>