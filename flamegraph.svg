<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="2500" height="1494" onload="init(evt)" viewBox="0 0 2500 1494" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1494" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1477.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="2490" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="2490" y="1477.00"> </text><svg id="frames" x="10" width="2480" total_samples="12689"><g><title>miniz_oxide::deflate::core::DictOxide::find_match (35 samples, 0.28%)</title><rect x="0.3862%" y="789" width="0.2758%" height="15" fill="rgb(227,0,7)" fg:x="49" fg:w="35"/><text x="0.5062%" y="799.50"></text></g><g><title>miniz_oxide::deflate::core::flush_block (2 samples, 0.02%)</title><rect x="0.6620%" y="789" width="0.0158%" height="15" fill="rgb(217,0,24)" fg:x="84" fg:w="2"/><text x="0.7820%" y="799.50"></text></g><g><title>miniz_oxide::deflate::core::compress_block (2 samples, 0.02%)</title><rect x="0.6620%" y="773" width="0.0158%" height="15" fill="rgb(221,193,54)" fg:x="84" fg:w="2"/><text x="0.7820%" y="783.50"></text></g><g><title>miniz_oxide::deflate::core::compress_normal (86 samples, 0.68%)</title><rect x="0.0079%" y="805" width="0.6778%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="86"/><text x="0.1279%" y="815.50"></text></g><g><title>__GI___clone3 (90 samples, 0.71%)</title><rect x="0.0000%" y="1413" width="0.7093%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="90"/><text x="0.1200%" y="1423.50"></text></g><g><title>start_thread (90 samples, 0.71%)</title><rect x="0.0000%" y="1397" width="0.7093%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="90"/><text x="0.1200%" y="1407.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (90 samples, 0.71%)</title><rect x="0.0000%" y="1381" width="0.7093%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="90"/><text x="0.1200%" y="1391.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (90 samples, 0.71%)</title><rect x="0.0000%" y="1365" width="0.7093%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="90"/><text x="0.1200%" y="1375.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (90 samples, 0.71%)</title><rect x="0.0000%" y="1349" width="0.7093%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="90"/><text x="0.1200%" y="1359.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (90 samples, 0.71%)</title><rect x="0.0000%" y="1333" width="0.7093%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="90"/><text x="0.1200%" y="1343.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (90 samples, 0.71%)</title><rect x="0.0000%" y="1317" width="0.7093%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="90"/><text x="0.1200%" y="1327.50"></text></g><g><title>std::panic::catch_unwind (90 samples, 0.71%)</title><rect x="0.0000%" y="1301" width="0.7093%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="90"/><text x="0.1200%" y="1311.50"></text></g><g><title>std::panicking::try (90 samples, 0.71%)</title><rect x="0.0000%" y="1285" width="0.7093%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="90"/><text x="0.1200%" y="1295.50"></text></g><g><title>std::panicking::try::do_call (90 samples, 0.71%)</title><rect x="0.0000%" y="1269" width="0.7093%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="90"/><text x="0.1200%" y="1279.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (90 samples, 0.71%)</title><rect x="0.0000%" y="1253" width="0.7093%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="90"/><text x="0.1200%" y="1263.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (90 samples, 0.71%)</title><rect x="0.0000%" y="1237" width="0.7093%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="90"/><text x="0.1200%" y="1247.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (90 samples, 0.71%)</title><rect x="0.0000%" y="1221" width="0.7093%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="90"/><text x="0.1200%" y="1231.50"></text></g><g><title>&lt;dads_gzip_thing::enc::GzEncoderAsync as core::ops::drop::Drop&gt;::drop::{{closure}}::{{closure}} (90 samples, 0.71%)</title><rect x="0.0000%" y="1205" width="0.7093%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="90"/><text x="0.1200%" y="1215.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (89 samples, 0.70%)</title><rect x="0.0079%" y="1189" width="0.7014%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="89"/><text x="0.1279%" y="1199.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (89 samples, 0.70%)</title><rect x="0.0079%" y="1173" width="0.7014%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="89"/><text x="0.1279%" y="1183.50"></text></g><g><title>tokio::runtime::context::BlockingRegionGuard::block_on (89 samples, 0.70%)</title><rect x="0.0079%" y="1157" width="0.7014%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="89"/><text x="0.1279%" y="1167.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (89 samples, 0.70%)</title><rect x="0.0079%" y="1141" width="0.7014%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="89"/><text x="0.1279%" y="1151.50"></text></g><g><title>tokio::runtime::coop::budget (89 samples, 0.70%)</title><rect x="0.0079%" y="1125" width="0.7014%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="89"/><text x="0.1279%" y="1135.50"></text></g><g><title>tokio::runtime::coop::with_budget (89 samples, 0.70%)</title><rect x="0.0079%" y="1109" width="0.7014%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="89"/><text x="0.1279%" y="1119.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (89 samples, 0.70%)</title><rect x="0.0079%" y="1093" width="0.7014%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="89"/><text x="0.1279%" y="1103.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (89 samples, 0.70%)</title><rect x="0.0079%" y="1077" width="0.7014%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="89"/><text x="0.1279%" y="1087.50"></text></g><g><title>dads_gzip_thing::enc::GzEncoderAsync::flush::{{closure}} (89 samples, 0.70%)</title><rect x="0.0079%" y="1061" width="0.7014%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="89"/><text x="0.1279%" y="1071.50"></text></g><g><title>std::io::Read::read_to_end (89 samples, 0.70%)</title><rect x="0.0079%" y="1045" width="0.7014%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="89"/><text x="0.1279%" y="1055.50"></text></g><g><title>std::io::default_read_to_end (89 samples, 0.70%)</title><rect x="0.0079%" y="1029" width="0.7014%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="89"/><text x="0.1279%" y="1039.50"></text></g><g><title>std::io::Read::read_buf (89 samples, 0.70%)</title><rect x="0.0079%" y="1013" width="0.7014%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="89"/><text x="0.1279%" y="1023.50"></text></g><g><title>std::io::default_read_buf (89 samples, 0.70%)</title><rect x="0.0079%" y="997" width="0.7014%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="89"/><text x="0.1279%" y="1007.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (89 samples, 0.70%)</title><rect x="0.0079%" y="981" width="0.7014%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="89"/><text x="0.1279%" y="991.50"></text></g><g><title>&lt;flate2::gz::read::GzEncoder&lt;R&gt; as std::io::Read&gt;::read (89 samples, 0.70%)</title><rect x="0.0079%" y="965" width="0.7014%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="89"/><text x="0.1279%" y="975.50"></text></g><g><title>&lt;flate2::gz::bufread::GzEncoder&lt;R&gt; as std::io::Read&gt;::read (89 samples, 0.70%)</title><rect x="0.0079%" y="949" width="0.7014%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="89"/><text x="0.1279%" y="959.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateEncoder&lt;R&gt; as std::io::Read&gt;::read (89 samples, 0.70%)</title><rect x="0.0079%" y="933" width="0.7014%" height="15" fill="rgb(241,83,37)" fg:x="1" fg:w="89"/><text x="0.1279%" y="943.50"></text></g><g><title>flate2::zio::read (89 samples, 0.70%)</title><rect x="0.0079%" y="917" width="0.7014%" height="15" fill="rgb(233,36,39)" fg:x="1" fg:w="89"/><text x="0.1279%" y="927.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run (89 samples, 0.70%)</title><rect x="0.0079%" y="901" width="0.7014%" height="15" fill="rgb(226,3,54)" fg:x="1" fg:w="89"/><text x="0.1279%" y="911.50"></text></g><g><title>flate2::mem::Compress::compress (89 samples, 0.70%)</title><rect x="0.0079%" y="885" width="0.7014%" height="15" fill="rgb(245,192,40)" fg:x="1" fg:w="89"/><text x="0.1279%" y="895.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::compress (89 samples, 0.70%)</title><rect x="0.0079%" y="869" width="0.7014%" height="15" fill="rgb(238,167,29)" fg:x="1" fg:w="89"/><text x="0.1279%" y="879.50"></text></g><g><title>miniz_oxide::deflate::stream::deflate (89 samples, 0.70%)</title><rect x="0.0079%" y="853" width="0.7014%" height="15" fill="rgb(232,182,51)" fg:x="1" fg:w="89"/><text x="0.1279%" y="863.50"></text></g><g><title>miniz_oxide::deflate::core::compress (89 samples, 0.70%)</title><rect x="0.0079%" y="837" width="0.7014%" height="15" fill="rgb(231,60,39)" fg:x="1" fg:w="89"/><text x="0.1279%" y="847.50"></text></g><g><title>miniz_oxide::deflate::core::compress_inner (89 samples, 0.70%)</title><rect x="0.0079%" y="821" width="0.7014%" height="15" fill="rgb(208,69,12)" fg:x="1" fg:w="89"/><text x="0.1279%" y="831.50"></text></g><g><title>miniz_oxide::deflate::core::flush_block (3 samples, 0.02%)</title><rect x="0.6856%" y="805" width="0.0236%" height="15" fill="rgb(235,93,37)" fg:x="87" fg:w="3"/><text x="0.8056%" y="815.50"></text></g><g><title>miniz_oxide::deflate::core::compress_block (3 samples, 0.02%)</title><rect x="0.6856%" y="789" width="0.0236%" height="15" fill="rgb(213,116,39)" fg:x="87" fg:w="3"/><text x="0.8056%" y="799.50"></text></g><g><title>miniz_oxide::deflate::core::compress_lz_codes (3 samples, 0.02%)</title><rect x="0.6856%" y="773" width="0.0236%" height="15" fill="rgb(222,207,29)" fg:x="87" fg:w="3"/><text x="0.8056%" y="783.50"></text></g><g><title>miniz_oxide::deflate::core::BitBuffer::put_fast (2 samples, 0.02%)</title><rect x="0.6935%" y="757" width="0.0158%" height="15" fill="rgb(206,96,30)" fg:x="88" fg:w="2"/><text x="0.8135%" y="767.50"></text></g><g><title>miniz_oxide::MZFlush::new (37 samples, 0.29%)</title><rect x="15.1233%" y="741" width="0.2916%" height="15" fill="rgb(218,138,4)" fg:x="1919" fg:w="37"/><text x="15.2433%" y="751.50"></text></g><g><title>miniz_oxide::inflate::core::apply_match (8 samples, 0.06%)</title><rect x="20.9788%" y="693" width="0.0630%" height="15" fill="rgb(250,191,14)" fg:x="2662" fg:w="8"/><text x="21.0988%" y="703.50"></text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::lookup (182 samples, 1.43%)</title><rect x="21.0497%" y="677" width="1.4343%" height="15" fill="rgb(239,60,40)" fg:x="2671" fg:w="182"/><text x="21.1697%" y="687.50">min..</text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::fast_lookup (182 samples, 1.43%)</title><rect x="21.0497%" y="661" width="1.4343%" height="15" fill="rgb(206,27,48)" fg:x="2671" fg:w="182"/><text x="21.1697%" y="671.50">min..</text></g><g><title>miniz_oxide::inflate::core::decompress_fast (186 samples, 1.47%)</title><rect x="21.0418%" y="693" width="1.4658%" height="15" fill="rgb(225,35,8)" fg:x="2670" fg:w="186"/><text x="21.1618%" y="703.50">min..</text></g><g><title>miniz_oxide::inflate::core::transfer (3 samples, 0.02%)</title><rect x="22.4840%" y="677" width="0.0236%" height="15" fill="rgb(250,213,24)" fg:x="2853" fg:w="3"/><text x="22.6040%" y="687.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (2,120 samples, 16.71%)</title><rect x="5.8318%" y="757" width="16.7074%" height="15" fill="rgb(247,123,22)" fg:x="740" fg:w="2120"/><text x="5.9518%" y="767.50">&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBacke..</text></g><g><title>miniz_oxide::inflate::stream::inflate (904 samples, 7.12%)</title><rect x="15.4149%" y="741" width="7.1243%" height="15" fill="rgb(231,138,38)" fg:x="1956" fg:w="904"/><text x="15.5349%" y="751.50">miniz_oxide::inflate::s..</text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (198 samples, 1.56%)</title><rect x="20.9788%" y="725" width="1.5604%" height="15" fill="rgb(231,145,46)" fg:x="2662" fg:w="198"/><text x="21.0988%" y="735.50">min..</text></g><g><title>miniz_oxide::inflate::core::decompress (198 samples, 1.56%)</title><rect x="20.9788%" y="709" width="1.5604%" height="15" fill="rgb(251,118,11)" fg:x="2662" fg:w="198"/><text x="21.0988%" y="719.50">min..</text></g><g><title>miniz_oxide::inflate::core::init_tree (4 samples, 0.03%)</title><rect x="22.5077%" y="693" width="0.0315%" height="15" fill="rgb(217,147,25)" fg:x="2856" fg:w="4"/><text x="22.6277%" y="703.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.03%)</title><rect x="22.5077%" y="677" width="0.0315%" height="15" fill="rgb(247,81,37)" fg:x="2856" fg:w="4"/><text x="22.6277%" y="687.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.03%)</title><rect x="22.5077%" y="661" width="0.0315%" height="15" fill="rgb(209,12,38)" fg:x="2856" fg:w="4"/><text x="22.6277%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (4 samples, 0.03%)</title><rect x="22.5077%" y="645" width="0.0315%" height="15" fill="rgb(227,1,9)" fg:x="2856" fg:w="4"/><text x="22.6277%" y="655.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::total_in (59 samples, 0.46%)</title><rect x="22.5392%" y="757" width="0.4650%" height="15" fill="rgb(248,47,43)" fg:x="2860" fg:w="59"/><text x="22.6592%" y="767.50"></text></g><g><title>flate2::mem::Compress::total_in (59 samples, 0.46%)</title><rect x="22.5392%" y="741" width="0.4650%" height="15" fill="rgb(221,10,30)" fg:x="2860" fg:w="59"/><text x="22.6592%" y="751.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::Backend&gt;::total_in (59 samples, 0.46%)</title><rect x="22.5392%" y="725" width="0.4650%" height="15" fill="rgb(210,229,1)" fg:x="2860" fg:w="59"/><text x="22.6592%" y="735.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::total_out (28 samples, 0.22%)</title><rect x="23.0042%" y="757" width="0.2207%" height="15" fill="rgb(222,148,37)" fg:x="2919" fg:w="28"/><text x="23.1242%" y="767.50"></text></g><g><title>flate2::mem::Compress::total_out (28 samples, 0.22%)</title><rect x="23.0042%" y="741" width="0.2207%" height="15" fill="rgb(234,67,33)" fg:x="2919" fg:w="28"/><text x="23.1242%" y="751.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::Backend&gt;::total_out (28 samples, 0.22%)</title><rect x="23.0042%" y="725" width="0.2207%" height="15" fill="rgb(247,98,35)" fg:x="2919" fg:w="28"/><text x="23.1242%" y="735.50"></text></g><g><title>&lt;flate2::mem::DecompressError as core::fmt::Display&gt;::fmt (69 samples, 0.54%)</title><rect x="23.2248%" y="757" width="0.5438%" height="15" fill="rgb(247,138,52)" fg:x="2947" fg:w="69"/><text x="23.3448%" y="767.50"></text></g><g><title>&lt;async_compression::codec::gzip::decoder::GzipDecoder as async_compression::codec::Decode&gt;::decode::{{closure}} (2,817 samples, 22.20%)</title><rect x="5.0359%" y="805" width="22.2003%" height="15" fill="rgb(213,79,30)" fg:x="639" fg:w="2817"/><text x="5.1559%" y="815.50">&lt;async_compression::codec::gzip::decoder::GzipDecoder as async_compression::..</text></g><g><title>&lt;async_compression::codec::flate::decoder::FlateDecoder as async_compression::codec::Decode&gt;::decode (2,817 samples, 22.20%)</title><rect x="5.0359%" y="789" width="22.2003%" height="15" fill="rgb(246,177,23)" fg:x="639" fg:w="2817"/><text x="5.1559%" y="799.50">&lt;async_compression::codec::flate::decoder::FlateDecoder as async_compression..</text></g><g><title>async_compression::codec::flate::decoder::FlateDecoder::decode (2,817 samples, 22.20%)</title><rect x="5.0359%" y="773" width="22.2003%" height="15" fill="rgb(230,62,27)" fg:x="639" fg:w="2817"/><text x="5.1559%" y="783.50">async_compression::codec::flate::decoder::FlateDecoder::decode</text></g><g><title>async_compression::util::PartialBuffer&lt;B&gt;::unwritten (440 samples, 3.47%)</title><rect x="23.7686%" y="757" width="3.4676%" height="15" fill="rgb(216,154,8)" fg:x="3016" fg:w="440"/><text x="23.8886%" y="767.50">async_comp..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (440 samples, 3.47%)</title><rect x="23.7686%" y="741" width="3.4676%" height="15" fill="rgb(244,35,45)" fg:x="3016" fg:w="440"/><text x="23.8886%" y="751.50">core::slic..</text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (440 samples, 3.47%)</title><rect x="23.7686%" y="725" width="3.4676%" height="15" fill="rgb(251,115,12)" fg:x="3016" fg:w="440"/><text x="23.8886%" y="735.50">&lt;core::ops..</text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (440 samples, 3.47%)</title><rect x="23.7686%" y="709" width="3.4676%" height="15" fill="rgb(240,54,50)" fg:x="3016" fg:w="440"/><text x="23.8886%" y="719.50">&lt;core::ops..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (440 samples, 3.47%)</title><rect x="23.7686%" y="693" width="3.4676%" height="15" fill="rgb(233,84,52)" fg:x="3016" fg:w="440"/><text x="23.8886%" y="703.50">&lt;core::ops..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (440 samples, 3.47%)</title><rect x="23.7686%" y="677" width="3.4676%" height="15" fill="rgb(207,117,47)" fg:x="3016" fg:w="440"/><text x="23.8886%" y="687.50">core::ptr:..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (440 samples, 3.47%)</title><rect x="23.7686%" y="661" width="3.4676%" height="15" fill="rgb(249,43,39)" fg:x="3016" fg:w="440"/><text x="23.8886%" y="671.50">core::ptr:..</text></g><g><title>crc32fast::baseline::update_fast_16 (227 samples, 1.79%)</title><rect x="28.3474%" y="757" width="1.7890%" height="15" fill="rgb(209,38,44)" fg:x="3597" fg:w="227"/><text x="28.4674%" y="767.50">crc3..</text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (390 samples, 3.07%)</title><rect x="27.2362%" y="805" width="3.0735%" height="15" fill="rgb(236,212,23)" fg:x="3456" fg:w="390"/><text x="27.3562%" y="815.50">&lt;crc32fa..</text></g><g><title>crc32fast::Hasher::update (390 samples, 3.07%)</title><rect x="27.2362%" y="789" width="3.0735%" height="15" fill="rgb(242,79,21)" fg:x="3456" fg:w="390"/><text x="27.3562%" y="799.50">crc32fas..</text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (276 samples, 2.18%)</title><rect x="28.1346%" y="773" width="2.1751%" height="15" fill="rgb(211,96,35)" fg:x="3570" fg:w="276"/><text x="28.2546%" y="783.50">crc32..</text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (22 samples, 0.17%)</title><rect x="30.1363%" y="757" width="0.1734%" height="15" fill="rgb(253,215,40)" fg:x="3824" fg:w="22"/><text x="30.2563%" y="767.50"></text></g><g><title>&lt;async_compression::codec::gzip::decoder::GzipDecoder as async_compression::codec::Decode&gt;::decode (3,427 samples, 27.01%)</title><rect x="3.4755%" y="837" width="27.0076%" height="15" fill="rgb(211,81,21)" fg:x="441" fg:w="3427"/><text x="3.5955%" y="847.50">&lt;async_compression::codec::gzip::decoder::GzipDecoder as async_compression::codec::Decode&gt;::d..</text></g><g><title>async_compression::codec::gzip::decoder::GzipDecoder::process (3,427 samples, 27.01%)</title><rect x="3.4755%" y="821" width="27.0076%" height="15" fill="rgb(208,190,38)" fg:x="441" fg:w="3427"/><text x="3.5955%" y="831.50">async_compression::codec::gzip::decoder::GzipDecoder::process</text></g><g><title>flate2::crc::Crc::update (22 samples, 0.17%)</title><rect x="30.3097%" y="805" width="0.1734%" height="15" fill="rgb(235,213,38)" fg:x="3846" fg:w="22"/><text x="30.4297%" y="815.50"></text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::consume (1,285 samples, 10.13%)</title><rect x="30.4831%" y="837" width="10.1269%" height="15" fill="rgb(237,122,38)" fg:x="3868" fg:w="1285"/><text x="30.6031%" y="847.50">&lt;tokio::io::util::buf_reader::Buf..</text></g><g><title>async_compression::tokio::bufread::generic::decoder::Decoder&lt;R,D&gt;::do_poll_read (4,877 samples, 38.43%)</title><rect x="3.4755%" y="853" width="38.4349%" height="15" fill="rgb(244,218,35)" fg:x="441" fg:w="4877"/><text x="3.5955%" y="863.50">async_compression::tokio::bufread::generic::decoder::Decoder&lt;R,D&gt;::do_poll_read</text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (165 samples, 1.30%)</title><rect x="40.6100%" y="837" width="1.3003%" height="15" fill="rgb(240,68,47)" fg:x="5153" fg:w="165"/><text x="40.7300%" y="847.50">&lt;t..</text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.02%)</title><rect x="41.8946%" y="821" width="0.0158%" height="15" fill="rgb(210,16,53)" fg:x="5316" fg:w="2"/><text x="42.0146%" y="831.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (2 samples, 0.02%)</title><rect x="41.8946%" y="805" width="0.0158%" height="15" fill="rgb(235,124,12)" fg:x="5316" fg:w="2"/><text x="42.0146%" y="815.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (4,906 samples, 38.66%)</title><rect x="3.4755%" y="917" width="38.6634%" height="15" fill="rgb(224,169,11)" fg:x="441" fg:w="4906"/><text x="3.5955%" y="927.50">&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read</text></g><g><title>&lt;dads_gzip_thing::dec::GzDecoderAsync as tokio::io::async_read::AsyncRead&gt;::poll_read (4,906 samples, 38.66%)</title><rect x="3.4755%" y="901" width="38.6634%" height="15" fill="rgb(250,166,2)" fg:x="441" fg:w="4906"/><text x="3.5955%" y="911.50">&lt;dads_gzip_thing::dec::GzDecoderAsync as tokio::io::async_read::AsyncRead&gt;::poll_read</text></g><g><title>&lt;async_compression::tokio::bufread::GzipDecoder&lt;R&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (4,906 samples, 38.66%)</title><rect x="3.4755%" y="885" width="38.6634%" height="15" fill="rgb(242,216,29)" fg:x="441" fg:w="4906"/><text x="3.5955%" y="895.50">&lt;async_compression::tokio::bufread::GzipDecoder&lt;R&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read</text></g><g><title>&lt;async_compression::tokio::bufread::generic::decoder::Decoder&lt;R,D&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (4,906 samples, 38.66%)</title><rect x="3.4755%" y="869" width="38.6634%" height="15" fill="rgb(230,116,27)" fg:x="441" fg:w="4906"/><text x="3.5955%" y="879.50">&lt;async_compression::tokio::bufread::generic::decoder::Decoder&lt;R,D&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read</text></g><g><title>tokio::io::read_buf::ReadBuf::initialize_unfilled (29 samples, 0.23%)</title><rect x="41.9103%" y="853" width="0.2285%" height="15" fill="rgb(228,99,48)" fg:x="5318" fg:w="29"/><text x="42.0303%" y="863.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::initialize_unfilled_to (29 samples, 0.23%)</title><rect x="41.9103%" y="837" width="0.2285%" height="15" fill="rgb(253,11,6)" fg:x="5318" fg:w="29"/><text x="42.0303%" y="847.50"></text></g><g><title>tokio::io::read_buf::slice_to_uninit_mut (29 samples, 0.23%)</title><rect x="41.9103%" y="821" width="0.2285%" height="15" fill="rgb(247,143,39)" fg:x="5318" fg:w="29"/><text x="42.0303%" y="831.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::filled (647 samples, 5.10%)</title><rect x="42.1389%" y="917" width="5.0989%" height="15" fill="rgb(236,97,10)" fg:x="5347" fg:w="647"/><text x="42.2589%" y="927.50">tokio::io::read_..</text></g><g><title>tokio::io::read_buf::slice_assume_init (44 samples, 0.35%)</title><rect x="46.8910%" y="901" width="0.3468%" height="15" fill="rgb(233,208,19)" fg:x="5950" fg:w="44"/><text x="47.0110%" y="911.50"></text></g><g><title>&lt;tokio::io::util::read_int::ReadU8&lt;R&gt; as core::future::future::Future&gt;::poll (5,726 samples, 45.13%)</title><rect x="3.4755%" y="933" width="45.1257%" height="15" fill="rgb(216,164,2)" fg:x="441" fg:w="5726"/><text x="3.5955%" y="943.50">&lt;tokio::io::util::read_int::ReadU8&lt;R&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::io::read_buf::ReadBuf::new (173 samples, 1.36%)</title><rect x="47.2378%" y="917" width="1.3634%" height="15" fill="rgb(220,129,5)" fg:x="5994" fg:w="173"/><text x="47.3578%" y="927.50">to..</text></g><g><title>tokio::io::read_buf::slice_to_uninit_mut (27 samples, 0.21%)</title><rect x="48.3884%" y="901" width="0.2128%" height="15" fill="rgb(242,17,10)" fg:x="6140" fg:w="27"/><text x="48.5084%" y="911.50"></text></g><g><title>dads_gzip_thing::gzip::JsonLinesReadStream::next_line::{{closure}} (6,086 samples, 47.96%)</title><rect x="0.7172%" y="949" width="47.9628%" height="15" fill="rgb(242,107,0)" fg:x="91" fg:w="6086"/><text x="0.8372%" y="959.50">dads_gzip_thing::gzip::JsonLinesReadStream::next_line::{{closure}}</text></g><g><title>alloc::string::String::push (10 samples, 0.08%)</title><rect x="48.6012%" y="933" width="0.0788%" height="15" fill="rgb(251,28,31)" fg:x="6167" fg:w="10"/><text x="48.7212%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (10 samples, 0.08%)</title><rect x="48.6012%" y="917" width="0.0788%" height="15" fill="rgb(233,223,10)" fg:x="6167" fg:w="10"/><text x="48.7212%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.08%)</title><rect x="48.6012%" y="901" width="0.0788%" height="15" fill="rgb(215,21,27)" fg:x="6167" fg:w="10"/><text x="48.7212%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 0.08%)</title><rect x="48.6012%" y="885" width="0.0788%" height="15" fill="rgb(232,23,21)" fg:x="6167" fg:w="10"/><text x="48.7212%" y="895.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.04%)</title><rect x="48.6406%" y="869" width="0.0394%" height="15" fill="rgb(244,5,23)" fg:x="6172" fg:w="5"/><text x="48.7606%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.02%)</title><rect x="48.6563%" y="853" width="0.0236%" height="15" fill="rgb(226,81,46)" fg:x="6174" fg:w="3"/><text x="48.7763%" y="863.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.02%)</title><rect x="48.6563%" y="837" width="0.0236%" height="15" fill="rgb(247,70,30)" fg:x="6174" fg:w="3"/><text x="48.7763%" y="847.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.02%)</title><rect x="48.6563%" y="821" width="0.0236%" height="15" fill="rgb(212,68,19)" fg:x="6174" fg:w="3"/><text x="48.7763%" y="831.50"></text></g><g><title>__rdl_realloc (3 samples, 0.02%)</title><rect x="48.6563%" y="805" width="0.0236%" height="15" fill="rgb(240,187,13)" fg:x="6174" fg:w="3"/><text x="48.7763%" y="815.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.02%)</title><rect x="48.6563%" y="789" width="0.0236%" height="15" fill="rgb(223,113,26)" fg:x="6174" fg:w="3"/><text x="48.7763%" y="799.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (2 samples, 0.02%)</title><rect x="48.6878%" y="869" width="0.0158%" height="15" fill="rgb(206,192,2)" fg:x="6178" fg:w="2"/><text x="48.8078%" y="879.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (2 samples, 0.02%)</title><rect x="48.6878%" y="853" width="0.0158%" height="15" fill="rgb(241,108,4)" fg:x="6178" fg:w="2"/><text x="48.8078%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (2 samples, 0.02%)</title><rect x="48.6878%" y="837" width="0.0158%" height="15" fill="rgb(247,173,49)" fg:x="6178" fg:w="2"/><text x="48.8078%" y="847.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (2 samples, 0.02%)</title><rect x="48.6878%" y="821" width="0.0158%" height="15" fill="rgb(224,114,35)" fg:x="6178" fg:w="2"/><text x="48.8078%" y="831.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (2 samples, 0.02%)</title><rect x="48.6878%" y="805" width="0.0158%" height="15" fill="rgb(245,159,27)" fg:x="6178" fg:w="2"/><text x="48.8078%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (2 samples, 0.02%)</title><rect x="48.6878%" y="789" width="0.0158%" height="15" fill="rgb(245,172,44)" fg:x="6178" fg:w="2"/><text x="48.8078%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (2 samples, 0.02%)</title><rect x="48.6878%" y="773" width="0.0158%" height="15" fill="rgb(236,23,11)" fg:x="6178" fg:w="2"/><text x="48.8078%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="48.6878%" y="757" width="0.0158%" height="15" fill="rgb(205,117,38)" fg:x="6178" fg:w="2"/><text x="48.8078%" y="767.50"></text></g><g><title>tokio::sync::batch_semaphore::Waiter::assign_permits (11 samples, 0.09%)</title><rect x="48.7036%" y="869" width="0.0867%" height="15" fill="rgb(237,72,25)" fg:x="6180" fg:w="11"/><text x="48.8236%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (11 samples, 0.09%)</title><rect x="48.7036%" y="853" width="0.0867%" height="15" fill="rgb(244,70,9)" fg:x="6180" fg:w="11"/><text x="48.8236%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (11 samples, 0.09%)</title><rect x="48.7036%" y="837" width="0.0867%" height="15" fill="rgb(217,125,39)" fg:x="6180" fg:w="11"/><text x="48.8236%" y="847.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (14 samples, 0.11%)</title><rect x="48.6878%" y="901" width="0.1103%" height="15" fill="rgb(235,36,10)" fg:x="6178" fg:w="14"/><text x="48.8078%" y="911.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire (14 samples, 0.11%)</title><rect x="48.6878%" y="885" width="0.1103%" height="15" fill="rgb(251,123,47)" fg:x="6178" fg:w="14"/><text x="48.8078%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,102 samples, 48.09%)</title><rect x="0.7172%" y="965" width="48.0889%" height="15" fill="rgb(221,13,13)" fg:x="91" fg:w="6102"/><text x="0.8372%" y="975.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::lock::{{closure}} (16 samples, 0.13%)</title><rect x="48.6800%" y="949" width="0.1261%" height="15" fill="rgb(238,131,9)" fg:x="6177" fg:w="16"/><text x="48.8000%" y="959.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16 samples, 0.13%)</title><rect x="48.6800%" y="933" width="0.1261%" height="15" fill="rgb(211,50,8)" fg:x="6177" fg:w="16"/><text x="48.8000%" y="943.50"></text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::acquire::{{closure}} (16 samples, 0.13%)</title><rect x="48.6800%" y="917" width="0.1261%" height="15" fill="rgb(245,182,24)" fg:x="6177" fg:w="16"/><text x="48.8000%" y="927.50"></text></g><g><title>tokio::sync::batch_semaphore::Waiter::assign_permits (6 samples, 0.05%)</title><rect x="48.8061%" y="917" width="0.0473%" height="15" fill="rgb(242,14,37)" fg:x="6193" fg:w="6"/><text x="48.9261%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (6 samples, 0.05%)</title><rect x="48.8061%" y="901" width="0.0473%" height="15" fill="rgb(246,228,12)" fg:x="6193" fg:w="6"/><text x="48.9261%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.05%)</title><rect x="48.8061%" y="885" width="0.0473%" height="15" fill="rgb(213,55,15)" fg:x="6193" fg:w="6"/><text x="48.9261%" y="895.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked (4 samples, 0.03%)</title><rect x="48.8533%" y="773" width="0.0315%" height="15" fill="rgb(209,9,3)" fg:x="6199" fg:w="4"/><text x="48.9733%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (4 samples, 0.03%)</title><rect x="48.8533%" y="757" width="0.0315%" height="15" fill="rgb(230,59,30)" fg:x="6199" fg:w="4"/><text x="48.9733%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (4 samples, 0.03%)</title><rect x="48.8533%" y="741" width="0.0315%" height="15" fill="rgb(209,121,21)" fg:x="6199" fg:w="4"/><text x="48.9733%" y="751.50"></text></g><g><title>core::ptr::read (4 samples, 0.03%)</title><rect x="48.8533%" y="725" width="0.0315%" height="15" fill="rgb(220,109,13)" fg:x="6199" fg:w="4"/><text x="48.9733%" y="735.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (10 samples, 0.08%)</title><rect x="48.8533%" y="805" width="0.0788%" height="15" fill="rgb(232,18,1)" fg:x="6199" fg:w="10"/><text x="48.9733%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::{{closure}} (10 samples, 0.08%)</title><rect x="48.8533%" y="789" width="0.0788%" height="15" fill="rgb(215,41,42)" fg:x="6199" fg:w="10"/><text x="48.9733%" y="799.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::push (6 samples, 0.05%)</title><rect x="48.8849%" y="773" width="0.0473%" height="15" fill="rgb(224,123,36)" fg:x="6203" fg:w="6"/><text x="49.0049%" y="783.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (6 samples, 0.05%)</title><rect x="48.8849%" y="757" width="0.0473%" height="15" fill="rgb(240,125,3)" fg:x="6203" fg:w="6"/><text x="49.0049%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (6 samples, 0.05%)</title><rect x="48.8849%" y="741" width="0.0473%" height="15" fill="rgb(205,98,50)" fg:x="6203" fg:w="6"/><text x="49.0049%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (6 samples, 0.05%)</title><rect x="48.8849%" y="725" width="0.0473%" height="15" fill="rgb(205,185,37)" fg:x="6203" fg:w="6"/><text x="49.0049%" y="735.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (6 samples, 0.05%)</title><rect x="48.8849%" y="709" width="0.0473%" height="15" fill="rgb(238,207,15)" fg:x="6203" fg:w="6"/><text x="49.0049%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (6 samples, 0.05%)</title><rect x="48.8849%" y="693" width="0.0473%" height="15" fill="rgb(213,199,42)" fg:x="6203" fg:w="6"/><text x="49.0049%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (6 samples, 0.05%)</title><rect x="48.8849%" y="677" width="0.0473%" height="15" fill="rgb(235,201,11)" fg:x="6203" fg:w="6"/><text x="49.0049%" y="687.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (18 samples, 0.14%)</title><rect x="48.8061%" y="933" width="0.1419%" height="15" fill="rgb(207,46,11)" fg:x="6193" fg:w="18"/><text x="48.9261%" y="943.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (12 samples, 0.09%)</title><rect x="48.8533%" y="917" width="0.0946%" height="15" fill="rgb(241,35,35)" fg:x="6199" fg:w="12"/><text x="48.9733%" y="927.50"></text></g><g><title>core::task::wake::Waker::wake (12 samples, 0.09%)</title><rect x="48.8533%" y="901" width="0.0946%" height="15" fill="rgb(243,32,47)" fg:x="6199" fg:w="12"/><text x="48.9733%" y="911.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (12 samples, 0.09%)</title><rect x="48.8533%" y="885" width="0.0946%" height="15" fill="rgb(247,202,23)" fg:x="6199" fg:w="12"/><text x="48.9733%" y="895.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (12 samples, 0.09%)</title><rect x="48.8533%" y="869" width="0.0946%" height="15" fill="rgb(219,102,11)" fg:x="6199" fg:w="12"/><text x="48.9733%" y="879.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (12 samples, 0.09%)</title><rect x="48.8533%" y="853" width="0.0946%" height="15" fill="rgb(243,110,44)" fg:x="6199" fg:w="12"/><text x="48.9733%" y="863.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (12 samples, 0.09%)</title><rect x="48.8533%" y="837" width="0.0946%" height="15" fill="rgb(222,74,54)" fg:x="6199" fg:w="12"/><text x="48.9733%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (12 samples, 0.09%)</title><rect x="48.8533%" y="821" width="0.0946%" height="15" fill="rgb(216,99,12)" fg:x="6199" fg:w="12"/><text x="48.9733%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (2 samples, 0.02%)</title><rect x="48.9321%" y="805" width="0.0158%" height="15" fill="rgb(226,22,26)" fg:x="6209" fg:w="2"/><text x="49.0521%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (2 samples, 0.02%)</title><rect x="48.9321%" y="789" width="0.0158%" height="15" fill="rgb(217,163,10)" fg:x="6209" fg:w="2"/><text x="49.0521%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (2 samples, 0.02%)</title><rect x="48.9321%" y="773" width="0.0158%" height="15" fill="rgb(213,25,53)" fg:x="6209" fg:w="2"/><text x="49.0521%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_swap (2 samples, 0.02%)</title><rect x="48.9321%" y="757" width="0.0158%" height="15" fill="rgb(252,105,26)" fg:x="6209" fg:w="2"/><text x="49.0521%" y="767.50"></text></g><g><title>tokio::runtime::coop::budget (6,122 samples, 48.25%)</title><rect x="0.7093%" y="1077" width="48.2465%" height="15" fill="rgb(220,39,43)" fg:x="90" fg:w="6122"/><text x="0.8293%" y="1087.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (6,121 samples, 48.24%)</title><rect x="0.7172%" y="1061" width="48.2386%" height="15" fill="rgb(229,68,48)" fg:x="91" fg:w="6121"/><text x="0.8372%" y="1071.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (6,121 samples, 48.24%)</title><rect x="0.7172%" y="1045" width="48.2386%" height="15" fill="rgb(252,8,32)" fg:x="91" fg:w="6121"/><text x="0.8372%" y="1055.50">tokio::runtime::park::CachedParkThread::block_on::{{closure}}</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,121 samples, 48.24%)</title><rect x="0.7172%" y="1029" width="48.2386%" height="15" fill="rgb(223,20,43)" fg:x="91" fg:w="6121"/><text x="0.8372%" y="1039.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>dads_gzip_thing::main::{{closure}} (6,121 samples, 48.24%)</title><rect x="0.7172%" y="1013" width="48.2386%" height="15" fill="rgb(229,81,49)" fg:x="91" fg:w="6121"/><text x="0.8372%" y="1023.50">dads_gzip_thing::main::{{closure}}</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,121 samples, 48.24%)</title><rect x="0.7172%" y="997" width="48.2386%" height="15" fill="rgb(236,28,36)" fg:x="91" fg:w="6121"/><text x="0.8372%" y="1007.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>dads_gzip_thing::start::{{closure}} (6,121 samples, 48.24%)</title><rect x="0.7172%" y="981" width="48.2386%" height="15" fill="rgb(249,185,26)" fg:x="91" fg:w="6121"/><text x="0.8372%" y="991.50">dads_gzip_thing::start::{{closure}}</text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mutex::MutexGuard&lt;alloc::collections::vec_deque::VecDeque&lt;alloc::string::String&gt;&gt;&gt; (19 samples, 0.15%)</title><rect x="48.8061%" y="965" width="0.1497%" height="15" fill="rgb(249,174,33)" fg:x="6193" fg:w="19"/><text x="48.9261%" y="975.50"></text></g><g><title>&lt;tokio::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.15%)</title><rect x="48.8061%" y="949" width="0.1497%" height="15" fill="rgb(233,201,37)" fg:x="6193" fg:w="19"/><text x="48.9261%" y="959.50"></text></g><g><title>dads_gzip_thing (6,219 samples, 49.01%)</title><rect x="0.0000%" y="1429" width="49.0110%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="6219"/><text x="0.1200%" y="1439.50">dads_gzip_thing</text></g><g><title>_start (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1413" width="48.3017%" height="15" fill="rgb(250,127,30)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1423.50">_start</text></g><g><title>__libc_start_main_impl (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1397" width="48.3017%" height="15" fill="rgb(230,49,44)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1407.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1381" width="48.3017%" height="15" fill="rgb(229,67,23)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1391.50">__libc_start_call_main</text></g><g><title>main (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1365" width="48.3017%" height="15" fill="rgb(249,83,47)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1375.50">main</text></g><g><title>std::rt::lang_start_internal (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1349" width="48.3017%" height="15" fill="rgb(215,43,3)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1359.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1333" width="48.3017%" height="15" fill="rgb(238,154,13)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1343.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1317" width="48.3017%" height="15" fill="rgb(219,56,2)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1327.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1301" width="48.3017%" height="15" fill="rgb(233,0,4)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1311.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1285" width="48.3017%" height="15" fill="rgb(235,30,7)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1295.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1269" width="48.3017%" height="15" fill="rgb(250,79,13)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1279.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1253" width="48.3017%" height="15" fill="rgb(211,146,34)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1263.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1237" width="48.3017%" height="15" fill="rgb(228,22,38)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1247.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1221" width="48.3017%" height="15" fill="rgb(235,168,5)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1231.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1205" width="48.3017%" height="15" fill="rgb(221,155,16)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1215.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1189" width="48.3017%" height="15" fill="rgb(215,215,53)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1199.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1173" width="48.3017%" height="15" fill="rgb(223,4,10)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1183.50">core::ops::function::FnOnce::call_once</text></g><g><title>dads_gzip_thing::main (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1157" width="48.3017%" height="15" fill="rgb(234,103,6)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1167.50">dads_gzip_thing::main</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1141" width="48.3017%" height="15" fill="rgb(227,97,0)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1151.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1125" width="48.3017%" height="15" fill="rgb(234,150,53)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1135.50">tokio::runtime::scheduler::multi_thread::MultiThread::block_on</text></g><g><title>tokio::runtime::context::BlockingRegionGuard::block_on (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1109" width="48.3017%" height="15" fill="rgb(228,201,54)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1119.50">tokio::runtime::context::BlockingRegionGuard::block_on</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (6,129 samples, 48.30%)</title><rect x="0.7093%" y="1093" width="48.3017%" height="15" fill="rgb(222,22,37)" fg:x="90" fg:w="6129"/><text x="0.8293%" y="1103.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (7 samples, 0.06%)</title><rect x="48.9558%" y="1077" width="0.0552%" height="15" fill="rgb(237,53,32)" fg:x="6212" fg:w="7"/><text x="49.0758%" y="1087.50"></text></g><g><title>std::sync::condvar::Condvar::wait (3 samples, 0.02%)</title><rect x="48.9873%" y="1061" width="0.0236%" height="15" fill="rgb(233,25,53)" fg:x="6216" fg:w="3"/><text x="49.1073%" y="1071.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (3 samples, 0.02%)</title><rect x="48.9873%" y="1045" width="0.0236%" height="15" fill="rgb(210,40,34)" fg:x="6216" fg:w="3"/><text x="49.1073%" y="1055.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (3 samples, 0.02%)</title><rect x="48.9873%" y="1029" width="0.0236%" height="15" fill="rgb(241,220,44)" fg:x="6216" fg:w="3"/><text x="49.1073%" y="1039.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (3 samples, 0.02%)</title><rect x="48.9873%" y="1013" width="0.0236%" height="15" fill="rgb(235,28,35)" fg:x="6216" fg:w="3"/><text x="49.1073%" y="1023.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (3 samples, 0.02%)</title><rect x="48.9873%" y="997" width="0.0236%" height="15" fill="rgb(210,56,17)" fg:x="6216" fg:w="3"/><text x="49.1073%" y="1007.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (3 samples, 0.02%)</title><rect x="48.9873%" y="981" width="0.0236%" height="15" fill="rgb(224,130,29)" fg:x="6216" fg:w="3"/><text x="49.1073%" y="991.50"></text></g><g><title>core::sync::atomic::atomic_swap (3 samples, 0.02%)</title><rect x="48.9873%" y="965" width="0.0236%" height="15" fill="rgb(235,212,8)" fg:x="6216" fg:w="3"/><text x="49.1073%" y="975.50"></text></g><g><title>__GI___call_tls_dtors (5 samples, 0.04%)</title><rect x="49.0110%" y="1381" width="0.0394%" height="15" fill="rgb(223,33,50)" fg:x="6219" fg:w="5"/><text x="49.1310%" y="1391.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::new (3 samples, 0.02%)</title><rect x="49.0898%" y="1157" width="0.0236%" height="15" fill="rgb(219,149,13)" fg:x="6229" fg:w="3"/><text x="49.2098%" y="1167.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::create (3 samples, 0.02%)</title><rect x="49.0898%" y="1141" width="0.0236%" height="15" fill="rgb(250,156,29)" fg:x="6229" fg:w="3"/><text x="49.2098%" y="1151.50"></text></g><g><title>tokio::util::rand::RngSeedGenerator::next_seed (2 samples, 0.02%)</title><rect x="49.0976%" y="1125" width="0.0158%" height="15" fill="rgb(216,193,19)" fg:x="6230" fg:w="2"/><text x="49.2176%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::util::rand::FastRand&gt;&gt; (2 samples, 0.02%)</title><rect x="49.0976%" y="1109" width="0.0158%" height="15" fill="rgb(216,135,14)" fg:x="6230" fg:w="2"/><text x="49.2176%" y="1119.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="49.0976%" y="1093" width="0.0158%" height="15" fill="rgb(241,47,5)" fg:x="6230" fg:w="2"/><text x="49.2176%" y="1103.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (2 samples, 0.02%)</title><rect x="49.0976%" y="1077" width="0.0158%" height="15" fill="rgb(233,42,35)" fg:x="6230" fg:w="2"/><text x="49.2176%" y="1087.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (2 samples, 0.02%)</title><rect x="49.0976%" y="1061" width="0.0158%" height="15" fill="rgb(231,13,6)" fg:x="6230" fg:w="2"/><text x="49.2176%" y="1071.50"></text></g><g><title>tokio::runtime::builder::Builder::build (10 samples, 0.08%)</title><rect x="49.0819%" y="1189" width="0.0788%" height="15" fill="rgb(207,181,40)" fg:x="6228" fg:w="10"/><text x="49.2019%" y="1199.50"></text></g><g><title>tokio::runtime::builder::Builder::build_threaded_runtime (10 samples, 0.08%)</title><rect x="49.0819%" y="1173" width="0.0788%" height="15" fill="rgb(254,173,49)" fg:x="6228" fg:w="10"/><text x="49.2019%" y="1183.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (6 samples, 0.05%)</title><rect x="49.1134%" y="1157" width="0.0473%" height="15" fill="rgb(221,1,38)" fg:x="6232" fg:w="6"/><text x="49.2334%" y="1167.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (6 samples, 0.05%)</title><rect x="49.1134%" y="1141" width="0.0473%" height="15" fill="rgb(206,124,46)" fg:x="6232" fg:w="6"/><text x="49.2334%" y="1151.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn_blocking (6 samples, 0.05%)</title><rect x="49.1134%" y="1125" width="0.0473%" height="15" fill="rgb(249,21,11)" fg:x="6232" fg:w="6"/><text x="49.2334%" y="1135.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (6 samples, 0.05%)</title><rect x="49.1134%" y="1109" width="0.0473%" height="15" fill="rgb(222,201,40)" fg:x="6232" fg:w="6"/><text x="49.2334%" y="1119.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (6 samples, 0.05%)</title><rect x="49.1134%" y="1093" width="0.0473%" height="15" fill="rgb(235,61,29)" fg:x="6232" fg:w="6"/><text x="49.2334%" y="1103.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (6 samples, 0.05%)</title><rect x="49.1134%" y="1077" width="0.0473%" height="15" fill="rgb(219,207,3)" fg:x="6232" fg:w="6"/><text x="49.2334%" y="1087.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread (3 samples, 0.02%)</title><rect x="49.1370%" y="1061" width="0.0236%" height="15" fill="rgb(222,56,46)" fg:x="6235" fg:w="3"/><text x="49.2570%" y="1071.50"></text></g><g><title>std::thread::Builder::spawn (3 samples, 0.02%)</title><rect x="49.1370%" y="1045" width="0.0236%" height="15" fill="rgb(239,76,54)" fg:x="6235" fg:w="3"/><text x="49.2570%" y="1055.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (3 samples, 0.02%)</title><rect x="49.1370%" y="1029" width="0.0236%" height="15" fill="rgb(231,124,27)" fg:x="6235" fg:w="3"/><text x="49.2570%" y="1039.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (2 samples, 0.02%)</title><rect x="49.1449%" y="1013" width="0.0158%" height="15" fill="rgb(249,195,6)" fg:x="6236" fg:w="2"/><text x="49.2649%" y="1023.50"></text></g><g><title>flate2::gz::read::GzEncoder&lt;R&gt;::new (7 samples, 0.06%)</title><rect x="49.1607%" y="1045" width="0.0552%" height="15" fill="rgb(237,174,47)" fg:x="6238" fg:w="7"/><text x="49.2807%" y="1055.50"></text></g><g><title>flate2::gz::GzBuilder::read (7 samples, 0.06%)</title><rect x="49.1607%" y="1029" width="0.0552%" height="15" fill="rgb(206,201,31)" fg:x="6238" fg:w="7"/><text x="49.2807%" y="1039.50"></text></g><g><title>flate2::gz::GzBuilder::buf_read (7 samples, 0.06%)</title><rect x="49.1607%" y="1013" width="0.0552%" height="15" fill="rgb(231,57,52)" fg:x="6238" fg:w="7"/><text x="49.2807%" y="1023.50"></text></g><g><title>flate2::gz::bufread::gz_encoder (7 samples, 0.06%)</title><rect x="49.1607%" y="997" width="0.0552%" height="15" fill="rgb(248,177,22)" fg:x="6238" fg:w="7"/><text x="49.2807%" y="1007.50"></text></g><g><title>flate2::deflate::bufread::DeflateEncoder&lt;R&gt;::new (7 samples, 0.06%)</title><rect x="49.1607%" y="981" width="0.0552%" height="15" fill="rgb(215,211,37)" fg:x="6238" fg:w="7"/><text x="49.2807%" y="991.50"></text></g><g><title>flate2::mem::Compress::new (7 samples, 0.06%)</title><rect x="49.1607%" y="965" width="0.0552%" height="15" fill="rgb(241,128,51)" fg:x="6238" fg:w="7"/><text x="49.2807%" y="975.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::make (7 samples, 0.06%)</title><rect x="49.1607%" y="949" width="0.0552%" height="15" fill="rgb(227,165,31)" fg:x="6238" fg:w="7"/><text x="49.2807%" y="959.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (7 samples, 0.06%)</title><rect x="49.1607%" y="933" width="0.0552%" height="15" fill="rgb(228,167,24)" fg:x="6238" fg:w="7"/><text x="49.2807%" y="943.50"></text></g><g><title>alloc::alloc::exchange_malloc (7 samples, 0.06%)</title><rect x="49.1607%" y="917" width="0.0552%" height="15" fill="rgb(228,143,12)" fg:x="6238" fg:w="7"/><text x="49.2807%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.06%)</title><rect x="49.1607%" y="901" width="0.0552%" height="15" fill="rgb(249,149,8)" fg:x="6238" fg:w="7"/><text x="49.2807%" y="911.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.06%)</title><rect x="49.1607%" y="885" width="0.0552%" height="15" fill="rgb(243,35,44)" fg:x="6238" fg:w="7"/><text x="49.2807%" y="895.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.06%)</title><rect x="49.1607%" y="869" width="0.0552%" height="15" fill="rgb(246,89,9)" fg:x="6238" fg:w="7"/><text x="49.2807%" y="879.50"></text></g><g><title>__rust_probestack (5 samples, 0.04%)</title><rect x="49.1765%" y="853" width="0.0394%" height="15" fill="rgb(233,213,13)" fg:x="6240" fg:w="5"/><text x="49.2965%" y="863.50"></text></g><g><title>&lt;dads_gzip_thing::enc::GzEncoderAsync as core::ops::drop::Drop&gt;::drop::{{closure}}::{{closure}} (19 samples, 0.15%)</title><rect x="49.0740%" y="1205" width="0.1497%" height="15" fill="rgb(233,141,41)" fg:x="6227" fg:w="19"/><text x="49.1940%" y="1215.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (8 samples, 0.06%)</title><rect x="49.1607%" y="1189" width="0.0630%" height="15" fill="rgb(239,167,4)" fg:x="6238" fg:w="8"/><text x="49.2807%" y="1199.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (8 samples, 0.06%)</title><rect x="49.1607%" y="1173" width="0.0630%" height="15" fill="rgb(209,217,16)" fg:x="6238" fg:w="8"/><text x="49.2807%" y="1183.50"></text></g><g><title>tokio::runtime::context::BlockingRegionGuard::block_on (8 samples, 0.06%)</title><rect x="49.1607%" y="1157" width="0.0630%" height="15" fill="rgb(219,88,35)" fg:x="6238" fg:w="8"/><text x="49.2807%" y="1167.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (8 samples, 0.06%)</title><rect x="49.1607%" y="1141" width="0.0630%" height="15" fill="rgb(220,193,23)" fg:x="6238" fg:w="8"/><text x="49.2807%" y="1151.50"></text></g><g><title>tokio::runtime::coop::budget (8 samples, 0.06%)</title><rect x="49.1607%" y="1125" width="0.0630%" height="15" fill="rgb(230,90,52)" fg:x="6238" fg:w="8"/><text x="49.2807%" y="1135.50"></text></g><g><title>tokio::runtime::coop::with_budget (8 samples, 0.06%)</title><rect x="49.1607%" y="1109" width="0.0630%" height="15" fill="rgb(252,106,19)" fg:x="6238" fg:w="8"/><text x="49.2807%" y="1119.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (8 samples, 0.06%)</title><rect x="49.1607%" y="1093" width="0.0630%" height="15" fill="rgb(206,74,20)" fg:x="6238" fg:w="8"/><text x="49.2807%" y="1103.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 0.06%)</title><rect x="49.1607%" y="1077" width="0.0630%" height="15" fill="rgb(230,138,44)" fg:x="6238" fg:w="8"/><text x="49.2807%" y="1087.50"></text></g><g><title>dads_gzip_thing::enc::GzEncoderAsync::flush::{{closure}} (8 samples, 0.06%)</title><rect x="49.1607%" y="1061" width="0.0630%" height="15" fill="rgb(235,182,43)" fg:x="6238" fg:w="8"/><text x="49.2807%" y="1071.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (2 samples, 0.02%)</title><rect x="49.2316%" y="1173" width="0.0158%" height="15" fill="rgb(242,16,51)" fg:x="6247" fg:w="2"/><text x="49.3516%" y="1183.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_empty (2 samples, 0.02%)</title><rect x="49.2316%" y="1157" width="0.0158%" height="15" fill="rgb(248,9,4)" fg:x="6247" fg:w="2"/><text x="49.3516%" y="1167.50"></text></g><g><title>std::sys::unix::futex::futex_wait (4 samples, 0.03%)</title><rect x="49.2789%" y="1109" width="0.0315%" height="15" fill="rgb(210,31,22)" fg:x="6253" fg:w="4"/><text x="49.3989%" y="1119.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (10 samples, 0.08%)</title><rect x="49.2553%" y="1173" width="0.0788%" height="15" fill="rgb(239,54,39)" fg:x="6250" fg:w="10"/><text x="49.3753%" y="1183.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (9 samples, 0.07%)</title><rect x="49.2631%" y="1157" width="0.0709%" height="15" fill="rgb(230,99,41)" fg:x="6251" fg:w="9"/><text x="49.3831%" y="1167.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_timeout (7 samples, 0.06%)</title><rect x="49.2789%" y="1141" width="0.0552%" height="15" fill="rgb(253,106,12)" fg:x="6253" fg:w="7"/><text x="49.3989%" y="1151.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (7 samples, 0.06%)</title><rect x="49.2789%" y="1125" width="0.0552%" height="15" fill="rgb(213,46,41)" fg:x="6253" fg:w="7"/><text x="49.3989%" y="1135.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (3 samples, 0.02%)</title><rect x="49.3104%" y="1109" width="0.0236%" height="15" fill="rgb(215,133,35)" fg:x="6257" fg:w="3"/><text x="49.4304%" y="1119.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (2 samples, 0.02%)</title><rect x="49.3183%" y="1093" width="0.0158%" height="15" fill="rgb(213,28,5)" fg:x="6258" fg:w="2"/><text x="49.4383%" y="1103.50"></text></g><g><title>core::hint::spin_loop (28 samples, 0.22%)</title><rect x="49.3341%" y="1077" width="0.2207%" height="15" fill="rgb(215,77,49)" fg:x="6260" fg:w="28"/><text x="49.4541%" y="1087.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (28 samples, 0.22%)</title><rect x="49.3341%" y="1061" width="0.2207%" height="15" fill="rgb(248,100,22)" fg:x="6260" fg:w="28"/><text x="49.4541%" y="1071.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (58 samples, 0.46%)</title><rect x="49.3341%" y="1173" width="0.4571%" height="15" fill="rgb(208,67,9)" fg:x="6260" fg:w="58"/><text x="49.4541%" y="1183.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (58 samples, 0.46%)</title><rect x="49.3341%" y="1157" width="0.4571%" height="15" fill="rgb(219,133,21)" fg:x="6260" fg:w="58"/><text x="49.4541%" y="1167.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (58 samples, 0.46%)</title><rect x="49.3341%" y="1141" width="0.4571%" height="15" fill="rgb(246,46,29)" fg:x="6260" fg:w="58"/><text x="49.4541%" y="1151.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (58 samples, 0.46%)</title><rect x="49.3341%" y="1125" width="0.4571%" height="15" fill="rgb(246,185,52)" fg:x="6260" fg:w="58"/><text x="49.4541%" y="1135.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (58 samples, 0.46%)</title><rect x="49.3341%" y="1109" width="0.4571%" height="15" fill="rgb(252,136,11)" fg:x="6260" fg:w="58"/><text x="49.4541%" y="1119.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (58 samples, 0.46%)</title><rect x="49.3341%" y="1093" width="0.4571%" height="15" fill="rgb(219,138,53)" fg:x="6260" fg:w="58"/><text x="49.4541%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (30 samples, 0.24%)</title><rect x="49.5547%" y="1077" width="0.2364%" height="15" fill="rgb(211,51,23)" fg:x="6288" fg:w="30"/><text x="49.6747%" y="1087.50"></text></g><g><title>core::sync::atomic::atomic_load (30 samples, 0.24%)</title><rect x="49.5547%" y="1061" width="0.2364%" height="15" fill="rgb(247,221,28)" fg:x="6288" fg:w="30"/><text x="49.6747%" y="1071.50"></text></g><g><title>tokio::runtime::blocking::pool::SpawnerMetrics::dec_queue_depth (2 samples, 0.02%)</title><rect x="49.7912%" y="1173" width="0.0158%" height="15" fill="rgb(251,222,45)" fg:x="6318" fg:w="2"/><text x="49.9112%" y="1183.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="49.7912%" y="1157" width="0.0158%" height="15" fill="rgb(217,162,53)" fg:x="6318" fg:w="2"/><text x="49.9112%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="49.7912%" y="1141" width="0.0158%" height="15" fill="rgb(229,93,14)" fg:x="6318" fg:w="2"/><text x="49.9112%" y="1151.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::shutdown_core (2 samples, 0.02%)</title><rect x="50.0355%" y="853" width="0.0158%" height="15" fill="rgb(209,67,49)" fg:x="6349" fg:w="2"/><text x="50.1555%" y="863.50"></text></g><g><title>tokio::loom::std::thread::yield_now (2 samples, 0.02%)</title><rect x="50.1379%" y="789" width="0.0158%" height="15" fill="rgb(213,87,29)" fg:x="6362" fg:w="2"/><text x="50.2579%" y="799.50"></text></g><g><title>core::hint::spin_loop (2 samples, 0.02%)</title><rect x="50.1379%" y="773" width="0.0158%" height="15" fill="rgb(205,151,52)" fg:x="6362" fg:w="2"/><text x="50.2579%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (2 samples, 0.02%)</title><rect x="50.1379%" y="757" width="0.0158%" height="15" fill="rgb(253,215,39)" fg:x="6362" fg:w="2"/><text x="50.2579%" y="767.50"></text></g><g><title>std::sys::unix::futex::futex_wait (4 samples, 0.03%)</title><rect x="50.1694%" y="709" width="0.0315%" height="15" fill="rgb(221,220,41)" fg:x="6366" fg:w="4"/><text x="50.2894%" y="719.50"></text></g><g><title>std::sync::condvar::Condvar::wait (15 samples, 0.12%)</title><rect x="50.1616%" y="773" width="0.1182%" height="15" fill="rgb(218,133,21)" fg:x="6365" fg:w="15"/><text x="50.2816%" y="783.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (15 samples, 0.12%)</title><rect x="50.1616%" y="757" width="0.1182%" height="15" fill="rgb(221,193,43)" fg:x="6365" fg:w="15"/><text x="50.2816%" y="767.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (14 samples, 0.11%)</title><rect x="50.1694%" y="741" width="0.1103%" height="15" fill="rgb(240,128,52)" fg:x="6366" fg:w="14"/><text x="50.2894%" y="751.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (14 samples, 0.11%)</title><rect x="50.1694%" y="725" width="0.1103%" height="15" fill="rgb(253,114,12)" fg:x="6366" fg:w="14"/><text x="50.2894%" y="735.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (10 samples, 0.08%)</title><rect x="50.2010%" y="709" width="0.0788%" height="15" fill="rgb(215,223,47)" fg:x="6370" fg:w="10"/><text x="50.3210%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (6 samples, 0.05%)</title><rect x="50.2325%" y="693" width="0.0473%" height="15" fill="rgb(248,225,23)" fg:x="6374" fg:w="6"/><text x="50.3525%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (6 samples, 0.05%)</title><rect x="50.2325%" y="677" width="0.0473%" height="15" fill="rgb(250,108,0)" fg:x="6374" fg:w="6"/><text x="50.3525%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (43 samples, 0.34%)</title><rect x="50.0906%" y="821" width="0.3389%" height="15" fill="rgb(228,208,7)" fg:x="6356" fg:w="43"/><text x="50.2106%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (43 samples, 0.34%)</title><rect x="50.0906%" y="805" width="0.3389%" height="15" fill="rgb(244,45,10)" fg:x="6356" fg:w="43"/><text x="50.2106%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (35 samples, 0.28%)</title><rect x="50.1537%" y="789" width="0.2758%" height="15" fill="rgb(207,125,25)" fg:x="6364" fg:w="35"/><text x="50.2737%" y="799.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (19 samples, 0.15%)</title><rect x="50.2798%" y="773" width="0.1497%" height="15" fill="rgb(210,195,18)" fg:x="6380" fg:w="19"/><text x="50.3998%" y="783.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (19 samples, 0.15%)</title><rect x="50.2798%" y="757" width="0.1497%" height="15" fill="rgb(249,80,12)" fg:x="6380" fg:w="19"/><text x="50.3998%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (19 samples, 0.15%)</title><rect x="50.2798%" y="741" width="0.1497%" height="15" fill="rgb(221,65,9)" fg:x="6380" fg:w="19"/><text x="50.3998%" y="751.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (19 samples, 0.15%)</title><rect x="50.2798%" y="725" width="0.1497%" height="15" fill="rgb(235,49,36)" fg:x="6380" fg:w="19"/><text x="50.3998%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (19 samples, 0.15%)</title><rect x="50.2798%" y="709" width="0.1497%" height="15" fill="rgb(225,32,20)" fg:x="6380" fg:w="19"/><text x="50.3998%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.15%)</title><rect x="50.2798%" y="693" width="0.1497%" height="15" fill="rgb(215,141,46)" fg:x="6380" fg:w="19"/><text x="50.3998%" y="703.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (2 samples, 0.02%)</title><rect x="50.4295%" y="757" width="0.0158%" height="15" fill="rgb(250,160,47)" fg:x="6399" fg:w="2"/><text x="50.5495%" y="767.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="50.4295%" y="741" width="0.0158%" height="15" fill="rgb(216,222,40)" fg:x="6399" fg:w="2"/><text x="50.5495%" y="751.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="50.4295%" y="725" width="0.0158%" height="15" fill="rgb(234,217,39)" fg:x="6399" fg:w="2"/><text x="50.5495%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.02%)</title><rect x="50.4295%" y="709" width="0.0158%" height="15" fill="rgb(207,178,40)" fg:x="6399" fg:w="2"/><text x="50.5495%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (54 samples, 0.43%)</title><rect x="50.0670%" y="837" width="0.4256%" height="15" fill="rgb(221,136,13)" fg:x="6353" fg:w="54"/><text x="50.1870%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::wake_deferred_tasks (8 samples, 0.06%)</title><rect x="50.4295%" y="821" width="0.0630%" height="15" fill="rgb(249,199,10)" fg:x="6399" fg:w="8"/><text x="50.5495%" y="831.50"></text></g><g><title>tokio::runtime::context::with_defer (8 samples, 0.06%)</title><rect x="50.4295%" y="805" width="0.0630%" height="15" fill="rgb(249,222,13)" fg:x="6399" fg:w="8"/><text x="50.5495%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (8 samples, 0.06%)</title><rect x="50.4295%" y="789" width="0.0630%" height="15" fill="rgb(244,185,38)" fg:x="6399" fg:w="8"/><text x="50.5495%" y="799.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (8 samples, 0.06%)</title><rect x="50.4295%" y="773" width="0.0630%" height="15" fill="rgb(236,202,9)" fg:x="6399" fg:w="8"/><text x="50.5495%" y="783.50"></text></g><g><title>tokio::runtime::context::with_defer::{{closure}} (6 samples, 0.05%)</title><rect x="50.4453%" y="757" width="0.0473%" height="15" fill="rgb(250,229,37)" fg:x="6401" fg:w="6"/><text x="50.5653%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;core::option::Option&lt;tokio::runtime::defer::Defer&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="50.4768%" y="741" width="0.0158%" height="15" fill="rgb(206,174,23)" fg:x="6405" fg:w="2"/><text x="50.5968%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (2 samples, 0.02%)</title><rect x="50.4768%" y="725" width="0.0158%" height="15" fill="rgb(211,33,43)" fg:x="6405" fg:w="2"/><text x="50.5968%" y="735.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="50.4768%" y="709" width="0.0158%" height="15" fill="rgb(245,58,50)" fg:x="6405" fg:w="2"/><text x="50.5968%" y="719.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="50.4768%" y="693" width="0.0158%" height="15" fill="rgb(244,68,36)" fg:x="6405" fg:w="2"/><text x="50.5968%" y="703.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (14 samples, 0.11%)</title><rect x="50.5083%" y="805" width="0.1103%" height="15" fill="rgb(232,229,15)" fg:x="6409" fg:w="14"/><text x="50.6283%" y="815.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (14 samples, 0.11%)</title><rect x="50.5083%" y="789" width="0.1103%" height="15" fill="rgb(254,30,23)" fg:x="6409" fg:w="14"/><text x="50.6283%" y="799.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (14 samples, 0.11%)</title><rect x="50.5083%" y="773" width="0.1103%" height="15" fill="rgb(235,160,14)" fg:x="6409" fg:w="14"/><text x="50.6283%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_parked (16 samples, 0.13%)</title><rect x="50.5004%" y="837" width="0.1261%" height="15" fill="rgb(212,155,44)" fg:x="6408" fg:w="16"/><text x="50.6204%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::is_parked (16 samples, 0.13%)</title><rect x="50.5004%" y="821" width="0.1261%" height="15" fill="rgb(226,2,50)" fg:x="6408" fg:w="16"/><text x="50.6204%" y="831.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (2 samples, 0.02%)</title><rect x="50.6265%" y="805" width="0.0158%" height="15" fill="rgb(234,177,6)" fg:x="6424" fg:w="2"/><text x="50.7465%" y="815.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (2 samples, 0.02%)</title><rect x="50.6265%" y="789" width="0.0158%" height="15" fill="rgb(217,24,9)" fg:x="6424" fg:w="2"/><text x="50.7465%" y="799.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (2 samples, 0.02%)</title><rect x="50.6265%" y="773" width="0.0158%" height="15" fill="rgb(220,13,46)" fg:x="6424" fg:w="2"/><text x="50.7465%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (2 samples, 0.02%)</title><rect x="50.6265%" y="757" width="0.0158%" height="15" fill="rgb(239,221,27)" fg:x="6424" fg:w="2"/><text x="50.7465%" y="767.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (3 samples, 0.02%)</title><rect x="50.6265%" y="821" width="0.0236%" height="15" fill="rgb(222,198,25)" fg:x="6424" fg:w="3"/><text x="50.7465%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (77 samples, 0.61%)</title><rect x="50.0512%" y="853" width="0.6068%" height="15" fill="rgb(211,99,13)" fg:x="6351" fg:w="77"/><text x="50.1712%" y="863.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_parked (4 samples, 0.03%)</title><rect x="50.6265%" y="837" width="0.0315%" height="15" fill="rgb(232,111,31)" fg:x="6424" fg:w="4"/><text x="50.7465%" y="847.50"></text></g><g><title>tokio::runtime::coop::has_budget_remaining (10 samples, 0.08%)</title><rect x="50.7605%" y="789" width="0.0788%" height="15" fill="rgb(245,82,37)" fg:x="6441" fg:w="10"/><text x="50.8805%" y="799.50"></text></g><g><title>tokio::runtime::context::budget (10 samples, 0.08%)</title><rect x="50.7605%" y="773" width="0.0788%" height="15" fill="rgb(227,149,46)" fg:x="6441" fg:w="10"/><text x="50.8805%" y="783.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10 samples, 0.08%)</title><rect x="50.7605%" y="757" width="0.0788%" height="15" fill="rgb(218,36,50)" fg:x="6441" fg:w="10"/><text x="50.8805%" y="767.50"></text></g><g><title>tokio::runtime::context::budget::{{closure}} (10 samples, 0.08%)</title><rect x="50.7605%" y="741" width="0.0788%" height="15" fill="rgb(226,80,48)" fg:x="6441" fg:w="10"/><text x="50.8805%" y="751.50"></text></g><g><title>tokio::runtime::coop::has_budget_remaining::{{closure}} (10 samples, 0.08%)</title><rect x="50.7605%" y="725" width="0.0788%" height="15" fill="rgb(238,224,15)" fg:x="6441" fg:w="10"/><text x="50.8805%" y="735.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (10 samples, 0.08%)</title><rect x="50.7605%" y="709" width="0.0788%" height="15" fill="rgb(241,136,10)" fg:x="6441" fg:w="10"/><text x="50.8805%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (6 samples, 0.05%)</title><rect x="50.9654%" y="677" width="0.0473%" height="15" fill="rgb(208,32,45)" fg:x="6467" fg:w="6"/><text x="51.0854%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (6 samples, 0.05%)</title><rect x="50.9654%" y="661" width="0.0473%" height="15" fill="rgb(207,135,9)" fg:x="6467" fg:w="6"/><text x="51.0854%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (5 samples, 0.04%)</title><rect x="50.9733%" y="645" width="0.0394%" height="15" fill="rgb(206,86,44)" fg:x="6468" fg:w="5"/><text x="51.0933%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_swap (5 samples, 0.04%)</title><rect x="50.9733%" y="629" width="0.0394%" height="15" fill="rgb(245,177,15)" fg:x="6468" fg:w="5"/><text x="51.0933%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3 samples, 0.02%)</title><rect x="51.0127%" y="629" width="0.0236%" height="15" fill="rgb(206,64,50)" fg:x="6473" fg:w="3"/><text x="51.1327%" y="639.50"></text></g><g><title>core::ptr::read (3 samples, 0.02%)</title><rect x="51.0127%" y="613" width="0.0236%" height="15" fill="rgb(234,36,40)" fg:x="6473" fg:w="3"/><text x="51.1327%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (21 samples, 0.17%)</title><rect x="50.9575%" y="741" width="0.1655%" height="15" fill="rgb(213,64,8)" fg:x="6466" fg:w="21"/><text x="51.0775%" y="751.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (21 samples, 0.17%)</title><rect x="50.9575%" y="725" width="0.1655%" height="15" fill="rgb(210,75,36)" fg:x="6466" fg:w="21"/><text x="51.0775%" y="735.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (21 samples, 0.17%)</title><rect x="50.9575%" y="709" width="0.1655%" height="15" fill="rgb(229,88,21)" fg:x="6466" fg:w="21"/><text x="51.0775%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::{{closure}} (21 samples, 0.17%)</title><rect x="50.9575%" y="693" width="0.1655%" height="15" fill="rgb(252,204,47)" fg:x="6466" fg:w="21"/><text x="51.0775%" y="703.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (14 samples, 0.11%)</title><rect x="51.0127%" y="677" width="0.1103%" height="15" fill="rgb(208,77,27)" fg:x="6473" fg:w="14"/><text x="51.1327%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked (14 samples, 0.11%)</title><rect x="51.0127%" y="661" width="0.1103%" height="15" fill="rgb(221,76,26)" fg:x="6473" fg:w="14"/><text x="51.1327%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (14 samples, 0.11%)</title><rect x="51.0127%" y="645" width="0.1103%" height="15" fill="rgb(225,139,18)" fg:x="6473" fg:w="14"/><text x="51.1327%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (11 samples, 0.09%)</title><rect x="51.0363%" y="629" width="0.0867%" height="15" fill="rgb(230,137,11)" fg:x="6476" fg:w="11"/><text x="51.1563%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (9 samples, 0.07%)</title><rect x="51.0521%" y="613" width="0.0709%" height="15" fill="rgb(212,28,1)" fg:x="6478" fg:w="9"/><text x="51.1721%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_add (9 samples, 0.07%)</title><rect x="51.0521%" y="597" width="0.0709%" height="15" fill="rgb(248,164,17)" fg:x="6478" fg:w="9"/><text x="51.1721%" y="607.50"></text></g><g><title>&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (4 samples, 0.03%)</title><rect x="51.7220%" y="357" width="0.0315%" height="15" fill="rgb(222,171,42)" fg:x="6563" fg:w="4"/><text x="51.8420%" y="367.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_write (4 samples, 0.03%)</title><rect x="51.7220%" y="341" width="0.0315%" height="15" fill="rgb(243,84,45)" fg:x="6563" fg:w="4"/><text x="51.8420%" y="351.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (4 samples, 0.03%)</title><rect x="51.7220%" y="325" width="0.0315%" height="15" fill="rgb(252,49,23)" fg:x="6563" fg:w="4"/><text x="51.8420%" y="335.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::BufRead&gt;::consume (2 samples, 0.02%)</title><rect x="51.7614%" y="213" width="0.0158%" height="15" fill="rgb(215,19,7)" fg:x="6568" fg:w="2"/><text x="51.8814%" y="223.50"></text></g><g><title>&lt;crc32fast::Hasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="51.7614%" y="197" width="0.0158%" height="15" fill="rgb(238,81,41)" fg:x="6568" fg:w="2"/><text x="51.8814%" y="207.50"></text></g><g><title>crc32fast::Hasher::update (2 samples, 0.02%)</title><rect x="51.7614%" y="181" width="0.0158%" height="15" fill="rgb(210,199,37)" fg:x="6568" fg:w="2"/><text x="51.8814%" y="191.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (2 samples, 0.02%)</title><rect x="51.7614%" y="165" width="0.0158%" height="15" fill="rgb(244,192,49)" fg:x="6568" fg:w="2"/><text x="51.8814%" y="175.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (2 samples, 0.02%)</title><rect x="51.7614%" y="149" width="0.0158%" height="15" fill="rgb(226,211,11)" fg:x="6568" fg:w="2"/><text x="51.8814%" y="159.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (23 samples, 0.18%)</title><rect x="51.7771%" y="213" width="0.1813%" height="15" fill="rgb(236,162,54)" fg:x="6570" fg:w="23"/><text x="51.8971%" y="223.50"></text></g><g><title>&lt;flate2::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (23 samples, 0.18%)</title><rect x="51.7771%" y="197" width="0.1813%" height="15" fill="rgb(220,229,9)" fg:x="6570" fg:w="23"/><text x="51.8971%" y="207.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for alloc::collections::vec_deque::VecDeque&lt;u8,A&gt;&gt;::read (23 samples, 0.18%)</title><rect x="51.7771%" y="181" width="0.1813%" height="15" fill="rgb(250,87,22)" fg:x="6570" fg:w="23"/><text x="51.8971%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::drain::Drain&lt;u8&gt;&gt; (23 samples, 0.18%)</title><rect x="51.7771%" y="165" width="0.1813%" height="15" fill="rgb(239,43,17)" fg:x="6570" fg:w="23"/><text x="51.8971%" y="175.50"></text></g><g><title>&lt;alloc::collections::vec_deque::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.18%)</title><rect x="51.7771%" y="149" width="0.1813%" height="15" fill="rgb(231,177,25)" fg:x="6570" fg:w="23"/><text x="51.8971%" y="159.50"></text></g><g><title>&lt;alloc::collections::vec_deque::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.18%)</title><rect x="51.7771%" y="133" width="0.1813%" height="15" fill="rgb(219,179,1)" fg:x="6570" fg:w="23"/><text x="51.8971%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (14 samples, 0.11%)</title><rect x="51.8481%" y="117" width="0.1103%" height="15" fill="rgb(238,219,53)" fg:x="6579" fg:w="14"/><text x="51.9681%" y="127.50"></text></g><g><title>miniz_oxide::deflate::core::DictOxide::find_match (448 samples, 3.53%)</title><rect x="56.2929%" y="101" width="3.5306%" height="15" fill="rgb(232,167,36)" fg:x="7143" fg:w="448"/><text x="56.4129%" y="111.50">miniz_oxid..</text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::start_dynamic_block (4 samples, 0.03%)</title><rect x="59.8313%" y="69" width="0.0315%" height="15" fill="rgb(244,19,51)" fg:x="7592" fg:w="4"/><text x="59.9513%" y="79.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::optimize_table (4 samples, 0.03%)</title><rect x="59.8313%" y="53" width="0.0315%" height="15" fill="rgb(224,6,22)" fg:x="7592" fg:w="4"/><text x="59.9513%" y="63.50"></text></g><g><title>miniz_oxide::deflate::core::flush_block (24 samples, 0.19%)</title><rect x="59.8235%" y="101" width="0.1891%" height="15" fill="rgb(224,145,5)" fg:x="7591" fg:w="24"/><text x="59.9435%" y="111.50"></text></g><g><title>miniz_oxide::deflate::core::compress_block (23 samples, 0.18%)</title><rect x="59.8313%" y="85" width="0.1813%" height="15" fill="rgb(234,130,49)" fg:x="7592" fg:w="23"/><text x="59.9513%" y="95.50"></text></g><g><title>miniz_oxide::deflate::core::compress_lz_codes (19 samples, 0.15%)</title><rect x="59.8629%" y="69" width="0.1497%" height="15" fill="rgb(254,6,2)" fg:x="7596" fg:w="19"/><text x="59.9829%" y="79.50"></text></g><g><title>miniz_oxide::deflate::core::LZOxide::consume_flag (7 samples, 0.06%)</title><rect x="60.0757%" y="85" width="0.0552%" height="15" fill="rgb(208,96,46)" fg:x="7623" fg:w="7"/><text x="60.1957%" y="95.50"></text></g><g><title>miniz_oxide::deflate::core::compress_normal (1,047 samples, 8.25%)</title><rect x="51.9584%" y="117" width="8.2512%" height="15" fill="rgb(239,3,39)" fg:x="6593" fg:w="1047"/><text x="52.0784%" y="127.50">miniz_oxide::deflate::core:..</text></g><g><title>miniz_oxide::deflate::core::record_match (25 samples, 0.20%)</title><rect x="60.0126%" y="101" width="0.1970%" height="15" fill="rgb(233,210,1)" fg:x="7615" fg:w="25"/><text x="60.1326%" y="111.50"></text></g><g><title>miniz_oxide::deflate::core::LZOxide::write_code (10 samples, 0.08%)</title><rect x="60.1308%" y="85" width="0.0788%" height="15" fill="rgb(244,137,37)" fg:x="7630" fg:w="10"/><text x="60.2508%" y="95.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::calculate_minimum_redundancy (3 samples, 0.02%)</title><rect x="60.3909%" y="53" width="0.0236%" height="15" fill="rgb(240,136,2)" fg:x="7663" fg:w="3"/><text x="60.5109%" y="63.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::start_dynamic_block (29 samples, 0.23%)</title><rect x="60.2096%" y="85" width="0.2285%" height="15" fill="rgb(239,18,37)" fg:x="7640" fg:w="29"/><text x="60.3296%" y="95.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::optimize_table (8 samples, 0.06%)</title><rect x="60.3751%" y="69" width="0.0630%" height="15" fill="rgb(218,185,22)" fg:x="7661" fg:w="8"/><text x="60.4951%" y="79.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::radix_sort_symbols (3 samples, 0.02%)</title><rect x="60.4145%" y="53" width="0.0236%" height="15" fill="rgb(225,218,4)" fg:x="7666" fg:w="3"/><text x="60.5345%" y="63.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="60.4145%" y="37" width="0.0236%" height="15" fill="rgb(230,182,32)" fg:x="7666" fg:w="3"/><text x="60.5345%" y="47.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,150 samples, 9.06%)</title><rect x="51.7220%" y="421" width="9.0630%" height="15" fill="rgb(242,56,43)" fg:x="6563" fg:w="1150"/><text x="51.8420%" y="431.50">&lt;core::future::from_generator:..</text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStream::flush::{{closure}} (1,150 samples, 9.06%)</title><rect x="51.7220%" y="405" width="9.0630%" height="15" fill="rgb(233,99,24)" fg:x="6563" fg:w="1150"/><text x="51.8420%" y="415.50">dads_gzip_thing::gzip::JsonLin..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,150 samples, 9.06%)</title><rect x="51.7220%" y="389" width="9.0630%" height="15" fill="rgb(234,209,42)" fg:x="6563" fg:w="1150"/><text x="51.8420%" y="399.50">&lt;core::future::from_generator:..</text></g><g><title>dads_gzip_thing::enc::GzEncoderAsync::flush::{{closure}} (1,150 samples, 9.06%)</title><rect x="51.7220%" y="373" width="9.0630%" height="15" fill="rgb(227,7,12)" fg:x="6563" fg:w="1150"/><text x="51.8420%" y="383.50">dads_gzip_thing::enc::GzEncode..</text></g><g><title>std::io::Read::read_to_end (1,145 samples, 9.02%)</title><rect x="51.7614%" y="357" width="9.0236%" height="15" fill="rgb(245,203,43)" fg:x="6568" fg:w="1145"/><text x="51.8814%" y="367.50">std::io::Read::read_to_end</text></g><g><title>std::io::default_read_to_end (1,145 samples, 9.02%)</title><rect x="51.7614%" y="341" width="9.0236%" height="15" fill="rgb(238,205,33)" fg:x="6568" fg:w="1145"/><text x="51.8814%" y="351.50">std::io::default_read_to_end</text></g><g><title>std::io::Read::read_buf (1,145 samples, 9.02%)</title><rect x="51.7614%" y="325" width="9.0236%" height="15" fill="rgb(231,56,7)" fg:x="6568" fg:w="1145"/><text x="51.8814%" y="335.50">std::io::Read::read_buf</text></g><g><title>std::io::default_read_buf (1,145 samples, 9.02%)</title><rect x="51.7614%" y="309" width="9.0236%" height="15" fill="rgb(244,186,29)" fg:x="6568" fg:w="1145"/><text x="51.8814%" y="319.50">std::io::default_read_buf</text></g><g><title>std::io::Read::read_buf::{{closure}} (1,145 samples, 9.02%)</title><rect x="51.7614%" y="293" width="9.0236%" height="15" fill="rgb(234,111,31)" fg:x="6568" fg:w="1145"/><text x="51.8814%" y="303.50">std::io::Read::read_buf::{{cl..</text></g><g><title>&lt;flate2::gz::read::GzEncoder&lt;R&gt; as std::io::Read&gt;::read (1,145 samples, 9.02%)</title><rect x="51.7614%" y="277" width="9.0236%" height="15" fill="rgb(241,149,10)" fg:x="6568" fg:w="1145"/><text x="51.8814%" y="287.50">&lt;flate2::gz::read::GzEncoder&lt;..</text></g><g><title>&lt;flate2::gz::bufread::GzEncoder&lt;R&gt; as std::io::Read&gt;::read (1,145 samples, 9.02%)</title><rect x="51.7614%" y="261" width="9.0236%" height="15" fill="rgb(249,206,44)" fg:x="6568" fg:w="1145"/><text x="51.8814%" y="271.50">&lt;flate2::gz::bufread::GzEncod..</text></g><g><title>&lt;flate2::deflate::bufread::DeflateEncoder&lt;R&gt; as std::io::Read&gt;::read (1,145 samples, 9.02%)</title><rect x="51.7614%" y="245" width="9.0236%" height="15" fill="rgb(251,153,30)" fg:x="6568" fg:w="1145"/><text x="51.8814%" y="255.50">&lt;flate2::deflate::bufread::De..</text></g><g><title>flate2::zio::read (1,145 samples, 9.02%)</title><rect x="51.7614%" y="229" width="9.0236%" height="15" fill="rgb(239,152,38)" fg:x="6568" fg:w="1145"/><text x="51.8814%" y="239.50">flate2::zio::read</text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run (1,120 samples, 8.83%)</title><rect x="51.9584%" y="213" width="8.8265%" height="15" fill="rgb(249,139,47)" fg:x="6593" fg:w="1120"/><text x="52.0784%" y="223.50">&lt;flate2::mem::Compress as fla..</text></g><g><title>flate2::mem::Compress::compress (1,120 samples, 8.83%)</title><rect x="51.9584%" y="197" width="8.8265%" height="15" fill="rgb(244,64,35)" fg:x="6593" fg:w="1120"/><text x="52.0784%" y="207.50">flate2::mem::Compress::compre..</text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::compress (1,120 samples, 8.83%)</title><rect x="51.9584%" y="181" width="8.8265%" height="15" fill="rgb(216,46,15)" fg:x="6593" fg:w="1120"/><text x="52.0784%" y="191.50">&lt;flate2::ffi::rust::Deflate a..</text></g><g><title>miniz_oxide::deflate::stream::deflate (1,120 samples, 8.83%)</title><rect x="51.9584%" y="165" width="8.8265%" height="15" fill="rgb(250,74,19)" fg:x="6593" fg:w="1120"/><text x="52.0784%" y="175.50">miniz_oxide::deflate::stream:..</text></g><g><title>miniz_oxide::deflate::core::compress (1,120 samples, 8.83%)</title><rect x="51.9584%" y="149" width="8.8265%" height="15" fill="rgb(249,42,33)" fg:x="6593" fg:w="1120"/><text x="52.0784%" y="159.50">miniz_oxide::deflate::core::c..</text></g><g><title>miniz_oxide::deflate::core::compress_inner (1,120 samples, 8.83%)</title><rect x="51.9584%" y="133" width="8.8265%" height="15" fill="rgb(242,149,17)" fg:x="6593" fg:w="1120"/><text x="52.0784%" y="143.50">miniz_oxide::deflate::core::c..</text></g><g><title>miniz_oxide::deflate::core::flush_block (73 samples, 0.58%)</title><rect x="60.2096%" y="117" width="0.5753%" height="15" fill="rgb(244,29,21)" fg:x="7640" fg:w="73"/><text x="60.3296%" y="127.50"></text></g><g><title>miniz_oxide::deflate::core::compress_block (73 samples, 0.58%)</title><rect x="60.2096%" y="101" width="0.5753%" height="15" fill="rgb(220,130,37)" fg:x="7640" fg:w="73"/><text x="60.3296%" y="111.50"></text></g><g><title>miniz_oxide::deflate::core::compress_lz_codes (44 samples, 0.35%)</title><rect x="60.4382%" y="85" width="0.3468%" height="15" fill="rgb(211,67,2)" fg:x="7669" fg:w="44"/><text x="60.5582%" y="95.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,151 samples, 9.07%)</title><rect x="51.7220%" y="485" width="9.0708%" height="15" fill="rgb(235,68,52)" fg:x="6563" fg:w="1151"/><text x="51.8420%" y="495.50">&lt;core::future::from_generator:..</text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::insert::{{closure}} (1,151 samples, 9.07%)</title><rect x="51.7220%" y="469" width="9.0708%" height="15" fill="rgb(246,142,3)" fg:x="6563" fg:w="1151"/><text x="51.8420%" y="479.50">dads_gzip_thing::gzip::JsonLin..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,151 samples, 9.07%)</title><rect x="51.7220%" y="453" width="9.0708%" height="15" fill="rgb(241,25,7)" fg:x="6563" fg:w="1151"/><text x="51.8420%" y="463.50">&lt;core::future::from_generator:..</text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::close_least_recently_used::{{closure}} (1,151 samples, 9.07%)</title><rect x="51.7220%" y="437" width="9.0708%" height="15" fill="rgb(242,119,39)" fg:x="6563" fg:w="1151"/><text x="51.8420%" y="447.50">dads_gzip_thing::gzip::JsonLin..</text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="60.7928%" y="389" width="0.0158%" height="15" fill="rgb(241,98,45)" fg:x="7714" fg:w="2"/><text x="60.9128%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="60.7928%" y="373" width="0.0158%" height="15" fill="rgb(254,28,30)" fg:x="7714" fg:w="2"/><text x="60.9128%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="60.7928%" y="357" width="0.0158%" height="15" fill="rgb(241,142,54)" fg:x="7714" fg:w="2"/><text x="60.9128%" y="367.50"></text></g><g><title>&lt;bimap::mem::Wrapper&lt;T&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="60.7928%" y="341" width="0.0158%" height="15" fill="rgb(222,85,15)" fg:x="7714" fg:w="2"/><text x="60.9128%" y="351.50"></text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="60.7928%" y="325" width="0.0158%" height="15" fill="rgb(210,85,47)" fg:x="7714" fg:w="2"/><text x="60.9128%" y="335.50"></text></g><g><title>&lt;std::path::Path as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="60.7928%" y="309" width="0.0158%" height="15" fill="rgb(224,206,25)" fg:x="7714" fg:w="2"/><text x="60.9128%" y="319.50"></text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::get_id_or_generate (4 samples, 0.03%)</title><rect x="60.7928%" y="485" width="0.0315%" height="15" fill="rgb(243,201,19)" fg:x="7714" fg:w="4"/><text x="60.9128%" y="495.50"></text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::get_id (4 samples, 0.03%)</title><rect x="60.7928%" y="469" width="0.0315%" height="15" fill="rgb(236,59,4)" fg:x="7714" fg:w="4"/><text x="60.9128%" y="479.50"></text></g><g><title>bimap::hash::BiHashMap&lt;L,R,LS,RS&gt;::get_by_left (4 samples, 0.03%)</title><rect x="60.7928%" y="453" width="0.0315%" height="15" fill="rgb(254,179,45)" fg:x="7714" fg:w="4"/><text x="60.9128%" y="463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4 samples, 0.03%)</title><rect x="60.7928%" y="437" width="0.0315%" height="15" fill="rgb(226,14,10)" fg:x="7714" fg:w="4"/><text x="60.9128%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (4 samples, 0.03%)</title><rect x="60.7928%" y="421" width="0.0315%" height="15" fill="rgb(244,27,41)" fg:x="7714" fg:w="4"/><text x="60.9128%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4 samples, 0.03%)</title><rect x="60.7928%" y="405" width="0.0315%" height="15" fill="rgb(235,35,32)" fg:x="7714" fg:w="4"/><text x="60.9128%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.02%)</title><rect x="60.8086%" y="389" width="0.0158%" height="15" fill="rgb(218,68,31)" fg:x="7716" fg:w="2"/><text x="60.9286%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="60.8086%" y="373" width="0.0158%" height="15" fill="rgb(207,120,37)" fg:x="7716" fg:w="2"/><text x="60.9286%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.02%)</title><rect x="60.8086%" y="357" width="0.0158%" height="15" fill="rgb(227,98,0)" fg:x="7716" fg:w="2"/><text x="60.9286%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,157 samples, 9.12%)</title><rect x="51.7141%" y="517" width="9.1181%" height="15" fill="rgb(207,7,3)" fg:x="6562" fg:w="1157"/><text x="51.8341%" y="527.50">&lt;core::future::from_generator:..</text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::get_or_insert::{{closure}} (1,156 samples, 9.11%)</title><rect x="51.7220%" y="501" width="9.1103%" height="15" fill="rgb(206,98,19)" fg:x="6563" fg:w="1156"/><text x="51.8420%" y="511.50">dads_gzip_thing::gzip::JsonLin..</text></g><g><title>hashbrown::map::make_hash (2 samples, 0.02%)</title><rect x="60.8322%" y="421" width="0.0158%" height="15" fill="rgb(217,5,26)" fg:x="7719" fg:w="2"/><text x="60.9522%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="60.8322%" y="405" width="0.0158%" height="15" fill="rgb(235,190,38)" fg:x="7719" fg:w="2"/><text x="60.9522%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="60.8322%" y="389" width="0.0158%" height="15" fill="rgb(247,86,24)" fg:x="7719" fg:w="2"/><text x="60.9522%" y="399.50"></text></g><g><title>&lt;bimap::mem::Wrapper&lt;T&gt; as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="60.8322%" y="373" width="0.0158%" height="15" fill="rgb(205,101,16)" fg:x="7719" fg:w="2"/><text x="60.9522%" y="383.50"></text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="60.8322%" y="357" width="0.0158%" height="15" fill="rgb(246,168,33)" fg:x="7719" fg:w="2"/><text x="60.9522%" y="367.50"></text></g><g><title>&lt;std::path::Path as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="60.8322%" y="341" width="0.0158%" height="15" fill="rgb(231,114,1)" fg:x="7719" fg:w="2"/><text x="60.9522%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.02%)</title><rect x="60.8322%" y="325" width="0.0158%" height="15" fill="rgb(207,184,53)" fg:x="7719" fg:w="2"/><text x="60.9522%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="60.8322%" y="309" width="0.0158%" height="15" fill="rgb(224,95,51)" fg:x="7719" fg:w="2"/><text x="60.9522%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="60.8322%" y="293" width="0.0158%" height="15" fill="rgb(212,188,45)" fg:x="7719" fg:w="2"/><text x="60.9522%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="60.8322%" y="277" width="0.0158%" height="15" fill="rgb(223,154,38)" fg:x="7719" fg:w="2"/><text x="60.9522%" y="287.50"></text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::write_line::{{closure}} (1,160 samples, 9.14%)</title><rect x="51.7141%" y="533" width="9.1418%" height="15" fill="rgb(251,22,52)" fg:x="6562" fg:w="1160"/><text x="51.8341%" y="543.50">dads_gzip_thing::gzip::JsonLin..</text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::get_id_or_generate (3 samples, 0.02%)</title><rect x="60.8322%" y="517" width="0.0236%" height="15" fill="rgb(229,209,22)" fg:x="7719" fg:w="3"/><text x="60.9522%" y="527.50"></text></g><g><title>dads_gzip_thing::gzip::JsonLinesWriteStreamPool::get_id (3 samples, 0.02%)</title><rect x="60.8322%" y="501" width="0.0236%" height="15" fill="rgb(234,138,34)" fg:x="7719" fg:w="3"/><text x="60.9522%" y="511.50"></text></g><g><title>bimap::hash::BiHashMap&lt;L,R,LS,RS&gt;::get_by_left (3 samples, 0.02%)</title><rect x="60.8322%" y="485" width="0.0236%" height="15" fill="rgb(212,95,11)" fg:x="7719" fg:w="3"/><text x="60.9522%" y="495.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3 samples, 0.02%)</title><rect x="60.8322%" y="469" width="0.0236%" height="15" fill="rgb(240,179,47)" fg:x="7719" fg:w="3"/><text x="60.9522%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3 samples, 0.02%)</title><rect x="60.8322%" y="453" width="0.0236%" height="15" fill="rgb(240,163,11)" fg:x="7719" fg:w="3"/><text x="60.9522%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.02%)</title><rect x="60.8322%" y="437" width="0.0236%" height="15" fill="rgb(236,37,12)" fg:x="7719" fg:w="3"/><text x="60.9522%" y="447.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (48 samples, 0.38%)</title><rect x="61.0214%" y="485" width="0.3783%" height="15" fill="rgb(232,164,16)" fg:x="7743" fg:w="48"/><text x="61.1414%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (171 samples, 1.35%)</title><rect x="61.4154%" y="453" width="1.3476%" height="15" fill="rgb(244,205,15)" fg:x="7793" fg:w="171"/><text x="61.5354%" y="463.50">co..</text></g><g><title>core::sync::atomic::atomic_compare_exchange (171 samples, 1.35%)</title><rect x="61.4154%" y="437" width="1.3476%" height="15" fill="rgb(223,117,47)" fg:x="7793" fg:w="171"/><text x="61.5354%" y="447.50">co..</text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (9 samples, 0.07%)</title><rect x="62.7630%" y="453" width="0.0709%" height="15" fill="rgb(244,107,35)" fg:x="7964" fg:w="9"/><text x="62.8830%" y="463.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (9 samples, 0.07%)</title><rect x="62.7630%" y="437" width="0.0709%" height="15" fill="rgb(205,140,8)" fg:x="7964" fg:w="9"/><text x="62.8830%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (9 samples, 0.07%)</title><rect x="62.7630%" y="421" width="0.0709%" height="15" fill="rgb(228,84,46)" fg:x="7964" fg:w="9"/><text x="62.8830%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (9 samples, 0.07%)</title><rect x="62.7630%" y="405" width="0.0709%" height="15" fill="rgb(254,188,9)" fg:x="7964" fg:w="9"/><text x="62.8830%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (2 samples, 0.02%)</title><rect x="62.8182%" y="389" width="0.0158%" height="15" fill="rgb(206,112,54)" fg:x="7971" fg:w="2"/><text x="62.9382%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (2 samples, 0.02%)</title><rect x="62.8182%" y="373" width="0.0158%" height="15" fill="rgb(216,84,49)" fg:x="7971" fg:w="2"/><text x="62.9382%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (2 samples, 0.02%)</title><rect x="62.8182%" y="357" width="0.0158%" height="15" fill="rgb(214,194,35)" fg:x="7971" fg:w="2"/><text x="62.9382%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="62.8182%" y="341" width="0.0158%" height="15" fill="rgb(249,28,3)" fg:x="7971" fg:w="2"/><text x="62.9382%" y="351.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (50 samples, 0.39%)</title><rect x="62.8340%" y="453" width="0.3940%" height="15" fill="rgb(222,56,52)" fg:x="7973" fg:w="50"/><text x="62.9540%" y="463.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire::{{closure}} (50 samples, 0.39%)</title><rect x="62.8340%" y="437" width="0.3940%" height="15" fill="rgb(245,217,50)" fg:x="7973" fg:w="50"/><text x="62.9540%" y="447.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (50 samples, 0.39%)</title><rect x="62.8340%" y="421" width="0.3940%" height="15" fill="rgb(213,201,24)" fg:x="7973" fg:w="50"/><text x="62.9540%" y="431.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (46 samples, 0.36%)</title><rect x="62.8655%" y="405" width="0.3625%" height="15" fill="rgb(248,116,28)" fg:x="7977" fg:w="46"/><text x="62.9855%" y="415.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (46 samples, 0.36%)</title><rect x="62.8655%" y="389" width="0.3625%" height="15" fill="rgb(219,72,43)" fg:x="7977" fg:w="46"/><text x="62.9855%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (45 samples, 0.35%)</title><rect x="62.8734%" y="373" width="0.3546%" height="15" fill="rgb(209,138,14)" fg:x="7978" fg:w="45"/><text x="62.9934%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (45 samples, 0.35%)</title><rect x="62.8734%" y="357" width="0.3546%" height="15" fill="rgb(222,18,33)" fg:x="7978" fg:w="45"/><text x="62.9934%" y="367.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (56 samples, 0.44%)</title><rect x="63.2280%" y="453" width="0.4413%" height="15" fill="rgb(213,199,7)" fg:x="8023" fg:w="56"/><text x="63.3480%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt;&gt; (56 samples, 0.44%)</title><rect x="63.2280%" y="437" width="0.4413%" height="15" fill="rgb(250,110,10)" fg:x="8023" fg:w="56"/><text x="63.3480%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt; (56 samples, 0.44%)</title><rect x="63.2280%" y="421" width="0.4413%" height="15" fill="rgb(248,123,6)" fg:x="8023" fg:w="56"/><text x="63.3480%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.44%)</title><rect x="63.2280%" y="405" width="0.4413%" height="15" fill="rgb(206,91,31)" fg:x="8023" fg:w="56"/><text x="63.3480%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (56 samples, 0.44%)</title><rect x="63.2280%" y="389" width="0.4413%" height="15" fill="rgb(211,154,13)" fg:x="8023" fg:w="56"/><text x="63.3480%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (56 samples, 0.44%)</title><rect x="63.2280%" y="373" width="0.4413%" height="15" fill="rgb(225,148,7)" fg:x="8023" fg:w="56"/><text x="63.3480%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (31 samples, 0.24%)</title><rect x="63.4250%" y="357" width="0.2443%" height="15" fill="rgb(220,160,43)" fg:x="8048" fg:w="31"/><text x="63.5450%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_swap (31 samples, 0.24%)</title><rect x="63.4250%" y="341" width="0.2443%" height="15" fill="rgb(213,52,39)" fg:x="8048" fg:w="31"/><text x="63.5450%" y="351.50"></text></g><g><title>tokio::sync::batch_semaphore::Waiter::assign_permits (167 samples, 1.32%)</title><rect x="63.6693%" y="453" width="1.3161%" height="15" fill="rgb(243,137,7)" fg:x="8079" fg:w="167"/><text x="63.7893%" y="463.50">to..</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (167 samples, 1.32%)</title><rect x="63.6693%" y="437" width="1.3161%" height="15" fill="rgb(230,79,13)" fg:x="8079" fg:w="167"/><text x="63.7893%" y="447.50">co..</text></g><g><title>core::sync::atomic::atomic_compare_exchange (167 samples, 1.32%)</title><rect x="63.6693%" y="421" width="1.3161%" height="15" fill="rgb(247,105,23)" fg:x="8079" fg:w="167"/><text x="63.7893%" y="431.50">co..</text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (459 samples, 3.62%)</title><rect x="61.3996%" y="485" width="3.6173%" height="15" fill="rgb(223,179,41)" fg:x="7791" fg:w="459"/><text x="61.5196%" y="495.50">&lt;tokio::sy..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire (459 samples, 3.62%)</title><rect x="61.3996%" y="469" width="3.6173%" height="15" fill="rgb(218,9,34)" fg:x="7791" fg:w="459"/><text x="61.5196%" y="479.50">tokio::syn..</text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (4 samples, 0.03%)</title><rect x="64.9854%" y="453" width="0.0315%" height="15" fill="rgb(222,106,8)" fg:x="8246" fg:w="4"/><text x="65.1054%" y="463.50"></text></g><g><title>tokio::util::linked_list::Pointers&lt;T&gt;::set_prev (4 samples, 0.03%)</title><rect x="64.9854%" y="437" width="0.0315%" height="15" fill="rgb(211,220,0)" fg:x="8246" fg:w="4"/><text x="65.1054%" y="447.50"></text></g><g><title>core::ptr::write (4 samples, 0.03%)</title><rect x="64.9854%" y="421" width="0.0315%" height="15" fill="rgb(229,52,16)" fg:x="8246" fg:w="4"/><text x="65.1054%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::batch_semaphore::Acquire&gt; (3 samples, 0.02%)</title><rect x="65.0169%" y="485" width="0.0236%" height="15" fill="rgb(212,155,18)" fg:x="8250" fg:w="3"/><text x="65.1369%" y="495.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="65.0169%" y="469" width="0.0236%" height="15" fill="rgb(242,21,14)" fg:x="8250" fg:w="3"/><text x="65.1369%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,697 samples, 13.37%)</title><rect x="51.7141%" y="549" width="13.3738%" height="15" fill="rgb(222,19,48)" fg:x="6562" fg:w="1697"/><text x="51.8341%" y="559.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; a..</text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::lock::{{closure}} (537 samples, 4.23%)</title><rect x="60.8559%" y="533" width="4.2320%" height="15" fill="rgb(232,45,27)" fg:x="7722" fg:w="537"/><text x="60.9759%" y="543.50">tokio::sync:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (522 samples, 4.11%)</title><rect x="60.9741%" y="517" width="4.1138%" height="15" fill="rgb(249,103,42)" fg:x="7737" fg:w="522"/><text x="61.0941%" y="527.50">&lt;core::futur..</text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::acquire::{{closure}} (522 samples, 4.11%)</title><rect x="60.9741%" y="501" width="4.1138%" height="15" fill="rgb(246,81,33)" fg:x="7737" fg:w="522"/><text x="61.0941%" y="511.50">tokio::sync:..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (6 samples, 0.05%)</title><rect x="65.0406%" y="485" width="0.0473%" height="15" fill="rgb(252,33,42)" fg:x="8253" fg:w="6"/><text x="65.1606%" y="495.50"></text></g><g><title>tokio::sync::batch_semaphore::Acquire::new (6 samples, 0.05%)</title><rect x="65.0406%" y="469" width="0.0473%" height="15" fill="rgb(209,212,41)" fg:x="8253" fg:w="6"/><text x="65.1606%" y="479.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (35 samples, 0.28%)</title><rect x="65.1273%" y="501" width="0.2758%" height="15" fill="rgb(207,154,6)" fg:x="8264" fg:w="35"/><text x="65.2473%" y="511.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked::{{closure}} (35 samples, 0.28%)</title><rect x="65.1273%" y="485" width="0.2758%" height="15" fill="rgb(223,64,47)" fg:x="8264" fg:w="35"/><text x="65.2473%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (35 samples, 0.28%)</title><rect x="65.1273%" y="469" width="0.2758%" height="15" fill="rgb(211,161,38)" fg:x="8264" fg:w="35"/><text x="65.2473%" y="479.50"></text></g><g><title>core::mem::replace (35 samples, 0.28%)</title><rect x="65.1273%" y="453" width="0.2758%" height="15" fill="rgb(219,138,40)" fg:x="8264" fg:w="35"/><text x="65.2473%" y="463.50"></text></g><g><title>core::ptr::read (35 samples, 0.28%)</title><rect x="65.1273%" y="437" width="0.2758%" height="15" fill="rgb(241,228,46)" fg:x="8264" fg:w="35"/><text x="65.2473%" y="447.50"></text></g><g><title>tokio::sync::batch_semaphore::Waiter::assign_permits (76 samples, 0.60%)</title><rect x="65.4031%" y="501" width="0.5989%" height="15" fill="rgb(223,209,38)" fg:x="8299" fg:w="76"/><text x="65.5231%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (40 samples, 0.32%)</title><rect x="65.6868%" y="485" width="0.3152%" height="15" fill="rgb(236,164,45)" fg:x="8335" fg:w="40"/><text x="65.8068%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (40 samples, 0.32%)</title><rect x="65.6868%" y="469" width="0.3152%" height="15" fill="rgb(231,15,5)" fg:x="8335" fg:w="40"/><text x="65.8068%" y="479.50"></text></g><g><title>tokio::util::wake_list::WakeList::push (34 samples, 0.27%)</title><rect x="66.0020%" y="501" width="0.2679%" height="15" fill="rgb(252,35,15)" fg:x="8375" fg:w="34"/><text x="66.1220%" y="511.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (50 samples, 0.39%)</title><rect x="66.2936%" y="437" width="0.3940%" height="15" fill="rgb(248,181,18)" fg:x="8412" fg:w="50"/><text x="66.4136%" y="447.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (50 samples, 0.39%)</title><rect x="66.2936%" y="421" width="0.3940%" height="15" fill="rgb(233,39,42)" fg:x="8412" fg:w="50"/><text x="66.4136%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (13 samples, 0.10%)</title><rect x="66.5852%" y="405" width="0.1025%" height="15" fill="rgb(238,110,33)" fg:x="8449" fg:w="13"/><text x="66.7052%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_sub (13 samples, 0.10%)</title><rect x="66.5852%" y="389" width="0.1025%" height="15" fill="rgb(233,195,10)" fg:x="8449" fg:w="13"/><text x="66.7052%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="66.7192%" y="405" width="0.0236%" height="15" fill="rgb(254,105,3)" fg:x="8466" fg:w="3"/><text x="66.8392%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6 samples, 0.05%)</title><rect x="67.0108%" y="373" width="0.0473%" height="15" fill="rgb(221,225,9)" fg:x="8503" fg:w="6"/><text x="67.1308%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6 samples, 0.05%)</title><rect x="67.0108%" y="357" width="0.0473%" height="15" fill="rgb(224,227,45)" fg:x="8503" fg:w="6"/><text x="67.1308%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::CURRENT::FOO::__getit (3 samples, 0.02%)</title><rect x="67.0344%" y="341" width="0.0236%" height="15" fill="rgb(229,198,43)" fg:x="8506" fg:w="3"/><text x="67.1544%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (15 samples, 0.12%)</title><rect x="67.1684%" y="357" width="0.1182%" height="15" fill="rgb(206,209,35)" fg:x="8523" fg:w="15"/><text x="67.2884%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (15 samples, 0.12%)</title><rect x="67.1684%" y="341" width="0.1182%" height="15" fill="rgb(245,195,53)" fg:x="8523" fg:w="15"/><text x="67.2884%" y="351.50"></text></g><g><title>core::cell::BorrowRefMut::new (15 samples, 0.12%)</title><rect x="67.1684%" y="325" width="0.1182%" height="15" fill="rgb(240,92,26)" fg:x="8523" fg:w="15"/><text x="67.2884%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (90 samples, 0.71%)</title><rect x="66.7034%" y="421" width="0.7093%" height="15" fill="rgb(207,40,23)" fg:x="8464" fg:w="90"/><text x="66.8234%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (85 samples, 0.67%)</title><rect x="66.7428%" y="405" width="0.6699%" height="15" fill="rgb(223,111,35)" fg:x="8469" fg:w="85"/><text x="66.8628%" y="415.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (84 samples, 0.66%)</title><rect x="66.7507%" y="389" width="0.6620%" height="15" fill="rgb(229,147,28)" fg:x="8470" fg:w="84"/><text x="66.8707%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::{{closure}} (45 samples, 0.35%)</title><rect x="67.0581%" y="373" width="0.3546%" height="15" fill="rgb(211,29,28)" fg:x="8509" fg:w="45"/><text x="67.1781%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (15 samples, 0.12%)</title><rect x="67.2945%" y="357" width="0.1182%" height="15" fill="rgb(228,72,33)" fg:x="8539" fg:w="15"/><text x="67.4145%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (6 samples, 0.05%)</title><rect x="67.3654%" y="341" width="0.0473%" height="15" fill="rgb(205,214,31)" fg:x="8548" fg:w="6"/><text x="67.4854%" y="351.50"></text></g><g><title>core::mem::replace (6 samples, 0.05%)</title><rect x="67.3654%" y="325" width="0.0473%" height="15" fill="rgb(224,111,15)" fg:x="8548" fg:w="6"/><text x="67.4854%" y="335.50"></text></g><g><title>core::ptr::read (6 samples, 0.05%)</title><rect x="67.3654%" y="309" width="0.0473%" height="15" fill="rgb(253,21,26)" fg:x="8548" fg:w="6"/><text x="67.4854%" y="319.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::from_raw (3 samples, 0.02%)</title><rect x="67.4127%" y="405" width="0.0236%" height="15" fill="rgb(245,139,43)" fg:x="8554" fg:w="3"/><text x="67.5327%" y="415.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (96 samples, 0.76%)</title><rect x="66.6877%" y="437" width="0.7566%" height="15" fill="rgb(252,170,7)" fg:x="8462" fg:w="96"/><text x="66.8077%" y="447.50"></text></g><g><title>tokio::runtime::task::raw::schedule (4 samples, 0.03%)</title><rect x="67.4127%" y="421" width="0.0315%" height="15" fill="rgb(231,118,14)" fg:x="8554" fg:w="4"/><text x="67.5327%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (31 samples, 0.24%)</title><rect x="67.4442%" y="405" width="0.2443%" height="15" fill="rgb(238,83,0)" fg:x="8558" fg:w="31"/><text x="67.5642%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (31 samples, 0.24%)</title><rect x="67.4442%" y="389" width="0.2443%" height="15" fill="rgb(221,39,39)" fg:x="8558" fg:w="31"/><text x="67.5642%" y="399.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (338 samples, 2.66%)</title><rect x="65.1273%" y="517" width="2.6637%" height="15" fill="rgb(222,119,46)" fg:x="8264" fg:w="338"/><text x="65.2473%" y="527.50">tokio::..</text></g><g><title>tokio::util::wake_list::WakeList::wake_all (193 samples, 1.52%)</title><rect x="66.2700%" y="501" width="1.5210%" height="15" fill="rgb(222,165,49)" fg:x="8409" fg:w="193"/><text x="66.3900%" y="511.50">tok..</text></g><g><title>core::task::wake::Waker::wake (193 samples, 1.52%)</title><rect x="66.2700%" y="485" width="1.5210%" height="15" fill="rgb(219,113,52)" fg:x="8409" fg:w="193"/><text x="66.3900%" y="495.50">cor..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (193 samples, 1.52%)</title><rect x="66.2700%" y="469" width="1.5210%" height="15" fill="rgb(214,7,15)" fg:x="8409" fg:w="193"/><text x="66.3900%" y="479.50">tok..</text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (193 samples, 1.52%)</title><rect x="66.2700%" y="453" width="1.5210%" height="15" fill="rgb(235,32,4)" fg:x="8409" fg:w="193"/><text x="66.3900%" y="463.50">tok..</text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (44 samples, 0.35%)</title><rect x="67.4442%" y="437" width="0.3468%" height="15" fill="rgb(238,90,54)" fg:x="8558" fg:w="44"/><text x="67.5642%" y="447.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (44 samples, 0.35%)</title><rect x="67.4442%" y="421" width="0.3468%" height="15" fill="rgb(213,208,19)" fg:x="8558" fg:w="44"/><text x="67.5642%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val::{{closure}} (13 samples, 0.10%)</title><rect x="67.6885%" y="405" width="0.1025%" height="15" fill="rgb(233,156,4)" fg:x="8589" fg:w="13"/><text x="67.8085%" y="415.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::ref_inc (13 samples, 0.10%)</title><rect x="67.6885%" y="389" width="0.1025%" height="15" fill="rgb(207,194,5)" fg:x="8589" fg:w="13"/><text x="67.8085%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (65 samples, 0.51%)</title><rect x="67.7910%" y="437" width="0.5123%" height="15" fill="rgb(206,111,30)" fg:x="8602" fg:w="65"/><text x="67.9110%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (65 samples, 0.51%)</title><rect x="67.7910%" y="421" width="0.5123%" height="15" fill="rgb(243,70,54)" fg:x="8602" fg:w="65"/><text x="67.9110%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mutex::MutexGuard&lt;alloc::collections::vec_deque::VecDeque&lt;dads_gzip_thing::Line&gt;&gt;&gt; (409 samples, 3.22%)</title><rect x="65.0879%" y="549" width="3.2233%" height="15" fill="rgb(242,28,8)" fg:x="8259" fg:w="409"/><text x="65.2079%" y="559.50">core::ptr..</text></g><g><title>&lt;tokio::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (409 samples, 3.22%)</title><rect x="65.0879%" y="533" width="3.2233%" height="15" fill="rgb(219,106,18)" fg:x="8259" fg:w="409"/><text x="65.2079%" y="543.50">&lt;tokio::s..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (66 samples, 0.52%)</title><rect x="67.7910%" y="517" width="0.5201%" height="15" fill="rgb(244,222,10)" fg:x="8602" fg:w="66"/><text x="67.9110%" y="527.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (66 samples, 0.52%)</title><rect x="67.7910%" y="501" width="0.5201%" height="15" fill="rgb(236,179,52)" fg:x="8602" fg:w="66"/><text x="67.9110%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (66 samples, 0.52%)</title><rect x="67.7910%" y="485" width="0.5201%" height="15" fill="rgb(213,23,39)" fg:x="8602" fg:w="66"/><text x="67.9110%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (66 samples, 0.52%)</title><rect x="67.7910%" y="469" width="0.5201%" height="15" fill="rgb(238,48,10)" fg:x="8602" fg:w="66"/><text x="67.9110%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (66 samples, 0.52%)</title><rect x="67.7910%" y="453" width="0.5201%" height="15" fill="rgb(251,196,23)" fg:x="8602" fg:w="66"/><text x="67.9110%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.02%)</title><rect x="68.3584%" y="533" width="0.0236%" height="15" fill="rgb(250,152,24)" fg:x="8674" fg:w="3"/><text x="68.4784%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;tokio::sync::broadcast::Slot&lt;dads_gzip_thing::TaskBroadcastMessage&gt;&gt;&gt; (213 samples, 1.68%)</title><rect x="72.0073%" y="517" width="1.6786%" height="15" fill="rgb(209,150,17)" fg:x="9137" fg:w="213"/><text x="72.1273%" y="527.50">cor..</text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (213 samples, 1.68%)</title><rect x="72.0073%" y="501" width="1.6786%" height="15" fill="rgb(234,202,34)" fg:x="9137" fg:w="213"/><text x="72.1273%" y="511.50">&lt;st..</text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (213 samples, 1.68%)</title><rect x="72.0073%" y="485" width="1.6786%" height="15" fill="rgb(253,148,53)" fg:x="9137" fg:w="213"/><text x="72.1273%" y="495.50">std..</text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (213 samples, 1.68%)</title><rect x="72.0073%" y="469" width="1.6786%" height="15" fill="rgb(218,129,16)" fg:x="9137" fg:w="213"/><text x="72.1273%" y="479.50">std..</text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (213 samples, 1.68%)</title><rect x="72.0073%" y="453" width="1.6786%" height="15" fill="rgb(216,85,19)" fg:x="9137" fg:w="213"/><text x="72.1273%" y="463.50">cor..</text></g><g><title>core::sync::atomic::atomic_sub (213 samples, 1.68%)</title><rect x="72.0073%" y="437" width="1.6786%" height="15" fill="rgb(235,228,7)" fg:x="9137" fg:w="213"/><text x="72.1273%" y="447.50">cor..</text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (16 samples, 0.13%)</title><rect x="73.6938%" y="469" width="0.1261%" height="15" fill="rgb(245,175,0)" fg:x="9351" fg:w="16"/><text x="73.8138%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (16 samples, 0.13%)</title><rect x="73.6938%" y="453" width="0.1261%" height="15" fill="rgb(208,168,36)" fg:x="9351" fg:w="16"/><text x="73.8138%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (9 samples, 0.07%)</title><rect x="73.8198%" y="453" width="0.0709%" height="15" fill="rgb(246,171,24)" fg:x="9367" fg:w="9"/><text x="73.9398%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (9 samples, 0.07%)</title><rect x="73.8198%" y="437" width="0.0709%" height="15" fill="rgb(215,142,24)" fg:x="9367" fg:w="9"/><text x="73.9398%" y="447.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (28 samples, 0.22%)</title><rect x="73.6859%" y="517" width="0.2207%" height="15" fill="rgb(250,187,7)" fg:x="9350" fg:w="28"/><text x="73.8059%" y="527.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (28 samples, 0.22%)</title><rect x="73.6859%" y="501" width="0.2207%" height="15" fill="rgb(228,66,33)" fg:x="9350" fg:w="28"/><text x="73.8059%" y="511.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (28 samples, 0.22%)</title><rect x="73.6859%" y="485" width="0.2207%" height="15" fill="rgb(234,215,21)" fg:x="9350" fg:w="28"/><text x="73.8059%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_contended (11 samples, 0.09%)</title><rect x="73.8198%" y="469" width="0.0867%" height="15" fill="rgb(222,191,20)" fg:x="9367" fg:w="11"/><text x="73.9398%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::spin_read (2 samples, 0.02%)</title><rect x="73.8908%" y="453" width="0.0158%" height="15" fill="rgb(245,79,54)" fg:x="9376" fg:w="2"/><text x="74.0108%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::spin_until (2 samples, 0.02%)</title><rect x="73.8908%" y="437" width="0.0158%" height="15" fill="rgb(240,10,37)" fg:x="9376" fg:w="2"/><text x="74.0108%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (222 samples, 1.75%)</title><rect x="73.9223%" y="453" width="1.7495%" height="15" fill="rgb(214,192,32)" fg:x="9380" fg:w="222"/><text x="74.0423%" y="463.50">core..</text></g><g><title>core::sync::atomic::atomic_compare_exchange (222 samples, 1.75%)</title><rect x="73.9223%" y="437" width="1.7495%" height="15" fill="rgb(209,36,54)" fg:x="9380" fg:w="222"/><text x="74.0423%" y="447.50">core..</text></g><g><title>dads_gzip_thing::output_lines::{{closure}} (3,207 samples, 25.27%)</title><rect x="51.5643%" y="565" width="25.2739%" height="15" fill="rgb(220,10,11)" fg:x="6543" fg:w="3207"/><text x="51.6843%" y="575.50">dads_gzip_thing::output_lines::{{closure}}</text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::try_recv (1,082 samples, 8.53%)</title><rect x="68.3111%" y="549" width="8.5271%" height="15" fill="rgb(221,106,17)" fg:x="8668" fg:w="1082"/><text x="68.4311%" y="559.50">tokio::sync::broadcast::Rece..</text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (1,073 samples, 8.46%)</title><rect x="68.3821%" y="533" width="8.4561%" height="15" fill="rgb(251,142,44)" fg:x="8677" fg:w="1073"/><text x="68.5021%" y="543.50">tokio::sync::broadcast::Rec..</text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (372 samples, 2.93%)</title><rect x="73.9065%" y="517" width="2.9317%" height="15" fill="rgb(238,13,15)" fg:x="9378" fg:w="372"/><text x="74.0265%" y="527.50">tokio::l..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (372 samples, 2.93%)</title><rect x="73.9065%" y="501" width="2.9317%" height="15" fill="rgb(208,107,27)" fg:x="9378" fg:w="372"/><text x="74.0265%" y="511.50">std::syn..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (372 samples, 2.93%)</title><rect x="73.9065%" y="485" width="2.9317%" height="15" fill="rgb(205,136,37)" fg:x="9378" fg:w="372"/><text x="74.0265%" y="495.50">std::sys..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (372 samples, 2.93%)</title><rect x="73.9065%" y="469" width="2.9317%" height="15" fill="rgb(250,205,27)" fg:x="9378" fg:w="372"/><text x="74.0265%" y="479.50">std::sys..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (148 samples, 1.17%)</title><rect x="75.6718%" y="453" width="1.1664%" height="15" fill="rgb(210,80,43)" fg:x="9602" fg:w="148"/><text x="75.7918%" y="463.50">st..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (114 samples, 0.90%)</title><rect x="75.9398%" y="437" width="0.8984%" height="15" fill="rgb(247,160,36)" fg:x="9636" fg:w="114"/><text x="76.0598%" y="447.50">s..</text></g><g><title>core::sync::atomic::AtomicU32::load (74 samples, 0.58%)</title><rect x="76.2550%" y="421" width="0.5832%" height="15" fill="rgb(234,13,49)" fg:x="9676" fg:w="74"/><text x="76.3750%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (74 samples, 0.58%)</title><rect x="76.2550%" y="405" width="0.5832%" height="15" fill="rgb(234,122,0)" fg:x="9676" fg:w="74"/><text x="76.3750%" y="415.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (48 samples, 0.38%)</title><rect x="77.0825%" y="485" width="0.3783%" height="15" fill="rgb(207,146,38)" fg:x="9781" fg:w="48"/><text x="77.2025%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::RestoreOnPending&gt; (149 samples, 1.17%)</title><rect x="77.4608%" y="469" width="1.1742%" height="15" fill="rgb(207,177,25)" fg:x="9829" fg:w="149"/><text x="77.5808%" y="479.50">co..</text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (149 samples, 1.17%)</title><rect x="77.4608%" y="453" width="1.1742%" height="15" fill="rgb(211,178,42)" fg:x="9829" fg:w="149"/><text x="77.5808%" y="463.50">&lt;t..</text></g><g><title>tokio::runtime::context::budget (149 samples, 1.17%)</title><rect x="77.4608%" y="437" width="1.1742%" height="15" fill="rgb(230,69,54)" fg:x="9829" fg:w="149"/><text x="77.5808%" y="447.50">to..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (149 samples, 1.17%)</title><rect x="77.4608%" y="421" width="1.1742%" height="15" fill="rgb(214,135,41)" fg:x="9829" fg:w="149"/><text x="77.5808%" y="431.50">st..</text></g><g><title>tokio::runtime::context::CONTEXT::__getit (149 samples, 1.17%)</title><rect x="77.4608%" y="405" width="1.1742%" height="15" fill="rgb(237,67,25)" fg:x="9829" fg:w="149"/><text x="77.5808%" y="415.50">to..</text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (149 samples, 1.17%)</title><rect x="77.4608%" y="389" width="1.1742%" height="15" fill="rgb(222,189,50)" fg:x="9829" fg:w="149"/><text x="77.5808%" y="399.50">st..</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (107 samples, 0.84%)</title><rect x="78.6666%" y="453" width="0.8433%" height="15" fill="rgb(245,148,34)" fg:x="9982" fg:w="107"/><text x="78.7866%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (107 samples, 0.84%)</title><rect x="78.6666%" y="437" width="0.8433%" height="15" fill="rgb(222,29,6)" fg:x="9982" fg:w="107"/><text x="78.7866%" y="447.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (4 samples, 0.03%)</title><rect x="79.5098%" y="453" width="0.0315%" height="15" fill="rgb(221,189,43)" fg:x="10089" fg:w="4"/><text x="79.6298%" y="463.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (4 samples, 0.03%)</title><rect x="79.5098%" y="437" width="0.0315%" height="15" fill="rgb(207,36,27)" fg:x="10089" fg:w="4"/><text x="79.6298%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (4 samples, 0.03%)</title><rect x="79.5098%" y="421" width="0.0315%" height="15" fill="rgb(217,90,24)" fg:x="10089" fg:w="4"/><text x="79.6298%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (4 samples, 0.03%)</title><rect x="79.5098%" y="405" width="0.0315%" height="15" fill="rgb(224,66,35)" fg:x="10089" fg:w="4"/><text x="79.6298%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (4 samples, 0.03%)</title><rect x="79.5098%" y="389" width="0.0315%" height="15" fill="rgb(221,13,50)" fg:x="10089" fg:w="4"/><text x="79.6298%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (4 samples, 0.03%)</title><rect x="79.5098%" y="373" width="0.0315%" height="15" fill="rgb(236,68,49)" fg:x="10089" fg:w="4"/><text x="79.6298%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (4 samples, 0.03%)</title><rect x="79.5098%" y="357" width="0.0315%" height="15" fill="rgb(229,146,28)" fg:x="10089" fg:w="4"/><text x="79.6298%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.03%)</title><rect x="79.5098%" y="341" width="0.0315%" height="15" fill="rgb(225,31,38)" fg:x="10089" fg:w="4"/><text x="79.6298%" y="351.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (67 samples, 0.53%)</title><rect x="79.5413%" y="453" width="0.5280%" height="15" fill="rgb(250,208,3)" fg:x="10093" fg:w="67"/><text x="79.6613%" y="463.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire::{{closure}} (67 samples, 0.53%)</title><rect x="79.5413%" y="437" width="0.5280%" height="15" fill="rgb(246,54,23)" fg:x="10093" fg:w="67"/><text x="79.6613%" y="447.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (67 samples, 0.53%)</title><rect x="79.5413%" y="421" width="0.5280%" height="15" fill="rgb(243,76,11)" fg:x="10093" fg:w="67"/><text x="79.6613%" y="431.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (61 samples, 0.48%)</title><rect x="79.5886%" y="405" width="0.4807%" height="15" fill="rgb(245,21,50)" fg:x="10099" fg:w="61"/><text x="79.7086%" y="415.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (61 samples, 0.48%)</title><rect x="79.5886%" y="389" width="0.4807%" height="15" fill="rgb(228,9,43)" fg:x="10099" fg:w="61"/><text x="79.7086%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (61 samples, 0.48%)</title><rect x="79.5886%" y="373" width="0.4807%" height="15" fill="rgb(208,100,47)" fg:x="10099" fg:w="61"/><text x="79.7086%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (61 samples, 0.48%)</title><rect x="79.5886%" y="357" width="0.4807%" height="15" fill="rgb(232,26,8)" fg:x="10099" fg:w="61"/><text x="79.7086%" y="367.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (69 samples, 0.54%)</title><rect x="80.0694%" y="453" width="0.5438%" height="15" fill="rgb(216,166,38)" fg:x="10160" fg:w="69"/><text x="80.1894%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt;&gt; (53 samples, 0.42%)</title><rect x="80.1954%" y="437" width="0.4177%" height="15" fill="rgb(251,202,51)" fg:x="10176" fg:w="53"/><text x="80.3154%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt; (53 samples, 0.42%)</title><rect x="80.1954%" y="421" width="0.4177%" height="15" fill="rgb(254,216,34)" fg:x="10176" fg:w="53"/><text x="80.3154%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.42%)</title><rect x="80.1954%" y="405" width="0.4177%" height="15" fill="rgb(251,32,27)" fg:x="10176" fg:w="53"/><text x="80.3154%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (53 samples, 0.42%)</title><rect x="80.1954%" y="389" width="0.4177%" height="15" fill="rgb(208,127,28)" fg:x="10176" fg:w="53"/><text x="80.3154%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (53 samples, 0.42%)</title><rect x="80.1954%" y="373" width="0.4177%" height="15" fill="rgb(224,137,22)" fg:x="10176" fg:w="53"/><text x="80.3154%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (35 samples, 0.28%)</title><rect x="80.3373%" y="357" width="0.2758%" height="15" fill="rgb(254,70,32)" fg:x="10194" fg:w="35"/><text x="80.4573%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_swap (35 samples, 0.28%)</title><rect x="80.3373%" y="341" width="0.2758%" height="15" fill="rgb(229,75,37)" fg:x="10194" fg:w="35"/><text x="80.4573%" y="351.50"></text></g><g><title>tokio::sync::batch_semaphore::Waiter::assign_permits (222 samples, 1.75%)</title><rect x="80.6131%" y="453" width="1.7495%" height="15" fill="rgb(252,64,23)" fg:x="10229" fg:w="222"/><text x="80.7331%" y="463.50">toki..</text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (626 samples, 4.93%)</title><rect x="77.4608%" y="485" width="4.9334%" height="15" fill="rgb(232,162,48)" fg:x="9829" fg:w="626"/><text x="77.5808%" y="495.50">&lt;tokio::sync::b..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire (477 samples, 3.76%)</title><rect x="78.6350%" y="469" width="3.7592%" height="15" fill="rgb(246,160,12)" fg:x="9978" fg:w="477"/><text x="78.7550%" y="479.50">tokio::sync..</text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (4 samples, 0.03%)</title><rect x="82.3627%" y="453" width="0.0315%" height="15" fill="rgb(247,166,0)" fg:x="10451" fg:w="4"/><text x="82.4827%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::batch_semaphore::Acquire&gt; (33 samples, 0.26%)</title><rect x="82.3942%" y="485" width="0.2601%" height="15" fill="rgb(249,219,21)" fg:x="10455" fg:w="33"/><text x="82.5142%" y="495.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="82.6149%" y="469" width="0.0394%" height="15" fill="rgb(205,209,3)" fg:x="10483" fg:w="5"/><text x="82.7349%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (736 samples, 5.80%)</title><rect x="76.9091%" y="549" width="5.8003%" height="15" fill="rgb(243,44,1)" fg:x="9759" fg:w="736"/><text x="77.0291%" y="559.50">&lt;core::future::fro..</text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::lock::{{closure}} (719 samples, 5.67%)</title><rect x="77.0431%" y="533" width="5.6663%" height="15" fill="rgb(206,159,16)" fg:x="9776" fg:w="719"/><text x="77.1631%" y="543.50">tokio::sync::mutex..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (719 samples, 5.67%)</title><rect x="77.0431%" y="517" width="5.6663%" height="15" fill="rgb(244,77,30)" fg:x="9776" fg:w="719"/><text x="77.1631%" y="527.50">&lt;core::future::fro..</text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::acquire::{{closure}} (719 samples, 5.67%)</title><rect x="77.0431%" y="501" width="5.6663%" height="15" fill="rgb(218,69,12)" fg:x="9776" fg:w="719"/><text x="77.1631%" y="511.50">tokio::sync::mutex..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (7 samples, 0.06%)</title><rect x="82.6543%" y="485" width="0.0552%" height="15" fill="rgb(212,87,7)" fg:x="10488" fg:w="7"/><text x="82.7743%" y="495.50"></text></g><g><title>tokio::sync::batch_semaphore::Acquire::new (7 samples, 0.06%)</title><rect x="82.6543%" y="469" width="0.0552%" height="15" fill="rgb(245,114,25)" fg:x="10488" fg:w="7"/><text x="82.7743%" y="479.50"></text></g><g><title>core::mem::drop (55 samples, 0.43%)</title><rect x="82.8592%" y="501" width="0.4334%" height="15" fill="rgb(210,61,42)" fg:x="10514" fg:w="55"/><text x="82.9792%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt; (55 samples, 0.43%)</title><rect x="82.8592%" y="485" width="0.4334%" height="15" fill="rgb(211,52,33)" fg:x="10514" fg:w="55"/><text x="82.9792%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.43%)</title><rect x="82.8592%" y="469" width="0.4334%" height="15" fill="rgb(234,58,33)" fg:x="10514" fg:w="55"/><text x="82.9792%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (55 samples, 0.43%)</title><rect x="82.8592%" y="453" width="0.4334%" height="15" fill="rgb(220,115,36)" fg:x="10514" fg:w="55"/><text x="82.9792%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (55 samples, 0.43%)</title><rect x="82.8592%" y="437" width="0.4334%" height="15" fill="rgb(243,153,54)" fg:x="10514" fg:w="55"/><text x="82.9792%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (55 samples, 0.43%)</title><rect x="82.8592%" y="421" width="0.4334%" height="15" fill="rgb(251,47,18)" fg:x="10514" fg:w="55"/><text x="82.9792%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (55 samples, 0.43%)</title><rect x="82.8592%" y="405" width="0.4334%" height="15" fill="rgb(242,102,42)" fg:x="10514" fg:w="55"/><text x="82.9792%" y="415.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (45 samples, 0.35%)</title><rect x="83.2926%" y="501" width="0.3546%" height="15" fill="rgb(234,31,38)" fg:x="10569" fg:w="45"/><text x="83.4126%" y="511.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked::{{closure}} (45 samples, 0.35%)</title><rect x="83.2926%" y="485" width="0.3546%" height="15" fill="rgb(221,117,51)" fg:x="10569" fg:w="45"/><text x="83.4126%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (45 samples, 0.35%)</title><rect x="83.2926%" y="469" width="0.3546%" height="15" fill="rgb(212,20,18)" fg:x="10569" fg:w="45"/><text x="83.4126%" y="479.50"></text></g><g><title>core::mem::replace (45 samples, 0.35%)</title><rect x="83.2926%" y="453" width="0.3546%" height="15" fill="rgb(245,133,36)" fg:x="10569" fg:w="45"/><text x="83.4126%" y="463.50"></text></g><g><title>core::ptr::read (45 samples, 0.35%)</title><rect x="83.2926%" y="437" width="0.3546%" height="15" fill="rgb(212,6,19)" fg:x="10569" fg:w="45"/><text x="83.4126%" y="447.50"></text></g><g><title>tokio::sync::batch_semaphore::Waiter::assign_permits (89 samples, 0.70%)</title><rect x="83.6473%" y="501" width="0.7014%" height="15" fill="rgb(218,1,36)" fg:x="10614" fg:w="89"/><text x="83.7673%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (51 samples, 0.40%)</title><rect x="83.9467%" y="485" width="0.4019%" height="15" fill="rgb(246,84,54)" fg:x="10652" fg:w="51"/><text x="84.0667%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (51 samples, 0.40%)</title><rect x="83.9467%" y="469" width="0.4019%" height="15" fill="rgb(242,110,6)" fg:x="10652" fg:w="51"/><text x="84.0667%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_add (2 samples, 0.02%)</title><rect x="84.3802%" y="405" width="0.0158%" height="15" fill="rgb(214,47,5)" fg:x="10707" fg:w="2"/><text x="84.5002%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (2 samples, 0.02%)</title><rect x="84.3802%" y="389" width="0.0158%" height="15" fill="rgb(218,159,25)" fg:x="10707" fg:w="2"/><text x="84.5002%" y="399.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (3 samples, 0.02%)</title><rect x="84.3802%" y="453" width="0.0236%" height="15" fill="rgb(215,211,28)" fg:x="10707" fg:w="3"/><text x="84.5002%" y="463.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (3 samples, 0.02%)</title><rect x="84.3802%" y="437" width="0.0236%" height="15" fill="rgb(238,59,32)" fg:x="10707" fg:w="3"/><text x="84.5002%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::notify_one (3 samples, 0.02%)</title><rect x="84.3802%" y="421" width="0.0236%" height="15" fill="rgb(226,82,3)" fg:x="10707" fg:w="3"/><text x="84.5002%" y="431.50"></text></g><g><title>tokio::runtime::park::wake (8 samples, 0.06%)</title><rect x="84.3644%" y="469" width="0.0630%" height="15" fill="rgb(240,164,32)" fg:x="10705" fg:w="8"/><text x="84.4844%" y="479.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (3 samples, 0.02%)</title><rect x="84.4038%" y="453" width="0.0236%" height="15" fill="rgb(232,46,7)" fg:x="10710" fg:w="3"/><text x="84.5238%" y="463.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (44 samples, 0.35%)</title><rect x="84.4432%" y="437" width="0.3468%" height="15" fill="rgb(229,129,53)" fg:x="10715" fg:w="44"/><text x="84.5632%" y="447.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (44 samples, 0.35%)</title><rect x="84.4432%" y="421" width="0.3468%" height="15" fill="rgb(234,188,29)" fg:x="10715" fg:w="44"/><text x="84.5632%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (44 samples, 0.35%)</title><rect x="84.4432%" y="405" width="0.3468%" height="15" fill="rgb(246,141,4)" fg:x="10715" fg:w="44"/><text x="84.5632%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_sub (44 samples, 0.35%)</title><rect x="84.4432%" y="389" width="0.3468%" height="15" fill="rgb(229,23,39)" fg:x="10715" fg:w="44"/><text x="84.5632%" y="399.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5 samples, 0.04%)</title><rect x="85.1525%" y="373" width="0.0394%" height="15" fill="rgb(206,12,3)" fg:x="10805" fg:w="5"/><text x="85.2725%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 0.04%)</title><rect x="85.1525%" y="357" width="0.0394%" height="15" fill="rgb(252,226,20)" fg:x="10805" fg:w="5"/><text x="85.2725%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (5 samples, 0.04%)</title><rect x="85.2471%" y="357" width="0.0394%" height="15" fill="rgb(216,123,35)" fg:x="10817" fg:w="5"/><text x="85.3671%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (5 samples, 0.04%)</title><rect x="85.2471%" y="341" width="0.0394%" height="15" fill="rgb(212,68,40)" fg:x="10817" fg:w="5"/><text x="85.3671%" y="351.50"></text></g><g><title>core::cell::BorrowRefMut::new (5 samples, 0.04%)</title><rect x="85.2471%" y="325" width="0.0394%" height="15" fill="rgb(254,125,32)" fg:x="10817" fg:w="5"/><text x="85.3671%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked (18 samples, 0.14%)</title><rect x="85.2865%" y="357" width="0.1419%" height="15" fill="rgb(253,97,22)" fg:x="10822" fg:w="18"/><text x="85.4065%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (90 samples, 0.71%)</title><rect x="84.8057%" y="421" width="0.7093%" height="15" fill="rgb(241,101,14)" fg:x="10761" fg:w="90"/><text x="84.9257%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (89 samples, 0.70%)</title><rect x="84.8136%" y="405" width="0.7014%" height="15" fill="rgb(238,103,29)" fg:x="10762" fg:w="89"/><text x="84.9336%" y="415.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (85 samples, 0.67%)</title><rect x="84.8451%" y="389" width="0.6699%" height="15" fill="rgb(233,195,47)" fg:x="10766" fg:w="85"/><text x="84.9651%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::{{closure}} (41 samples, 0.32%)</title><rect x="85.1919%" y="373" width="0.3231%" height="15" fill="rgb(246,218,30)" fg:x="10810" fg:w="41"/><text x="85.3119%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (11 samples, 0.09%)</title><rect x="85.4283%" y="357" width="0.0867%" height="15" fill="rgb(219,145,47)" fg:x="10840" fg:w="11"/><text x="85.5483%" y="367.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::from_raw (2 samples, 0.02%)</title><rect x="85.5150%" y="405" width="0.0158%" height="15" fill="rgb(243,12,26)" fg:x="10851" fg:w="2"/><text x="85.6350%" y="415.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (97 samples, 0.76%)</title><rect x="84.7900%" y="437" width="0.7644%" height="15" fill="rgb(214,87,16)" fg:x="10759" fg:w="97"/><text x="84.9100%" y="447.50"></text></g><g><title>tokio::runtime::task::raw::schedule (5 samples, 0.04%)</title><rect x="85.5150%" y="421" width="0.0394%" height="15" fill="rgb(208,99,42)" fg:x="10851" fg:w="5"/><text x="85.6350%" y="431.50"></text></g><g><title>tokio::runtime::task::core::Header::get_scheduler (3 samples, 0.02%)</title><rect x="85.5308%" y="405" width="0.0236%" height="15" fill="rgb(253,99,2)" fg:x="10853" fg:w="3"/><text x="85.6508%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (34 samples, 0.27%)</title><rect x="85.5544%" y="405" width="0.2679%" height="15" fill="rgb(220,168,23)" fg:x="10856" fg:w="34"/><text x="85.6744%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (34 samples, 0.27%)</title><rect x="85.5544%" y="389" width="0.2679%" height="15" fill="rgb(242,38,24)" fg:x="10856" fg:w="34"/><text x="85.6744%" y="399.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (400 samples, 3.15%)</title><rect x="82.8592%" y="517" width="3.1523%" height="15" fill="rgb(225,182,9)" fg:x="10514" fg:w="400"/><text x="82.9792%" y="527.50">tokio::sy..</text></g><g><title>tokio::util::wake_list::WakeList::wake_all (211 samples, 1.66%)</title><rect x="84.3486%" y="501" width="1.6629%" height="15" fill="rgb(243,178,37)" fg:x="10703" fg:w="211"/><text x="84.4686%" y="511.50">tok..</text></g><g><title>core::task::wake::Waker::wake (211 samples, 1.66%)</title><rect x="84.3486%" y="485" width="1.6629%" height="15" fill="rgb(232,139,19)" fg:x="10703" fg:w="211"/><text x="84.4686%" y="495.50">cor..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (201 samples, 1.58%)</title><rect x="84.4275%" y="469" width="1.5840%" height="15" fill="rgb(225,201,24)" fg:x="10713" fg:w="201"/><text x="84.5475%" y="479.50">tok..</text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (201 samples, 1.58%)</title><rect x="84.4275%" y="453" width="1.5840%" height="15" fill="rgb(221,47,46)" fg:x="10713" fg:w="201"/><text x="84.5475%" y="463.50">tok..</text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (58 samples, 0.46%)</title><rect x="85.5544%" y="437" width="0.4571%" height="15" fill="rgb(249,23,13)" fg:x="10856" fg:w="58"/><text x="85.6744%" y="447.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (58 samples, 0.46%)</title><rect x="85.5544%" y="421" width="0.4571%" height="15" fill="rgb(219,9,5)" fg:x="10856" fg:w="58"/><text x="85.6744%" y="431.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val::{{closure}} (24 samples, 0.19%)</title><rect x="85.8224%" y="405" width="0.1891%" height="15" fill="rgb(254,171,16)" fg:x="10890" fg:w="24"/><text x="85.9424%" y="415.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::ref_inc (24 samples, 0.19%)</title><rect x="85.8224%" y="389" width="0.1891%" height="15" fill="rgb(230,171,20)" fg:x="10890" fg:w="24"/><text x="85.9424%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (40 samples, 0.32%)</title><rect x="86.2085%" y="437" width="0.3152%" height="15" fill="rgb(210,71,41)" fg:x="10939" fg:w="40"/><text x="86.3285%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (40 samples, 0.32%)</title><rect x="86.2085%" y="421" width="0.3152%" height="15" fill="rgb(206,173,20)" fg:x="10939" fg:w="40"/><text x="86.3285%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mutex::MutexGuard&lt;alloc::collections::vec_deque::VecDeque&lt;alloc::string::String&gt;&gt;&gt; (485 samples, 3.82%)</title><rect x="82.7173%" y="549" width="3.8222%" height="15" fill="rgb(233,88,34)" fg:x="10496" fg:w="485"/><text x="82.8373%" y="559.50">core::ptr::..</text></g><g><title>&lt;tokio::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (485 samples, 3.82%)</title><rect x="82.7173%" y="533" width="3.8222%" height="15" fill="rgb(223,209,46)" fg:x="10496" fg:w="485"/><text x="82.8373%" y="543.50">&lt;tokio::syn..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (67 samples, 0.53%)</title><rect x="86.0115%" y="517" width="0.5280%" height="15" fill="rgb(250,43,18)" fg:x="10914" fg:w="67"/><text x="86.1315%" y="527.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (67 samples, 0.53%)</title><rect x="86.0115%" y="501" width="0.5280%" height="15" fill="rgb(208,13,10)" fg:x="10914" fg:w="67"/><text x="86.1315%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (67 samples, 0.53%)</title><rect x="86.0115%" y="485" width="0.5280%" height="15" fill="rgb(212,200,36)" fg:x="10914" fg:w="67"/><text x="86.1315%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (67 samples, 0.53%)</title><rect x="86.0115%" y="469" width="0.5280%" height="15" fill="rgb(225,90,30)" fg:x="10914" fg:w="67"/><text x="86.1315%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (67 samples, 0.53%)</title><rect x="86.0115%" y="453" width="0.5280%" height="15" fill="rgb(236,182,39)" fg:x="10914" fg:w="67"/><text x="86.1315%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (2 samples, 0.02%)</title><rect x="86.5238%" y="437" width="0.0158%" height="15" fill="rgb(212,144,35)" fg:x="10979" fg:w="2"/><text x="86.6438%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (2 samples, 0.02%)</title><rect x="86.5238%" y="421" width="0.0158%" height="15" fill="rgb(228,63,44)" fg:x="10979" fg:w="2"/><text x="86.6438%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (2 samples, 0.02%)</title><rect x="86.5238%" y="405" width="0.0158%" height="15" fill="rgb(228,109,6)" fg:x="10979" fg:w="2"/><text x="86.6438%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="86.5238%" y="389" width="0.0158%" height="15" fill="rgb(238,117,24)" fg:x="10979" fg:w="2"/><text x="86.6438%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.02%)</title><rect x="86.5553%" y="437" width="0.0236%" height="15" fill="rgb(242,26,26)" fg:x="10983" fg:w="3"/><text x="86.6753%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.02%)</title><rect x="86.5553%" y="421" width="0.0236%" height="15" fill="rgb(221,92,48)" fg:x="10983" fg:w="3"/><text x="86.6753%" y="431.50"></text></g><g><title>alloc::string::String::push_str (3 samples, 0.02%)</title><rect x="86.5553%" y="405" width="0.0236%" height="15" fill="rgb(209,209,32)" fg:x="10983" fg:w="3"/><text x="86.6753%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.02%)</title><rect x="86.5553%" y="389" width="0.0236%" height="15" fill="rgb(221,70,22)" fg:x="10983" fg:w="3"/><text x="86.6753%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.02%)</title><rect x="86.5553%" y="373" width="0.0236%" height="15" fill="rgb(248,145,5)" fg:x="10983" fg:w="3"/><text x="86.6753%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.02%)</title><rect x="86.5553%" y="357" width="0.0236%" height="15" fill="rgb(226,116,26)" fg:x="10983" fg:w="3"/><text x="86.6753%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.02%)</title><rect x="86.5553%" y="341" width="0.0236%" height="15" fill="rgb(244,5,17)" fg:x="10983" fg:w="3"/><text x="86.6753%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.02%)</title><rect x="86.5553%" y="325" width="0.0236%" height="15" fill="rgb(252,159,33)" fg:x="10983" fg:w="3"/><text x="86.6753%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.02%)</title><rect x="86.5553%" y="309" width="0.0236%" height="15" fill="rgb(206,71,0)" fg:x="10983" fg:w="3"/><text x="86.6753%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.02%)</title><rect x="86.5553%" y="293" width="0.0236%" height="15" fill="rgb(233,118,54)" fg:x="10983" fg:w="3"/><text x="86.6753%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.02%)</title><rect x="86.5632%" y="277" width="0.0158%" height="15" fill="rgb(234,83,48)" fg:x="10984" fg:w="2"/><text x="86.6832%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.02%)</title><rect x="86.5632%" y="261" width="0.0158%" height="15" fill="rgb(228,3,54)" fg:x="10984" fg:w="2"/><text x="86.6832%" y="271.50"></text></g><g><title>alloc::fmt::format (8 samples, 0.06%)</title><rect x="86.5395%" y="533" width="0.0630%" height="15" fill="rgb(226,155,13)" fg:x="10981" fg:w="8"/><text x="86.6595%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (8 samples, 0.06%)</title><rect x="86.5395%" y="517" width="0.0630%" height="15" fill="rgb(241,28,37)" fg:x="10981" fg:w="8"/><text x="86.6595%" y="527.50"></text></g><g><title>alloc::fmt::format::{{closure}} (8 samples, 0.06%)</title><rect x="86.5395%" y="501" width="0.0630%" height="15" fill="rgb(233,93,10)" fg:x="10981" fg:w="8"/><text x="86.6595%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (8 samples, 0.06%)</title><rect x="86.5395%" y="485" width="0.0630%" height="15" fill="rgb(225,113,19)" fg:x="10981" fg:w="8"/><text x="86.6595%" y="495.50"></text></g><g><title>core::fmt::Write::write_fmt (7 samples, 0.06%)</title><rect x="86.5474%" y="469" width="0.0552%" height="15" fill="rgb(241,2,18)" fg:x="10982" fg:w="7"/><text x="86.6674%" y="479.50"></text></g><g><title>core::fmt::write (7 samples, 0.06%)</title><rect x="86.5474%" y="453" width="0.0552%" height="15" fill="rgb(228,207,21)" fg:x="10982" fg:w="7"/><text x="86.6674%" y="463.50"></text></g><g><title>&lt;chrono::naive::date::NaiveDate as core::fmt::Debug&gt;::fmt (3 samples, 0.02%)</title><rect x="86.5789%" y="437" width="0.0236%" height="15" fill="rgb(213,211,35)" fg:x="10986" fg:w="3"/><text x="86.6989%" y="447.50"></text></g><g><title>chrono::naive::date::NaiveDate::mdf (3 samples, 0.02%)</title><rect x="86.5789%" y="421" width="0.0236%" height="15" fill="rgb(209,83,10)" fg:x="10986" fg:w="3"/><text x="86.6989%" y="431.50"></text></g><g><title>chrono::naive::internals::Of::to_mdf (3 samples, 0.02%)</title><rect x="86.5789%" y="405" width="0.0236%" height="15" fill="rgb(209,164,1)" fg:x="10986" fg:w="3"/><text x="86.6989%" y="415.50"></text></g><g><title>chrono::naive::internals::Mdf::from_of (3 samples, 0.02%)</title><rect x="86.5789%" y="389" width="0.0236%" height="15" fill="rgb(213,184,43)" fg:x="10986" fg:w="3"/><text x="86.6989%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.09%)</title><rect x="86.6341%" y="421" width="0.0867%" height="15" fill="rgb(231,61,34)" fg:x="10993" fg:w="11"/><text x="86.7541%" y="431.50"></text></g><g><title>&lt;dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::LineInfo&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (11 samples, 0.09%)</title><rect x="86.6341%" y="405" width="0.0867%" height="15" fill="rgb(235,75,3)" fg:x="10993" fg:w="11"/><text x="86.7541%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (11 samples, 0.09%)</title><rect x="86.6341%" y="389" width="0.0867%" height="15" fill="rgb(220,106,47)" fg:x="10993" fg:w="11"/><text x="86.7541%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.09%)</title><rect x="86.6341%" y="373" width="0.0867%" height="15" fill="rgb(210,196,33)" fg:x="10993" fg:w="11"/><text x="86.7541%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (11 samples, 0.09%)</title><rect x="86.6341%" y="357" width="0.0867%" height="15" fill="rgb(229,154,42)" fg:x="10993" fg:w="11"/><text x="86.7541%" y="367.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (11 samples, 0.09%)</title><rect x="86.6341%" y="341" width="0.0867%" height="15" fill="rgb(228,114,26)" fg:x="10993" fg:w="11"/><text x="86.7541%" y="351.50"></text></g><g><title>serde::de::MapAccess::next_key (16 samples, 0.13%)</title><rect x="86.6262%" y="453" width="0.1261%" height="15" fill="rgb(208,144,1)" fg:x="10992" fg:w="16"/><text x="86.7462%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (16 samples, 0.13%)</title><rect x="86.6262%" y="437" width="0.1261%" height="15" fill="rgb(239,112,37)" fg:x="10992" fg:w="16"/><text x="86.7462%" y="447.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (4 samples, 0.03%)</title><rect x="86.7208%" y="421" width="0.0315%" height="15" fill="rgb(210,96,50)" fg:x="11004" fg:w="4"/><text x="86.8408%" y="431.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (4 samples, 0.03%)</title><rect x="86.7208%" y="405" width="0.0315%" height="15" fill="rgb(222,178,2)" fg:x="11004" fg:w="4"/><text x="86.8408%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (4 samples, 0.03%)</title><rect x="86.7208%" y="389" width="0.0315%" height="15" fill="rgb(226,74,18)" fg:x="11004" fg:w="4"/><text x="86.8408%" y="399.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (4 samples, 0.03%)</title><rect x="86.7208%" y="373" width="0.0315%" height="15" fill="rgb(225,67,54)" fg:x="11004" fg:w="4"/><text x="86.8408%" y="383.50"></text></g><g><title>chrono::format::parse::parse (2 samples, 0.02%)</title><rect x="86.7602%" y="325" width="0.0158%" height="15" fill="rgb(251,92,32)" fg:x="11009" fg:w="2"/><text x="86.8802%" y="335.50"></text></g><g><title>chrono::format::parse::parse_internal (2 samples, 0.02%)</title><rect x="86.7602%" y="309" width="0.0158%" height="15" fill="rgb(228,149,22)" fg:x="11009" fg:w="2"/><text x="86.8802%" y="319.50"></text></g><g><title>chrono::format::parsed::Parsed::to_naive_datetime_with_offset (4 samples, 0.03%)</title><rect x="86.7759%" y="309" width="0.0315%" height="15" fill="rgb(243,54,13)" fg:x="11011" fg:w="4"/><text x="86.8959%" y="319.50"></text></g><g><title>&lt;&lt;dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::LineInfo&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map::__DeserializeWith as serde::de::Deserialize&gt;::deserialize (10 samples, 0.08%)</title><rect x="86.7523%" y="405" width="0.0788%" height="15" fill="rgb(243,180,28)" fg:x="11008" fg:w="10"/><text x="86.8723%" y="415.50"></text></g><g><title>dads_gzip_thing::parse_timestamp (10 samples, 0.08%)</title><rect x="86.7523%" y="389" width="0.0788%" height="15" fill="rgb(208,167,24)" fg:x="11008" fg:w="10"/><text x="86.8723%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (10 samples, 0.08%)</title><rect x="86.7523%" y="373" width="0.0788%" height="15" fill="rgb(245,73,45)" fg:x="11008" fg:w="10"/><text x="86.8723%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (10 samples, 0.08%)</title><rect x="86.7523%" y="357" width="0.0788%" height="15" fill="rgb(237,203,48)" fg:x="11008" fg:w="10"/><text x="86.8723%" y="367.50"></text></g><g><title>chrono::datetime::DateTime&lt;chrono::offset::fixed::FixedOffset&gt;::parse_from_rfc3339 (9 samples, 0.07%)</title><rect x="86.7602%" y="341" width="0.0709%" height="15" fill="rgb(211,197,16)" fg:x="11009" fg:w="9"/><text x="86.8802%" y="351.50"></text></g><g><title>chrono::format::parsed::Parsed::to_datetime (7 samples, 0.06%)</title><rect x="86.7759%" y="325" width="0.0552%" height="15" fill="rgb(243,99,51)" fg:x="11011" fg:w="7"/><text x="86.8959%" y="335.50"></text></g><g><title>chrono::offset::TimeZone::from_local_datetime (3 samples, 0.02%)</title><rect x="86.8075%" y="309" width="0.0236%" height="15" fill="rgb(215,123,29)" fg:x="11015" fg:w="3"/><text x="86.9275%" y="319.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::map (3 samples, 0.02%)</title><rect x="86.8075%" y="293" width="0.0236%" height="15" fill="rgb(239,186,37)" fg:x="11015" fg:w="3"/><text x="86.9275%" y="303.50"></text></g><g><title>chrono::offset::TimeZone::from_local_datetime::{{closure}} (2 samples, 0.02%)</title><rect x="86.8154%" y="277" width="0.0158%" height="15" fill="rgb(252,136,39)" fg:x="11016" fg:w="2"/><text x="86.9354%" y="287.50"></text></g><g><title>chrono::offset::fixed::&lt;impl core::ops::arith::Sub&lt;chrono::offset::fixed::FixedOffset&gt; for chrono::naive::datetime::NaiveDateTime&gt;::sub (2 samples, 0.02%)</title><rect x="86.8154%" y="261" width="0.0158%" height="15" fill="rgb(223,213,32)" fg:x="11016" fg:w="2"/><text x="86.9354%" y="271.50"></text></g><g><title>chrono::offset::fixed::add_with_leapsecond (2 samples, 0.02%)</title><rect x="86.8154%" y="245" width="0.0158%" height="15" fill="rgb(233,115,5)" fg:x="11016" fg:w="2"/><text x="86.9354%" y="255.50"></text></g><g><title>&lt;chrono::naive::datetime::NaiveDateTime as core::ops::arith::Add&lt;time::duration::Duration&gt;&gt;::add (2 samples, 0.02%)</title><rect x="86.8154%" y="229" width="0.0158%" height="15" fill="rgb(207,226,44)" fg:x="11016" fg:w="2"/><text x="86.9354%" y="239.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_signed (2 samples, 0.02%)</title><rect x="86.8154%" y="213" width="0.0158%" height="15" fill="rgb(208,126,0)" fg:x="11016" fg:w="2"/><text x="86.9354%" y="223.50"></text></g><g><title>chrono::naive::date::NaiveDate::checked_add_signed (2 samples, 0.02%)</title><rect x="86.8154%" y="197" width="0.0158%" height="15" fill="rgb(244,66,21)" fg:x="11016" fg:w="2"/><text x="86.9354%" y="207.50"></text></g><g><title>chrono::naive::internals::Of::new (2 samples, 0.02%)</title><rect x="86.8154%" y="181" width="0.0158%" height="15" fill="rgb(222,97,12)" fg:x="11016" fg:w="2"/><text x="86.9354%" y="191.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (63 samples, 0.50%)</title><rect x="86.8626%" y="357" width="0.4965%" height="15" fill="rgb(219,213,19)" fg:x="11022" fg:w="63"/><text x="86.9826%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (4 samples, 0.03%)</title><rect x="87.3591%" y="357" width="0.0315%" height="15" fill="rgb(252,169,30)" fg:x="11085" fg:w="4"/><text x="87.4791%" y="367.50"></text></g><g><title>&lt;serde::de::ignored_any::IgnoredAny as serde::de::Deserialize&gt;::deserialize (82 samples, 0.65%)</title><rect x="86.8311%" y="405" width="0.6462%" height="15" fill="rgb(206,32,51)" fg:x="11018" fg:w="82"/><text x="86.9511%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_ignored_any (82 samples, 0.65%)</title><rect x="86.8311%" y="389" width="0.6462%" height="15" fill="rgb(250,172,42)" fg:x="11018" fg:w="82"/><text x="86.9511%" y="399.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::ignore_value (82 samples, 0.65%)</title><rect x="86.8311%" y="373" width="0.6462%" height="15" fill="rgb(209,34,43)" fg:x="11018" fg:w="82"/><text x="86.9511%" y="383.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (10 samples, 0.08%)</title><rect x="87.3985%" y="357" width="0.0788%" height="15" fill="rgb(223,11,35)" fg:x="11090" fg:w="10"/><text x="87.5185%" y="367.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (16 samples, 0.13%)</title><rect x="87.4773%" y="325" width="0.1261%" height="15" fill="rgb(251,219,26)" fg:x="11100" fg:w="16"/><text x="87.5973%" y="335.50"></text></g><g><title>&lt;dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::Meta&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (16 samples, 0.13%)</title><rect x="87.4773%" y="309" width="0.1261%" height="15" fill="rgb(231,119,3)" fg:x="11100" fg:w="16"/><text x="87.5973%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (16 samples, 0.13%)</title><rect x="87.4773%" y="293" width="0.1261%" height="15" fill="rgb(216,97,11)" fg:x="11100" fg:w="16"/><text x="87.5973%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 0.13%)</title><rect x="87.4773%" y="277" width="0.1261%" height="15" fill="rgb(223,59,9)" fg:x="11100" fg:w="16"/><text x="87.5973%" y="287.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (14 samples, 0.11%)</title><rect x="87.4931%" y="261" width="0.1103%" height="15" fill="rgb(233,93,31)" fg:x="11102" fg:w="14"/><text x="87.6131%" y="271.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (14 samples, 0.11%)</title><rect x="87.4931%" y="245" width="0.1103%" height="15" fill="rgb(239,81,33)" fg:x="11102" fg:w="14"/><text x="87.6131%" y="255.50"></text></g><g><title>serde::de::MapAccess::next_key (19 samples, 0.15%)</title><rect x="87.4773%" y="357" width="0.1497%" height="15" fill="rgb(213,120,34)" fg:x="11100" fg:w="19"/><text x="87.5973%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (19 samples, 0.15%)</title><rect x="87.4773%" y="341" width="0.1497%" height="15" fill="rgb(243,49,53)" fg:x="11100" fg:w="19"/><text x="87.5973%" y="351.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (3 samples, 0.02%)</title><rect x="87.6034%" y="325" width="0.0236%" height="15" fill="rgb(247,216,33)" fg:x="11116" fg:w="3"/><text x="87.7234%" y="335.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (5 samples, 0.04%)</title><rect x="87.6350%" y="261" width="0.0394%" height="15" fill="rgb(226,26,14)" fg:x="11120" fg:w="5"/><text x="87.7550%" y="271.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::ignore_integer (2 samples, 0.02%)</title><rect x="87.6744%" y="261" width="0.0158%" height="15" fill="rgb(215,49,53)" fg:x="11125" fg:w="2"/><text x="87.7944%" y="271.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (2 samples, 0.02%)</title><rect x="87.6744%" y="245" width="0.0158%" height="15" fill="rgb(245,162,40)" fg:x="11125" fg:w="2"/><text x="87.7944%" y="255.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (2 samples, 0.02%)</title><rect x="87.6744%" y="229" width="0.0158%" height="15" fill="rgb(229,68,17)" fg:x="11125" fg:w="2"/><text x="87.7944%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (2 samples, 0.02%)</title><rect x="87.6744%" y="213" width="0.0158%" height="15" fill="rgb(213,182,10)" fg:x="11125" fg:w="2"/><text x="87.7944%" y="223.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (2 samples, 0.02%)</title><rect x="87.6744%" y="197" width="0.0158%" height="15" fill="rgb(245,125,30)" fg:x="11125" fg:w="2"/><text x="87.7944%" y="207.50"></text></g><g><title>&lt;serde::de::ignored_any::IgnoredAny as serde::de::Deserialize&gt;::deserialize (9 samples, 0.07%)</title><rect x="87.6271%" y="309" width="0.0709%" height="15" fill="rgb(232,202,2)" fg:x="11119" fg:w="9"/><text x="87.7471%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_ignored_any (9 samples, 0.07%)</title><rect x="87.6271%" y="293" width="0.0709%" height="15" fill="rgb(237,140,51)" fg:x="11119" fg:w="9"/><text x="87.7471%" y="303.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::ignore_value (9 samples, 0.07%)</title><rect x="87.6271%" y="277" width="0.0709%" height="15" fill="rgb(236,157,25)" fg:x="11119" fg:w="9"/><text x="87.7471%" y="287.50"></text></g><g><title>dads_gzip_thing::get_key (149 samples, 1.17%)</title><rect x="86.5395%" y="549" width="1.1742%" height="15" fill="rgb(219,209,0)" fg:x="10981" fg:w="149"/><text x="86.6595%" y="559.50">da..</text></g><g><title>serde_json::de::from_str (141 samples, 1.11%)</title><rect x="86.6026%" y="533" width="1.1112%" height="15" fill="rgb(240,116,54)" fg:x="10989" fg:w="141"/><text x="86.7226%" y="543.50">s..</text></g><g><title>serde_json::de::from_trait (141 samples, 1.11%)</title><rect x="86.6026%" y="517" width="1.1112%" height="15" fill="rgb(216,10,36)" fg:x="10989" fg:w="141"/><text x="86.7226%" y="527.50">s..</text></g><g><title>dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::LineInfo&gt;::deserialize (140 samples, 1.10%)</title><rect x="86.6104%" y="501" width="1.1033%" height="15" fill="rgb(222,72,44)" fg:x="10990" fg:w="140"/><text x="86.7304%" y="511.50">d..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (140 samples, 1.10%)</title><rect x="86.6104%" y="485" width="1.1033%" height="15" fill="rgb(232,159,9)" fg:x="10990" fg:w="140"/><text x="86.7304%" y="495.50">&lt;..</text></g><g><title>&lt;dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::LineInfo&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (140 samples, 1.10%)</title><rect x="86.6104%" y="469" width="1.1033%" height="15" fill="rgb(210,39,32)" fg:x="10990" fg:w="140"/><text x="86.7304%" y="479.50">&lt;..</text></g><g><title>serde::de::MapAccess::next_value (122 samples, 0.96%)</title><rect x="86.7523%" y="453" width="0.9615%" height="15" fill="rgb(216,194,45)" fg:x="11008" fg:w="122"/><text x="86.8723%" y="463.50">s..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (122 samples, 0.96%)</title><rect x="86.7523%" y="437" width="0.9615%" height="15" fill="rgb(218,18,35)" fg:x="11008" fg:w="122"/><text x="86.8723%" y="447.50">&lt;..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (122 samples, 0.96%)</title><rect x="86.7523%" y="421" width="0.9615%" height="15" fill="rgb(207,83,51)" fg:x="11008" fg:w="122"/><text x="86.8723%" y="431.50">&lt;..</text></g><g><title>dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::Meta&gt;::deserialize (30 samples, 0.24%)</title><rect x="87.4773%" y="405" width="0.2364%" height="15" fill="rgb(225,63,43)" fg:x="11100" fg:w="30"/><text x="87.5973%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (30 samples, 0.24%)</title><rect x="87.4773%" y="389" width="0.2364%" height="15" fill="rgb(207,57,36)" fg:x="11100" fg:w="30"/><text x="87.5973%" y="399.50"></text></g><g><title>&lt;dads_gzip_thing::_::&lt;impl serde::de::Deserialize for dads_gzip_thing::Meta&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (30 samples, 0.24%)</title><rect x="87.4773%" y="373" width="0.2364%" height="15" fill="rgb(216,99,33)" fg:x="11100" fg:w="30"/><text x="87.5973%" y="383.50"></text></g><g><title>serde::de::MapAccess::next_value (11 samples, 0.09%)</title><rect x="87.6271%" y="357" width="0.0867%" height="15" fill="rgb(225,42,16)" fg:x="11119" fg:w="11"/><text x="87.7471%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (11 samples, 0.09%)</title><rect x="87.6271%" y="341" width="0.0867%" height="15" fill="rgb(220,201,45)" fg:x="11119" fg:w="11"/><text x="87.7471%" y="351.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.09%)</title><rect x="87.6271%" y="325" width="0.0867%" height="15" fill="rgb(225,33,4)" fg:x="11119" fg:w="11"/><text x="87.7471%" y="335.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (2 samples, 0.02%)</title><rect x="87.6980%" y="309" width="0.0158%" height="15" fill="rgb(224,33,50)" fg:x="11128" fg:w="2"/><text x="87.8180%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (2 samples, 0.02%)</title><rect x="87.6980%" y="293" width="0.0158%" height="15" fill="rgb(246,198,51)" fg:x="11128" fg:w="2"/><text x="87.8180%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (2 samples, 0.02%)</title><rect x="87.6980%" y="277" width="0.0158%" height="15" fill="rgb(205,22,4)" fg:x="11128" fg:w="2"/><text x="87.8180%" y="287.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.02%)</title><rect x="87.6980%" y="261" width="0.0158%" height="15" fill="rgb(206,3,8)" fg:x="11128" fg:w="2"/><text x="87.8180%" y="271.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (2 samples, 0.02%)</title><rect x="87.6980%" y="245" width="0.0158%" height="15" fill="rgb(251,23,15)" fg:x="11128" fg:w="2"/><text x="87.8180%" y="255.50"></text></g><g><title>std::path::Path::join (2 samples, 0.02%)</title><rect x="87.7138%" y="533" width="0.0158%" height="15" fill="rgb(252,88,28)" fg:x="11130" fg:w="2"/><text x="87.8338%" y="543.50"></text></g><g><title>std::path::Path::_join (2 samples, 0.02%)</title><rect x="87.7138%" y="517" width="0.0158%" height="15" fill="rgb(212,127,14)" fg:x="11130" fg:w="2"/><text x="87.8338%" y="527.50"></text></g><g><title>std::path::PathBuf::push (2 samples, 0.02%)</title><rect x="87.7138%" y="501" width="0.0158%" height="15" fill="rgb(247,145,37)" fg:x="11130" fg:w="2"/><text x="87.8338%" y="511.50"></text></g><g><title>std::path::PathBuf::_push (2 samples, 0.02%)</title><rect x="87.7138%" y="485" width="0.0158%" height="15" fill="rgb(209,117,53)" fg:x="11130" fg:w="2"/><text x="87.8338%" y="495.50"></text></g><g><title>std::ffi::os_str::OsString::push (2 samples, 0.02%)</title><rect x="87.7138%" y="469" width="0.0158%" height="15" fill="rgb(212,90,42)" fg:x="11130" fg:w="2"/><text x="87.8338%" y="479.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (2 samples, 0.02%)</title><rect x="87.7138%" y="453" width="0.0158%" height="15" fill="rgb(218,164,37)" fg:x="11130" fg:w="2"/><text x="87.8338%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.02%)</title><rect x="87.7138%" y="437" width="0.0158%" height="15" fill="rgb(246,65,34)" fg:x="11130" fg:w="2"/><text x="87.8338%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.02%)</title><rect x="87.7138%" y="421" width="0.0158%" height="15" fill="rgb(231,100,33)" fg:x="11130" fg:w="2"/><text x="87.8338%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.02%)</title><rect x="87.7138%" y="405" width="0.0158%" height="15" fill="rgb(228,126,14)" fg:x="11130" fg:w="2"/><text x="87.8338%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="87.7138%" y="389" width="0.0158%" height="15" fill="rgb(215,173,21)" fg:x="11130" fg:w="2"/><text x="87.8338%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="87.7138%" y="373" width="0.0158%" height="15" fill="rgb(210,6,40)" fg:x="11130" fg:w="2"/><text x="87.8338%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.02%)</title><rect x="87.7138%" y="357" width="0.0158%" height="15" fill="rgb(212,48,18)" fg:x="11130" fg:w="2"/><text x="87.8338%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.02%)</title><rect x="87.7138%" y="341" width="0.0158%" height="15" fill="rgb(230,214,11)" fg:x="11130" fg:w="2"/><text x="87.8338%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (2 samples, 0.02%)</title><rect x="87.7295%" y="357" width="0.0158%" height="15" fill="rgb(254,105,39)" fg:x="11132" fg:w="2"/><text x="87.8495%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.02%)</title><rect x="87.7295%" y="485" width="0.0236%" height="15" fill="rgb(245,158,5)" fg:x="11132" fg:w="3"/><text x="87.8495%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.02%)</title><rect x="87.7295%" y="469" width="0.0236%" height="15" fill="rgb(249,208,11)" fg:x="11132" fg:w="3"/><text x="87.8495%" y="479.50"></text></g><g><title>std::path::rsplit_file_at_dot (3 samples, 0.02%)</title><rect x="87.7295%" y="453" width="0.0236%" height="15" fill="rgb(210,39,28)" fg:x="11132" fg:w="3"/><text x="87.8495%" y="463.50"></text></g><g><title>&lt;core::slice::iter::RSplitN&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="87.7295%" y="437" width="0.0236%" height="15" fill="rgb(211,56,53)" fg:x="11132" fg:w="3"/><text x="87.8495%" y="447.50"></text></g><g><title>&lt;core::slice::iter::GenericSplitN&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="87.7295%" y="421" width="0.0236%" height="15" fill="rgb(226,201,30)" fg:x="11132" fg:w="3"/><text x="87.8495%" y="431.50"></text></g><g><title>&lt;core::slice::iter::RSplit&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="87.7295%" y="405" width="0.0236%" height="15" fill="rgb(239,101,34)" fg:x="11132" fg:w="3"/><text x="87.8495%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (3 samples, 0.02%)</title><rect x="87.7295%" y="389" width="0.0236%" height="15" fill="rgb(226,209,5)" fg:x="11132" fg:w="3"/><text x="87.8495%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (3 samples, 0.02%)</title><rect x="87.7295%" y="373" width="0.0236%" height="15" fill="rgb(250,105,47)" fg:x="11132" fg:w="3"/><text x="87.8495%" y="383.50"></text></g><g><title>dads_gzip_thing::output_key_to_path (8 samples, 0.06%)</title><rect x="87.7138%" y="549" width="0.0630%" height="15" fill="rgb(230,72,3)" fg:x="11130" fg:w="8"/><text x="87.8338%" y="559.50"></text></g><g><title>std::path::PathBuf::set_extension (6 samples, 0.05%)</title><rect x="87.7295%" y="533" width="0.0473%" height="15" fill="rgb(232,218,39)" fg:x="11132" fg:w="6"/><text x="87.8495%" y="543.50"></text></g><g><title>std::path::PathBuf::_set_extension (6 samples, 0.05%)</title><rect x="87.7295%" y="517" width="0.0473%" height="15" fill="rgb(248,166,6)" fg:x="11132" fg:w="6"/><text x="87.8495%" y="527.50"></text></g><g><title>std::path::Path::file_stem (6 samples, 0.05%)</title><rect x="87.7295%" y="501" width="0.0473%" height="15" fill="rgb(247,89,20)" fg:x="11132" fg:w="6"/><text x="87.8495%" y="511.50"></text></g><g><title>std::path::Path::file_name (3 samples, 0.02%)</title><rect x="87.7532%" y="485" width="0.0236%" height="15" fill="rgb(248,130,54)" fg:x="11135" fg:w="3"/><text x="87.8732%" y="495.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (3 samples, 0.02%)</title><rect x="87.7532%" y="469" width="0.0236%" height="15" fill="rgb(234,196,4)" fg:x="11135" fg:w="3"/><text x="87.8732%" y="479.50"></text></g><g><title>std::path::Components::parse_next_component_back (2 samples, 0.02%)</title><rect x="87.7611%" y="453" width="0.0158%" height="15" fill="rgb(250,143,31)" fg:x="11136" fg:w="2"/><text x="87.8811%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (2 samples, 0.02%)</title><rect x="87.7611%" y="437" width="0.0158%" height="15" fill="rgb(211,110,34)" fg:x="11136" fg:w="2"/><text x="87.8811%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::broadcast::RecvGuard&lt;dads_gzip_thing::TaskBroadcastMessage&gt;&gt; (3 samples, 0.02%)</title><rect x="87.8083%" y="533" width="0.0236%" height="15" fill="rgb(215,124,48)" fg:x="11142" fg:w="3"/><text x="87.9283%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;tokio::sync::broadcast::Slot&lt;dads_gzip_thing::TaskBroadcastMessage&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="87.8083%" y="517" width="0.0236%" height="15" fill="rgb(216,46,13)" fg:x="11142" fg:w="3"/><text x="87.9283%" y="527.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="87.8083%" y="501" width="0.0236%" height="15" fill="rgb(205,184,25)" fg:x="11142" fg:w="3"/><text x="87.9283%" y="511.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (3 samples, 0.02%)</title><rect x="87.8083%" y="485" width="0.0236%" height="15" fill="rgb(228,1,10)" fg:x="11142" fg:w="3"/><text x="87.9283%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (3 samples, 0.02%)</title><rect x="87.8083%" y="469" width="0.0236%" height="15" fill="rgb(213,116,27)" fg:x="11142" fg:w="3"/><text x="87.9283%" y="479.50"></text></g><g><title>core::mem::drop (12 samples, 0.09%)</title><rect x="87.8320%" y="517" width="0.0946%" height="15" fill="rgb(241,95,50)" fg:x="11145" fg:w="12"/><text x="87.9520%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;tokio::sync::broadcast::Slot&lt;dads_gzip_thing::TaskBroadcastMessage&gt;&gt;&gt; (12 samples, 0.09%)</title><rect x="87.8320%" y="501" width="0.0946%" height="15" fill="rgb(238,48,32)" fg:x="11145" fg:w="12"/><text x="87.9520%" y="511.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.09%)</title><rect x="87.8320%" y="485" width="0.0946%" height="15" fill="rgb(235,113,49)" fg:x="11145" fg:w="12"/><text x="87.9520%" y="495.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (12 samples, 0.09%)</title><rect x="87.8320%" y="469" width="0.0946%" height="15" fill="rgb(205,127,43)" fg:x="11145" fg:w="12"/><text x="87.9520%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (12 samples, 0.09%)</title><rect x="87.8320%" y="453" width="0.0946%" height="15" fill="rgb(250,162,2)" fg:x="11145" fg:w="12"/><text x="87.9520%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (12 samples, 0.09%)</title><rect x="87.8320%" y="437" width="0.0946%" height="15" fill="rgb(220,13,41)" fg:x="11145" fg:w="12"/><text x="87.9520%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_sub (12 samples, 0.09%)</title><rect x="87.8320%" y="421" width="0.0946%" height="15" fill="rgb(249,221,25)" fg:x="11145" fg:w="12"/><text x="87.9520%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;tokio::sync::broadcast::Tail&gt;&gt; (282 samples, 2.22%)</title><rect x="87.9266%" y="517" width="2.2224%" height="15" fill="rgb(215,208,19)" fg:x="11157" fg:w="282"/><text x="88.0466%" y="527.50">core:..</text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (282 samples, 2.22%)</title><rect x="87.9266%" y="501" width="2.2224%" height="15" fill="rgb(236,175,2)" fg:x="11157" fg:w="282"/><text x="88.0466%" y="511.50">&lt;std:..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (282 samples, 2.22%)</title><rect x="87.9266%" y="485" width="2.2224%" height="15" fill="rgb(241,52,2)" fg:x="11157" fg:w="282"/><text x="88.0466%" y="495.50">std::..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (282 samples, 2.22%)</title><rect x="87.9266%" y="469" width="2.2224%" height="15" fill="rgb(248,140,14)" fg:x="11157" fg:w="282"/><text x="88.0466%" y="479.50">std::..</text></g><g><title>core::sync::atomic::AtomicU32::swap (282 samples, 2.22%)</title><rect x="87.9266%" y="453" width="2.2224%" height="15" fill="rgb(253,22,42)" fg:x="11157" fg:w="282"/><text x="88.0466%" y="463.50">core:..</text></g><g><title>core::sync::atomic::atomic_swap (282 samples, 2.22%)</title><rect x="87.9266%" y="437" width="2.2224%" height="15" fill="rgb(234,61,47)" fg:x="11157" fg:w="282"/><text x="88.0466%" y="447.50">core:..</text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (258 samples, 2.03%)</title><rect x="90.1568%" y="469" width="2.0333%" height="15" fill="rgb(208,226,15)" fg:x="11440" fg:w="258"/><text x="90.2768%" y="479.50">core:..</text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (258 samples, 2.03%)</title><rect x="90.1568%" y="453" width="2.0333%" height="15" fill="rgb(217,221,4)" fg:x="11440" fg:w="258"/><text x="90.2768%" y="463.50">core:..</text></g><g><title>core::sync::atomic::AtomicU32::load (233 samples, 1.84%)</title><rect x="92.1901%" y="469" width="1.8362%" height="15" fill="rgb(212,174,34)" fg:x="11698" fg:w="233"/><text x="92.3101%" y="479.50">core..</text></g><g><title>core::sync::atomic::atomic_load (233 samples, 1.84%)</title><rect x="92.1901%" y="453" width="1.8362%" height="15" fill="rgb(253,83,4)" fg:x="11698" fg:w="233"/><text x="92.3101%" y="463.50">core..</text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (8 samples, 0.06%)</title><rect x="94.0263%" y="453" width="0.0630%" height="15" fill="rgb(250,195,49)" fg:x="11931" fg:w="8"/><text x="94.1463%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (8 samples, 0.06%)</title><rect x="94.0263%" y="437" width="0.0630%" height="15" fill="rgb(241,192,25)" fg:x="11931" fg:w="8"/><text x="94.1463%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_contended (11 samples, 0.09%)</title><rect x="94.0263%" y="469" width="0.0867%" height="15" fill="rgb(208,124,10)" fg:x="11931" fg:w="11"/><text x="94.1463%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::spin_read (3 samples, 0.02%)</title><rect x="94.0894%" y="453" width="0.0236%" height="15" fill="rgb(222,33,0)" fg:x="11939" fg:w="3"/><text x="94.2094%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::spin_until (3 samples, 0.02%)</title><rect x="94.0894%" y="437" width="0.0236%" height="15" fill="rgb(234,209,28)" fg:x="11939" fg:w="3"/><text x="94.2094%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (3 samples, 0.02%)</title><rect x="94.0894%" y="421" width="0.0236%" height="15" fill="rgb(224,11,23)" fg:x="11939" fg:w="3"/><text x="94.2094%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.02%)</title><rect x="94.0894%" y="405" width="0.0236%" height="15" fill="rgb(232,99,1)" fg:x="11939" fg:w="3"/><text x="94.2094%" y="415.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (748 samples, 5.89%)</title><rect x="90.1489%" y="517" width="5.8949%" height="15" fill="rgb(237,95,45)" fg:x="11439" fg:w="748"/><text x="90.2689%" y="527.50">std::sync::rwlock:..</text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (748 samples, 5.89%)</title><rect x="90.1489%" y="501" width="5.8949%" height="15" fill="rgb(208,109,11)" fg:x="11439" fg:w="748"/><text x="90.2689%" y="511.50">std::sys_common::r..</text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (748 samples, 5.89%)</title><rect x="90.1489%" y="485" width="5.8949%" height="15" fill="rgb(216,190,48)" fg:x="11439" fg:w="748"/><text x="90.2689%" y="495.50">std::sys::unix::lo..</text></g><g><title>std::sys::unix::locks::futex_rwlock::is_read_lockable (245 samples, 1.93%)</title><rect x="94.1130%" y="469" width="1.9308%" height="15" fill="rgb(251,171,36)" fg:x="11942" fg:w="245"/><text x="94.2330%" y="479.50">std:..</text></g><g><title>core::hint::spin_loop (99 samples, 0.78%)</title><rect x="96.4300%" y="421" width="0.7802%" height="15" fill="rgb(230,62,22)" fg:x="12236" fg:w="99"/><text x="96.5500%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (99 samples, 0.78%)</title><rect x="96.4300%" y="405" width="0.7802%" height="15" fill="rgb(225,114,35)" fg:x="12236" fg:w="99"/><text x="96.5500%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,845 samples, 46.06%)</title><rect x="51.5249%" y="581" width="46.0635%" height="15" fill="rgb(215,118,42)" fg:x="6538" fg:w="5845"/><text x="51.6449%" y="591.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>dads_gzip_thing::process_lines::{{closure}} (2,633 samples, 20.75%)</title><rect x="76.8382%" y="565" width="20.7503%" height="15" fill="rgb(243,119,21)" fg:x="9750" fg:w="2633"/><text x="76.9582%" y="575.50">dads_gzip_thing::process_lines::{{closure}}</text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::try_recv (1,245 samples, 9.81%)</title><rect x="87.7768%" y="549" width="9.8116%" height="15" fill="rgb(252,177,53)" fg:x="11138" fg:w="1245"/><text x="87.8968%" y="559.50">tokio::sync::broadcast::Receiver..</text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (1,238 samples, 9.76%)</title><rect x="87.8320%" y="533" width="9.7565%" height="15" fill="rgb(237,209,29)" fg:x="11145" fg:w="1238"/><text x="87.9520%" y="543.50">tokio::sync::broadcast::Receiver..</text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (196 samples, 1.54%)</title><rect x="96.0438%" y="517" width="1.5446%" height="15" fill="rgb(212,65,23)" fg:x="12187" fg:w="196"/><text x="96.1638%" y="527.50">tok..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (196 samples, 1.54%)</title><rect x="96.0438%" y="501" width="1.5446%" height="15" fill="rgb(230,222,46)" fg:x="12187" fg:w="196"/><text x="96.1638%" y="511.50">std..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (196 samples, 1.54%)</title><rect x="96.0438%" y="485" width="1.5446%" height="15" fill="rgb(215,135,32)" fg:x="12187" fg:w="196"/><text x="96.1638%" y="495.50">std..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (196 samples, 1.54%)</title><rect x="96.0438%" y="469" width="1.5446%" height="15" fill="rgb(246,101,22)" fg:x="12187" fg:w="196"/><text x="96.1638%" y="479.50">std..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (195 samples, 1.54%)</title><rect x="96.0517%" y="453" width="1.5368%" height="15" fill="rgb(206,107,13)" fg:x="12188" fg:w="195"/><text x="96.1717%" y="463.50">std..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (195 samples, 1.54%)</title><rect x="96.0517%" y="437" width="1.5368%" height="15" fill="rgb(250,100,44)" fg:x="12188" fg:w="195"/><text x="96.1717%" y="447.50">std..</text></g><g><title>core::sync::atomic::AtomicU32::load (48 samples, 0.38%)</title><rect x="97.2102%" y="421" width="0.3783%" height="15" fill="rgb(231,147,38)" fg:x="12335" fg:w="48"/><text x="97.3302%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (48 samples, 0.38%)</title><rect x="97.2102%" y="405" width="0.3783%" height="15" fill="rgb(229,8,40)" fg:x="12335" fg:w="48"/><text x="97.3302%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::TaskIdGuard&gt; (10 samples, 0.08%)</title><rect x="97.5885%" y="581" width="0.0788%" height="15" fill="rgb(221,135,30)" fg:x="12383" fg:w="10"/><text x="97.7085%" y="591.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="97.6200%" y="565" width="0.0473%" height="15" fill="rgb(249,193,18)" fg:x="12387" fg:w="6"/><text x="97.7400%" y="575.50"></text></g><g><title>tokio::runtime::context::set_current_task_id (6 samples, 0.05%)</title><rect x="97.6200%" y="549" width="0.0473%" height="15" fill="rgb(209,133,39)" fg:x="12387" fg:w="6"/><text x="97.7400%" y="559.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6 samples, 0.05%)</title><rect x="97.6200%" y="533" width="0.0473%" height="15" fill="rgb(232,100,14)" fg:x="12387" fg:w="6"/><text x="97.7400%" y="543.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (6 samples, 0.05%)</title><rect x="97.6200%" y="517" width="0.0473%" height="15" fill="rgb(224,185,1)" fg:x="12387" fg:w="6"/><text x="97.7400%" y="527.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (6 samples, 0.05%)</title><rect x="97.6200%" y="501" width="0.0473%" height="15" fill="rgb(223,139,8)" fg:x="12387" fg:w="6"/><text x="97.7400%" y="511.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (3 samples, 0.02%)</title><rect x="97.6436%" y="485" width="0.0236%" height="15" fill="rgb(232,213,38)" fg:x="12390" fg:w="3"/><text x="97.7636%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3 samples, 0.02%)</title><rect x="97.6436%" y="469" width="0.0236%" height="15" fill="rgb(207,94,22)" fg:x="12390" fg:w="3"/><text x="97.7636%" y="479.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (5,896 samples, 46.47%)</title><rect x="51.2491%" y="725" width="46.4654%" height="15" fill="rgb(219,183,54)" fg:x="6503" fg:w="5896"/><text x="51.3691%" y="735.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (5,891 samples, 46.43%)</title><rect x="51.2885%" y="709" width="46.4260%" height="15" fill="rgb(216,185,54)" fg:x="6508" fg:w="5891"/><text x="51.4085%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,891 samples, 46.43%)</title><rect x="51.2885%" y="693" width="46.4260%" height="15" fill="rgb(254,217,39)" fg:x="6508" fg:w="5891"/><text x="51.4085%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,891 samples, 46.43%)</title><rect x="51.2885%" y="677" width="46.4260%" height="15" fill="rgb(240,178,23)" fg:x="6508" fg:w="5891"/><text x="51.4085%" y="687.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (5,891 samples, 46.43%)</title><rect x="51.2885%" y="661" width="46.4260%" height="15" fill="rgb(218,11,47)" fg:x="6508" fg:w="5891"/><text x="51.4085%" y="671.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (5,891 samples, 46.43%)</title><rect x="51.2885%" y="645" width="46.4260%" height="15" fill="rgb(218,51,51)" fg:x="6508" fg:w="5891"/><text x="51.4085%" y="655.50">tokio::runtime::task::harness::poll_future::{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (5,890 samples, 46.42%)</title><rect x="51.2964%" y="629" width="46.4182%" height="15" fill="rgb(238,126,27)" fg:x="6509" fg:w="5890"/><text x="51.4164%" y="639.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (5,883 samples, 46.36%)</title><rect x="51.3516%" y="613" width="46.3630%" height="15" fill="rgb(249,202,22)" fg:x="6516" fg:w="5883"/><text x="51.4716%" y="623.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (5,883 samples, 46.36%)</title><rect x="51.3516%" y="597" width="46.3630%" height="15" fill="rgb(254,195,49)" fg:x="6516" fg:w="5883"/><text x="51.4716%" y="607.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}}</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (6 samples, 0.05%)</title><rect x="97.6673%" y="581" width="0.0473%" height="15" fill="rgb(208,123,14)" fg:x="12393" fg:w="6"/><text x="97.7873%" y="591.50"></text></g><g><title>tokio::runtime::context::set_current_task_id (2 samples, 0.02%)</title><rect x="97.6988%" y="565" width="0.0158%" height="15" fill="rgb(224,200,8)" fg:x="12397" fg:w="2"/><text x="97.8188%" y="575.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="97.6988%" y="549" width="0.0158%" height="15" fill="rgb(217,61,36)" fg:x="12397" fg:w="2"/><text x="97.8188%" y="559.50"></text></g><g><title>tokio::runtime::context::set_current_task_id::{{closure}} (2 samples, 0.02%)</title><rect x="97.6988%" y="533" width="0.0158%" height="15" fill="rgb(206,35,45)" fg:x="12397" fg:w="2"/><text x="97.8188%" y="543.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.02%)</title><rect x="97.6988%" y="517" width="0.0158%" height="15" fill="rgb(217,65,33)" fg:x="12397" fg:w="2"/><text x="97.8188%" y="527.50"></text></g><g><title>core::mem::replace (2 samples, 0.02%)</title><rect x="97.6988%" y="501" width="0.0158%" height="15" fill="rgb(222,158,48)" fg:x="12397" fg:w="2"/><text x="97.8188%" y="511.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (111 samples, 0.87%)</title><rect x="97.7146%" y="725" width="0.8748%" height="15" fill="rgb(254,2,54)" fg:x="12399" fg:w="111"/><text x="97.8346%" y="735.50">t..</text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (55 samples, 0.43%)</title><rect x="98.1559%" y="709" width="0.4334%" height="15" fill="rgb(250,143,38)" fg:x="12455" fg:w="55"/><text x="98.2759%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (55 samples, 0.43%)</title><rect x="98.1559%" y="693" width="0.4334%" height="15" fill="rgb(248,25,0)" fg:x="12455" fg:w="55"/><text x="98.2759%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (55 samples, 0.43%)</title><rect x="98.1559%" y="677" width="0.4334%" height="15" fill="rgb(206,152,27)" fg:x="12455" fg:w="55"/><text x="98.2759%" y="687.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (100 samples, 0.79%)</title><rect x="98.5893%" y="725" width="0.7881%" height="15" fill="rgb(240,77,30)" fg:x="12510" fg:w="100"/><text x="98.7093%" y="735.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (100 samples, 0.79%)</title><rect x="98.5893%" y="709" width="0.7881%" height="15" fill="rgb(231,5,3)" fg:x="12510" fg:w="100"/><text x="98.7093%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (77 samples, 0.61%)</title><rect x="98.7706%" y="693" width="0.6068%" height="15" fill="rgb(207,226,32)" fg:x="12533" fg:w="77"/><text x="98.8906%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (77 samples, 0.61%)</title><rect x="98.7706%" y="677" width="0.6068%" height="15" fill="rgb(222,207,47)" fg:x="12533" fg:w="77"/><text x="98.8906%" y="687.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (6,164 samples, 48.58%)</title><rect x="50.8393%" y="789" width="48.5775%" height="15" fill="rgb(229,115,45)" fg:x="6451" fg:w="6164"/><text x="50.9593%" y="799.50">tokio::runtime::task::LocalNotified&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (6,164 samples, 48.58%)</title><rect x="50.8393%" y="773" width="48.5775%" height="15" fill="rgb(224,191,6)" fg:x="6451" fg:w="6164"/><text x="50.9593%" y="783.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (6,155 samples, 48.51%)</title><rect x="50.9102%" y="757" width="48.5066%" height="15" fill="rgb(230,227,24)" fg:x="6460" fg:w="6155"/><text x="51.0302%" y="767.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (6,128 samples, 48.29%)</title><rect x="51.1230%" y="741" width="48.2938%" height="15" fill="rgb(228,80,19)" fg:x="6487" fg:w="6128"/><text x="51.2430%" y="751.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::waker::waker_ref (5 samples, 0.04%)</title><rect x="99.3774%" y="725" width="0.0394%" height="15" fill="rgb(247,229,0)" fg:x="12610" fg:w="5"/><text x="99.4974%" y="735.50"></text></g><g><title>tokio::runtime::coop::budget (6,210 samples, 48.94%)</title><rect x="50.6581%" y="837" width="48.9400%" height="15" fill="rgb(237,194,15)" fg:x="6428" fg:w="6210"/><text x="50.7781%" y="847.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (6,210 samples, 48.94%)</title><rect x="50.6581%" y="821" width="48.9400%" height="15" fill="rgb(219,203,20)" fg:x="6428" fg:w="6210"/><text x="50.7781%" y="831.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}} (6,210 samples, 48.94%)</title><rect x="50.6581%" y="805" width="48.9400%" height="15" fill="rgb(234,128,8)" fg:x="6428" fg:w="6210"/><text x="50.7781%" y="815.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}}</text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::assert_owner (23 samples, 0.18%)</title><rect x="99.4168%" y="789" width="0.1813%" height="15" fill="rgb(248,202,8)" fg:x="12615" fg:w="23"/><text x="99.5368%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (6,213 samples, 48.96%)</title><rect x="50.6581%" y="853" width="48.9637%" height="15" fill="rgb(206,104,37)" fg:x="6428" fg:w="6213"/><text x="50.7781%" y="863.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_searching (3 samples, 0.02%)</title><rect x="99.5981%" y="837" width="0.0236%" height="15" fill="rgb(223,8,27)" fg:x="12638" fg:w="3"/><text x="99.7181%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (3 samples, 0.02%)</title><rect x="99.5981%" y="821" width="0.0236%" height="15" fill="rgb(216,217,28)" fg:x="12638" fg:w="3"/><text x="99.7181%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked (3 samples, 0.02%)</title><rect x="99.5981%" y="805" width="0.0236%" height="15" fill="rgb(249,199,1)" fg:x="12638" fg:w="3"/><text x="99.7181%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (2 samples, 0.02%)</title><rect x="99.6060%" y="789" width="0.0158%" height="15" fill="rgb(240,85,17)" fg:x="12639" fg:w="2"/><text x="99.7260%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (2 samples, 0.02%)</title><rect x="99.6060%" y="773" width="0.0158%" height="15" fill="rgb(206,108,45)" fg:x="12639" fg:w="2"/><text x="99.7260%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (4 samples, 0.03%)</title><rect x="99.6217%" y="837" width="0.0315%" height="15" fill="rgb(245,210,41)" fg:x="12641" fg:w="4"/><text x="99.7417%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_task::{{closure}} (4 samples, 0.03%)</title><rect x="99.6217%" y="821" width="0.0315%" height="15" fill="rgb(206,13,37)" fg:x="12641" fg:w="4"/><text x="99.7417%" y="831.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::pop (3 samples, 0.02%)</title><rect x="99.6296%" y="805" width="0.0236%" height="15" fill="rgb(250,61,18)" fg:x="12642" fg:w="3"/><text x="99.7496%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_task (16 samples, 0.13%)</title><rect x="99.6217%" y="853" width="0.1261%" height="15" fill="rgb(235,172,48)" fg:x="12641" fg:w="16"/><text x="99.7417%" y="863.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_local_task (12 samples, 0.09%)</title><rect x="99.6532%" y="837" width="0.0946%" height="15" fill="rgb(249,201,17)" fg:x="12645" fg:w="12"/><text x="99.7732%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (12 samples, 0.09%)</title><rect x="99.6532%" y="821" width="0.0946%" height="15" fill="rgb(219,208,6)" fg:x="12645" fg:w="12"/><text x="99.7732%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_local_task::{{closure}} (12 samples, 0.09%)</title><rect x="99.6532%" y="805" width="0.0946%" height="15" fill="rgb(248,31,23)" fg:x="12645" fg:w="12"/><text x="99.7732%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::pop (12 samples, 0.09%)</title><rect x="99.6532%" y="789" width="0.0946%" height="15" fill="rgb(245,15,42)" fg:x="12645" fg:w="12"/><text x="99.7732%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::pre_shutdown (2 samples, 0.02%)</title><rect x="99.7478%" y="853" width="0.0158%" height="15" fill="rgb(222,217,39)" fg:x="12657" fg:w="2"/><text x="99.8678%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::store (3 samples, 0.02%)</title><rect x="99.8424%" y="821" width="0.0236%" height="15" fill="rgb(210,219,27)" fg:x="12669" fg:w="3"/><text x="99.9624%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_store (3 samples, 0.02%)</title><rect x="99.8424%" y="805" width="0.0236%" height="15" fill="rgb(252,166,36)" fg:x="12669" fg:w="3"/><text x="99.9624%" y="815.50"></text></g><g><title>tokio::loom::std::atomic_u32::AtomicU32::unsync_load (3 samples, 0.02%)</title><rect x="99.8660%" y="821" width="0.0236%" height="15" fill="rgb(245,132,34)" fg:x="12672" fg:w="3"/><text x="99.9860%" y="831.50"></text></g><g><title>core::ptr::read (3 samples, 0.02%)</title><rect x="99.8660%" y="805" width="0.0236%" height="15" fill="rgb(236,54,3)" fg:x="12672" fg:w="3"/><text x="99.9860%" y="815.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (6,350 samples, 50.04%)</title><rect x="49.9094%" y="949" width="50.0433%" height="15" fill="rgb(241,173,43)" fg:x="6333" fg:w="6350"/><text x="50.0294%" y="959.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (6,348 samples, 50.03%)</title><rect x="49.9251%" y="933" width="50.0276%" height="15" fill="rgb(215,190,9)" fg:x="6335" fg:w="6348"/><text x="50.0451%" y="943.50">tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (6,347 samples, 50.02%)</title><rect x="49.9330%" y="917" width="50.0197%" height="15" fill="rgb(242,101,16)" fg:x="6336" fg:w="6347"/><text x="50.0530%" y="927.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (6,344 samples, 50.00%)</title><rect x="49.9567%" y="901" width="49.9961%" height="15" fill="rgb(223,190,21)" fg:x="6339" fg:w="6344"/><text x="50.0767%" y="911.50">tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (6,344 samples, 50.00%)</title><rect x="49.9567%" y="885" width="49.9961%" height="15" fill="rgb(215,228,25)" fg:x="6339" fg:w="6344"/><text x="50.0767%" y="895.50">tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (6,344 samples, 50.00%)</title><rect x="49.9567%" y="869" width="49.9961%" height="15" fill="rgb(225,36,22)" fg:x="6339" fg:w="6344"/><text x="50.0767%" y="879.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::steal_work (24 samples, 0.19%)</title><rect x="99.7636%" y="853" width="0.1891%" height="15" fill="rgb(251,106,46)" fg:x="12659" fg:w="24"/><text x="99.8836%" y="863.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (17 samples, 0.13%)</title><rect x="99.8187%" y="837" width="0.1340%" height="15" fill="rgb(208,90,1)" fg:x="12666" fg:w="17"/><text x="99.9387%" y="847.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into2 (8 samples, 0.06%)</title><rect x="99.8897%" y="821" width="0.0630%" height="15" fill="rgb(243,10,4)" fg:x="12675" fg:w="8"/><text x="100.0097%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (8 samples, 0.06%)</title><rect x="99.8897%" y="805" width="0.0630%" height="15" fill="rgb(212,137,27)" fg:x="12675" fg:w="8"/><text x="100.0097%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_load (8 samples, 0.06%)</title><rect x="99.8897%" y="789" width="0.0630%" height="15" fill="rgb(231,220,49)" fg:x="12675" fg:w="8"/><text x="100.0097%" y="799.50"></text></g><g><title>std::panic::catch_unwind (6,457 samples, 50.89%)</title><rect x="49.0740%" y="1301" width="50.8866%" height="15" fill="rgb(237,96,20)" fg:x="6227" fg:w="6457"/><text x="49.1940%" y="1311.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (6,457 samples, 50.89%)</title><rect x="49.0740%" y="1285" width="50.8866%" height="15" fill="rgb(239,229,30)" fg:x="6227" fg:w="6457"/><text x="49.1940%" y="1295.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (6,457 samples, 50.89%)</title><rect x="49.0740%" y="1269" width="50.8866%" height="15" fill="rgb(219,65,33)" fg:x="6227" fg:w="6457"/><text x="49.1940%" y="1279.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,457 samples, 50.89%)</title><rect x="49.0740%" y="1253" width="50.8866%" height="15" fill="rgb(243,134,7)" fg:x="6227" fg:w="6457"/><text x="49.1940%" y="1263.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (6,457 samples, 50.89%)</title><rect x="49.0740%" y="1237" width="50.8866%" height="15" fill="rgb(216,177,54)" fg:x="6227" fg:w="6457"/><text x="49.1940%" y="1247.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6,457 samples, 50.89%)</title><rect x="49.0740%" y="1221" width="50.8866%" height="15" fill="rgb(211,160,20)" fg:x="6227" fg:w="6457"/><text x="49.1940%" y="1231.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (6,438 samples, 50.74%)</title><rect x="49.2237%" y="1205" width="50.7369%" height="15" fill="rgb(239,85,39)" fg:x="6246" fg:w="6438"/><text x="49.3437%" y="1215.50">tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}}</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (6,437 samples, 50.73%)</title><rect x="49.2316%" y="1189" width="50.7290%" height="15" fill="rgb(232,125,22)" fg:x="6247" fg:w="6437"/><text x="49.3516%" y="1199.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::blocking::pool::Task::run (6,364 samples, 50.15%)</title><rect x="49.8069%" y="1173" width="50.1537%" height="15" fill="rgb(244,57,34)" fg:x="6320" fg:w="6364"/><text x="49.9269%" y="1183.50">tokio::runtime::blocking::pool::Task::run</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (6,364 samples, 50.15%)</title><rect x="49.8069%" y="1157" width="50.1537%" height="15" fill="rgb(214,203,32)" fg:x="6320" fg:w="6364"/><text x="49.9269%" y="1167.50">tokio::runtime::task::UnownedTask&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (6,364 samples, 50.15%)</title><rect x="49.8069%" y="1141" width="50.1537%" height="15" fill="rgb(207,58,43)" fg:x="6320" fg:w="6364"/><text x="49.9269%" y="1151.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (6,357 samples, 50.10%)</title><rect x="49.8621%" y="1125" width="50.0985%" height="15" fill="rgb(215,193,15)" fg:x="6327" fg:w="6357"/><text x="49.9821%" y="1135.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (6,356 samples, 50.09%)</title><rect x="49.8700%" y="1109" width="50.0906%" height="15" fill="rgb(232,15,44)" fg:x="6328" fg:w="6356"/><text x="49.9900%" y="1119.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::harness::poll_future (6,352 samples, 50.06%)</title><rect x="49.9015%" y="1093" width="50.0591%" height="15" fill="rgb(212,3,48)" fg:x="6332" fg:w="6352"/><text x="50.0215%" y="1103.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (6,352 samples, 50.06%)</title><rect x="49.9015%" y="1077" width="50.0591%" height="15" fill="rgb(218,128,7)" fg:x="6332" fg:w="6352"/><text x="50.0215%" y="1087.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (6,352 samples, 50.06%)</title><rect x="49.9015%" y="1061" width="50.0591%" height="15" fill="rgb(226,216,39)" fg:x="6332" fg:w="6352"/><text x="50.0215%" y="1071.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (6,352 samples, 50.06%)</title><rect x="49.9015%" y="1045" width="50.0591%" height="15" fill="rgb(243,47,51)" fg:x="6332" fg:w="6352"/><text x="50.0215%" y="1055.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,352 samples, 50.06%)</title><rect x="49.9015%" y="1029" width="50.0591%" height="15" fill="rgb(241,183,40)" fg:x="6332" fg:w="6352"/><text x="50.0215%" y="1039.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (6,352 samples, 50.06%)</title><rect x="49.9015%" y="1013" width="50.0591%" height="15" fill="rgb(231,217,32)" fg:x="6332" fg:w="6352"/><text x="50.0215%" y="1023.50">tokio::runtime::task::harness::poll_future::{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (6,352 samples, 50.06%)</title><rect x="49.9015%" y="997" width="50.0591%" height="15" fill="rgb(229,61,38)" fg:x="6332" fg:w="6352"/><text x="50.0215%" y="1007.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (6,351 samples, 50.05%)</title><rect x="49.9094%" y="981" width="50.0512%" height="15" fill="rgb(225,210,5)" fg:x="6333" fg:w="6351"/><text x="50.0294%" y="991.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (6,351 samples, 50.05%)</title><rect x="49.9094%" y="965" width="50.0512%" height="15" fill="rgb(231,79,45)" fg:x="6333" fg:w="6351"/><text x="50.0294%" y="975.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}}</text></g><g><title>std::sys_common::thread_info::set (2 samples, 0.02%)</title><rect x="99.9685%" y="1301" width="0.0158%" height="15" fill="rgb(224,100,7)" fg:x="12685" fg:w="2"/><text x="100.0885%" y="1311.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.9685%" y="1285" width="0.0158%" height="15" fill="rgb(241,198,18)" fg:x="12685" fg:w="2"/><text x="100.0885%" y="1295.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="99.9685%" y="1269" width="0.0158%" height="15" fill="rgb(252,97,53)" fg:x="12685" fg:w="2"/><text x="100.0885%" y="1279.50"></text></g><g><title>std::sys_common::thread_info::THREAD_INFO::__getit (2 samples, 0.02%)</title><rect x="99.9685%" y="1253" width="0.0158%" height="15" fill="rgb(220,88,7)" fg:x="12685" fg:w="2"/><text x="100.0885%" y="1263.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::register_dtor (2 samples, 0.02%)</title><rect x="99.9685%" y="1237" width="0.0158%" height="15" fill="rgb(213,176,14)" fg:x="12685" fg:w="2"/><text x="100.0885%" y="1247.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (6,464 samples, 50.94%)</title><rect x="49.0504%" y="1365" width="50.9418%" height="15" fill="rgb(246,73,7)" fg:x="6224" fg:w="6464"/><text x="49.1704%" y="1375.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (6,461 samples, 50.92%)</title><rect x="49.0740%" y="1349" width="50.9181%" height="15" fill="rgb(245,64,36)" fg:x="6227" fg:w="6461"/><text x="49.1940%" y="1359.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (6,461 samples, 50.92%)</title><rect x="49.0740%" y="1333" width="50.9181%" height="15" fill="rgb(245,80,10)" fg:x="6227" fg:w="6461"/><text x="49.1940%" y="1343.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (6,461 samples, 50.92%)</title><rect x="49.0740%" y="1317" width="50.9181%" height="15" fill="rgb(232,107,50)" fg:x="6227" fg:w="6461"/><text x="49.1940%" y="1327.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>all (12,689 samples, 100%)</title><rect x="0.0000%" y="1445" width="100.0000%" height="15" fill="rgb(253,3,0)" fg:x="0" fg:w="12689"/><text x="0.1200%" y="1455.50"></text></g><g><title>tokio-runtime-w (6,470 samples, 50.99%)</title><rect x="49.0110%" y="1429" width="50.9890%" height="15" fill="rgb(212,99,53)" fg:x="6219" fg:w="6470"/><text x="49.1310%" y="1439.50">tokio-runtime-w</text></g><g><title>__GI___clone3 (6,470 samples, 50.99%)</title><rect x="49.0110%" y="1413" width="50.9890%" height="15" fill="rgb(249,111,54)" fg:x="6219" fg:w="6470"/><text x="49.1310%" y="1423.50">__GI___clone3</text></g><g><title>start_thread (6,470 samples, 50.99%)</title><rect x="49.0110%" y="1397" width="50.9890%" height="15" fill="rgb(249,55,30)" fg:x="6219" fg:w="6470"/><text x="49.1310%" y="1407.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (6,465 samples, 50.95%)</title><rect x="49.0504%" y="1381" width="50.9496%" height="15" fill="rgb(237,47,42)" fg:x="6224" fg:w="6465"/><text x="49.1704%" y="1391.50">std::sys::unix::thread::Thread::new::thread_start</text></g></svg></svg>